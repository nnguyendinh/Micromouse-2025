
menace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e9c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08008024  08008024  00009024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008044  08008044  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  08008044  08008044  00009044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800804c  0800804c  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800804c  0800804c  0000904c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008050  08008050  00009050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008054  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024fc  20000068  080080bc  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002564  080080bc  0000a564  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa91  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bad  00000000  00000000  00019b22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001c6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb7  00000000  00000000  0001d728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff70  00000000  00000000  0001e3df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015a09  00000000  00000000  0003e34f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be067  00000000  00000000  00053d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111dbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a34  00000000  00000000  00111e04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00116838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800800c 	.word	0x0800800c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800800c 	.word	0x0800800c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d82:	2afd      	cmp	r2, #253	@ 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	@ 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	@ 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	@ 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <__gesf2>:
 8000fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fd6:	bf00      	nop

08000fd8 <__lesf2>:
 8000fd8:	f04f 0c01 	mov.w	ip, #1
 8000fdc:	e002      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__cmpsf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff4:	bf18      	it	ne
 8000ff6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffa:	d011      	beq.n	8001020 <__cmpsf2+0x40>
 8000ffc:	b001      	add	sp, #4
 8000ffe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001002:	bf18      	it	ne
 8001004:	ea90 0f01 	teqne	r0, r1
 8001008:	bf58      	it	pl
 800100a:	ebb2 0003 	subspl.w	r0, r2, r3
 800100e:	bf88      	it	hi
 8001010:	17c8      	asrhi	r0, r1, #31
 8001012:	bf38      	it	cc
 8001014:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001018:	bf18      	it	ne
 800101a:	f040 0001 	orrne.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001024:	d102      	bne.n	800102c <__cmpsf2+0x4c>
 8001026:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102a:	d105      	bne.n	8001038 <__cmpsf2+0x58>
 800102c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001030:	d1e4      	bne.n	8000ffc <__cmpsf2+0x1c>
 8001032:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001036:	d0e1      	beq.n	8000ffc <__cmpsf2+0x1c>
 8001038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_cfrcmple>:
 8001040:	4684      	mov	ip, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4661      	mov	r1, ip
 8001046:	e7ff      	b.n	8001048 <__aeabi_cfcmpeq>

08001048 <__aeabi_cfcmpeq>:
 8001048:	b50f      	push	{r0, r1, r2, r3, lr}
 800104a:	f7ff ffc9 	bl	8000fe0 <__cmpsf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	bf48      	it	mi
 8001052:	f110 0f00 	cmnmi.w	r0, #0
 8001056:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001058 <__aeabi_fcmpeq>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff fff4 	bl	8001048 <__aeabi_cfcmpeq>
 8001060:	bf0c      	ite	eq
 8001062:	2001      	moveq	r0, #1
 8001064:	2000      	movne	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmplt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffea 	bl	8001048 <__aeabi_cfcmpeq>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmple>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffe0 	bl	8001048 <__aeabi_cfcmpeq>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpge>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffd2 	bl	8001040 <__aeabi_cfrcmple>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpgt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffc8 	bl	8001040 <__aeabi_cfrcmple>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_f2iz>:
 80010bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010c4:	d30f      	bcc.n	80010e6 <__aeabi_f2iz+0x2a>
 80010c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d90d      	bls.n	80010ec <__aeabi_f2iz+0x30>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010d8:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010dc:	fa23 f002 	lsr.w	r0, r3, r2
 80010e0:	bf18      	it	ne
 80010e2:	4240      	negne	r0, r0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0000 	mov.w	r0, #0
 80010ea:	4770      	bx	lr
 80010ec:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010f0:	d101      	bne.n	80010f6 <__aeabi_f2iz+0x3a>
 80010f2:	0242      	lsls	r2, r0, #9
 80010f4:	d105      	bne.n	8001102 <__aeabi_f2iz+0x46>
 80010f6:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010fa:	bf08      	it	eq
 80010fc:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001100:	4770      	bx	lr
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4770      	bx	lr

08001108 <__aeabi_f2uiz>:
 8001108:	0042      	lsls	r2, r0, #1
 800110a:	d20e      	bcs.n	800112a <__aeabi_f2uiz+0x22>
 800110c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001110:	d30b      	bcc.n	800112a <__aeabi_f2uiz+0x22>
 8001112:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001116:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111a:	d409      	bmi.n	8001130 <__aeabi_f2uiz+0x28>
 800111c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001120:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001124:	fa23 f002 	lsr.w	r0, r3, r2
 8001128:	4770      	bx	lr
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	4770      	bx	lr
 8001130:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001134:	d101      	bne.n	800113a <__aeabi_f2uiz+0x32>
 8001136:	0242      	lsls	r2, r0, #9
 8001138:	d102      	bne.n	8001140 <__aeabi_f2uiz+0x38>
 800113a:	f04f 30ff 	mov.w	r0, #4294967295
 800113e:	4770      	bx	lr
 8001140:	f04f 0000 	mov.w	r0, #0
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop

08001148 <__aeabi_uldivmod>:
 8001148:	b953      	cbnz	r3, 8001160 <__aeabi_uldivmod+0x18>
 800114a:	b94a      	cbnz	r2, 8001160 <__aeabi_uldivmod+0x18>
 800114c:	2900      	cmp	r1, #0
 800114e:	bf08      	it	eq
 8001150:	2800      	cmpeq	r0, #0
 8001152:	bf1c      	itt	ne
 8001154:	f04f 31ff 	movne.w	r1, #4294967295
 8001158:	f04f 30ff 	movne.w	r0, #4294967295
 800115c:	f000 b968 	b.w	8001430 <__aeabi_idiv0>
 8001160:	f1ad 0c08 	sub.w	ip, sp, #8
 8001164:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001168:	f000 f806 	bl	8001178 <__udivmoddi4>
 800116c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001170:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001174:	b004      	add	sp, #16
 8001176:	4770      	bx	lr

08001178 <__udivmoddi4>:
 8001178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800117c:	9d08      	ldr	r5, [sp, #32]
 800117e:	460c      	mov	r4, r1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d14e      	bne.n	8001222 <__udivmoddi4+0xaa>
 8001184:	4694      	mov	ip, r2
 8001186:	458c      	cmp	ip, r1
 8001188:	4686      	mov	lr, r0
 800118a:	fab2 f282 	clz	r2, r2
 800118e:	d962      	bls.n	8001256 <__udivmoddi4+0xde>
 8001190:	b14a      	cbz	r2, 80011a6 <__udivmoddi4+0x2e>
 8001192:	f1c2 0320 	rsb	r3, r2, #32
 8001196:	4091      	lsls	r1, r2
 8001198:	fa20 f303 	lsr.w	r3, r0, r3
 800119c:	fa0c fc02 	lsl.w	ip, ip, r2
 80011a0:	4319      	orrs	r1, r3
 80011a2:	fa00 fe02 	lsl.w	lr, r0, r2
 80011a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011aa:	fbb1 f4f7 	udiv	r4, r1, r7
 80011ae:	fb07 1114 	mls	r1, r7, r4, r1
 80011b2:	fa1f f68c 	uxth.w	r6, ip
 80011b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80011ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011be:	fb04 f106 	mul.w	r1, r4, r6
 80011c2:	4299      	cmp	r1, r3
 80011c4:	d90a      	bls.n	80011dc <__udivmoddi4+0x64>
 80011c6:	eb1c 0303 	adds.w	r3, ip, r3
 80011ca:	f104 30ff 	add.w	r0, r4, #4294967295
 80011ce:	f080 8110 	bcs.w	80013f2 <__udivmoddi4+0x27a>
 80011d2:	4299      	cmp	r1, r3
 80011d4:	f240 810d 	bls.w	80013f2 <__udivmoddi4+0x27a>
 80011d8:	3c02      	subs	r4, #2
 80011da:	4463      	add	r3, ip
 80011dc:	1a59      	subs	r1, r3, r1
 80011de:	fbb1 f0f7 	udiv	r0, r1, r7
 80011e2:	fb07 1110 	mls	r1, r7, r0, r1
 80011e6:	fb00 f606 	mul.w	r6, r0, r6
 80011ea:	fa1f f38e 	uxth.w	r3, lr
 80011ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011f2:	429e      	cmp	r6, r3
 80011f4:	d90a      	bls.n	800120c <__udivmoddi4+0x94>
 80011f6:	eb1c 0303 	adds.w	r3, ip, r3
 80011fa:	f100 31ff 	add.w	r1, r0, #4294967295
 80011fe:	f080 80fa 	bcs.w	80013f6 <__udivmoddi4+0x27e>
 8001202:	429e      	cmp	r6, r3
 8001204:	f240 80f7 	bls.w	80013f6 <__udivmoddi4+0x27e>
 8001208:	4463      	add	r3, ip
 800120a:	3802      	subs	r0, #2
 800120c:	2100      	movs	r1, #0
 800120e:	1b9b      	subs	r3, r3, r6
 8001210:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001214:	b11d      	cbz	r5, 800121e <__udivmoddi4+0xa6>
 8001216:	40d3      	lsrs	r3, r2
 8001218:	2200      	movs	r2, #0
 800121a:	e9c5 3200 	strd	r3, r2, [r5]
 800121e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001222:	428b      	cmp	r3, r1
 8001224:	d905      	bls.n	8001232 <__udivmoddi4+0xba>
 8001226:	b10d      	cbz	r5, 800122c <__udivmoddi4+0xb4>
 8001228:	e9c5 0100 	strd	r0, r1, [r5]
 800122c:	2100      	movs	r1, #0
 800122e:	4608      	mov	r0, r1
 8001230:	e7f5      	b.n	800121e <__udivmoddi4+0xa6>
 8001232:	fab3 f183 	clz	r1, r3
 8001236:	2900      	cmp	r1, #0
 8001238:	d146      	bne.n	80012c8 <__udivmoddi4+0x150>
 800123a:	42a3      	cmp	r3, r4
 800123c:	d302      	bcc.n	8001244 <__udivmoddi4+0xcc>
 800123e:	4290      	cmp	r0, r2
 8001240:	f0c0 80ee 	bcc.w	8001420 <__udivmoddi4+0x2a8>
 8001244:	1a86      	subs	r6, r0, r2
 8001246:	eb64 0303 	sbc.w	r3, r4, r3
 800124a:	2001      	movs	r0, #1
 800124c:	2d00      	cmp	r5, #0
 800124e:	d0e6      	beq.n	800121e <__udivmoddi4+0xa6>
 8001250:	e9c5 6300 	strd	r6, r3, [r5]
 8001254:	e7e3      	b.n	800121e <__udivmoddi4+0xa6>
 8001256:	2a00      	cmp	r2, #0
 8001258:	f040 808f 	bne.w	800137a <__udivmoddi4+0x202>
 800125c:	eba1 040c 	sub.w	r4, r1, ip
 8001260:	2101      	movs	r1, #1
 8001262:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001266:	fa1f f78c 	uxth.w	r7, ip
 800126a:	fbb4 f6f8 	udiv	r6, r4, r8
 800126e:	fb08 4416 	mls	r4, r8, r6, r4
 8001272:	fb07 f006 	mul.w	r0, r7, r6
 8001276:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800127a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800127e:	4298      	cmp	r0, r3
 8001280:	d908      	bls.n	8001294 <__udivmoddi4+0x11c>
 8001282:	eb1c 0303 	adds.w	r3, ip, r3
 8001286:	f106 34ff 	add.w	r4, r6, #4294967295
 800128a:	d202      	bcs.n	8001292 <__udivmoddi4+0x11a>
 800128c:	4298      	cmp	r0, r3
 800128e:	f200 80cb 	bhi.w	8001428 <__udivmoddi4+0x2b0>
 8001292:	4626      	mov	r6, r4
 8001294:	1a1c      	subs	r4, r3, r0
 8001296:	fbb4 f0f8 	udiv	r0, r4, r8
 800129a:	fb08 4410 	mls	r4, r8, r0, r4
 800129e:	fb00 f707 	mul.w	r7, r0, r7
 80012a2:	fa1f f38e 	uxth.w	r3, lr
 80012a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012aa:	429f      	cmp	r7, r3
 80012ac:	d908      	bls.n	80012c0 <__udivmoddi4+0x148>
 80012ae:	eb1c 0303 	adds.w	r3, ip, r3
 80012b2:	f100 34ff 	add.w	r4, r0, #4294967295
 80012b6:	d202      	bcs.n	80012be <__udivmoddi4+0x146>
 80012b8:	429f      	cmp	r7, r3
 80012ba:	f200 80ae 	bhi.w	800141a <__udivmoddi4+0x2a2>
 80012be:	4620      	mov	r0, r4
 80012c0:	1bdb      	subs	r3, r3, r7
 80012c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80012c6:	e7a5      	b.n	8001214 <__udivmoddi4+0x9c>
 80012c8:	f1c1 0720 	rsb	r7, r1, #32
 80012cc:	408b      	lsls	r3, r1
 80012ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80012d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80012d6:	fa24 f607 	lsr.w	r6, r4, r7
 80012da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80012de:	fbb6 f8f9 	udiv	r8, r6, r9
 80012e2:	fa1f fe8c 	uxth.w	lr, ip
 80012e6:	fb09 6618 	mls	r6, r9, r8, r6
 80012ea:	fa20 f307 	lsr.w	r3, r0, r7
 80012ee:	408c      	lsls	r4, r1
 80012f0:	fa00 fa01 	lsl.w	sl, r0, r1
 80012f4:	fb08 f00e 	mul.w	r0, r8, lr
 80012f8:	431c      	orrs	r4, r3
 80012fa:	0c23      	lsrs	r3, r4, #16
 80012fc:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001300:	4298      	cmp	r0, r3
 8001302:	fa02 f201 	lsl.w	r2, r2, r1
 8001306:	d90a      	bls.n	800131e <__udivmoddi4+0x1a6>
 8001308:	eb1c 0303 	adds.w	r3, ip, r3
 800130c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001310:	f080 8081 	bcs.w	8001416 <__udivmoddi4+0x29e>
 8001314:	4298      	cmp	r0, r3
 8001316:	d97e      	bls.n	8001416 <__udivmoddi4+0x29e>
 8001318:	f1a8 0802 	sub.w	r8, r8, #2
 800131c:	4463      	add	r3, ip
 800131e:	1a1e      	subs	r6, r3, r0
 8001320:	fbb6 f3f9 	udiv	r3, r6, r9
 8001324:	fb09 6613 	mls	r6, r9, r3, r6
 8001328:	fb03 fe0e 	mul.w	lr, r3, lr
 800132c:	b2a4      	uxth	r4, r4
 800132e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001332:	45a6      	cmp	lr, r4
 8001334:	d908      	bls.n	8001348 <__udivmoddi4+0x1d0>
 8001336:	eb1c 0404 	adds.w	r4, ip, r4
 800133a:	f103 30ff 	add.w	r0, r3, #4294967295
 800133e:	d266      	bcs.n	800140e <__udivmoddi4+0x296>
 8001340:	45a6      	cmp	lr, r4
 8001342:	d964      	bls.n	800140e <__udivmoddi4+0x296>
 8001344:	3b02      	subs	r3, #2
 8001346:	4464      	add	r4, ip
 8001348:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800134c:	fba0 8302 	umull	r8, r3, r0, r2
 8001350:	eba4 040e 	sub.w	r4, r4, lr
 8001354:	429c      	cmp	r4, r3
 8001356:	46c6      	mov	lr, r8
 8001358:	461e      	mov	r6, r3
 800135a:	d350      	bcc.n	80013fe <__udivmoddi4+0x286>
 800135c:	d04d      	beq.n	80013fa <__udivmoddi4+0x282>
 800135e:	b155      	cbz	r5, 8001376 <__udivmoddi4+0x1fe>
 8001360:	ebba 030e 	subs.w	r3, sl, lr
 8001364:	eb64 0406 	sbc.w	r4, r4, r6
 8001368:	fa04 f707 	lsl.w	r7, r4, r7
 800136c:	40cb      	lsrs	r3, r1
 800136e:	431f      	orrs	r7, r3
 8001370:	40cc      	lsrs	r4, r1
 8001372:	e9c5 7400 	strd	r7, r4, [r5]
 8001376:	2100      	movs	r1, #0
 8001378:	e751      	b.n	800121e <__udivmoddi4+0xa6>
 800137a:	fa0c fc02 	lsl.w	ip, ip, r2
 800137e:	f1c2 0320 	rsb	r3, r2, #32
 8001382:	40d9      	lsrs	r1, r3
 8001384:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001388:	fa20 f303 	lsr.w	r3, r0, r3
 800138c:	fa00 fe02 	lsl.w	lr, r0, r2
 8001390:	fbb1 f0f8 	udiv	r0, r1, r8
 8001394:	fb08 1110 	mls	r1, r8, r0, r1
 8001398:	4094      	lsls	r4, r2
 800139a:	431c      	orrs	r4, r3
 800139c:	fa1f f78c 	uxth.w	r7, ip
 80013a0:	0c23      	lsrs	r3, r4, #16
 80013a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013a6:	fb00 f107 	mul.w	r1, r0, r7
 80013aa:	4299      	cmp	r1, r3
 80013ac:	d908      	bls.n	80013c0 <__udivmoddi4+0x248>
 80013ae:	eb1c 0303 	adds.w	r3, ip, r3
 80013b2:	f100 36ff 	add.w	r6, r0, #4294967295
 80013b6:	d22c      	bcs.n	8001412 <__udivmoddi4+0x29a>
 80013b8:	4299      	cmp	r1, r3
 80013ba:	d92a      	bls.n	8001412 <__udivmoddi4+0x29a>
 80013bc:	3802      	subs	r0, #2
 80013be:	4463      	add	r3, ip
 80013c0:	1a5b      	subs	r3, r3, r1
 80013c2:	fbb3 f1f8 	udiv	r1, r3, r8
 80013c6:	fb08 3311 	mls	r3, r8, r1, r3
 80013ca:	b2a4      	uxth	r4, r4
 80013cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013d0:	fb01 f307 	mul.w	r3, r1, r7
 80013d4:	42a3      	cmp	r3, r4
 80013d6:	d908      	bls.n	80013ea <__udivmoddi4+0x272>
 80013d8:	eb1c 0404 	adds.w	r4, ip, r4
 80013dc:	f101 36ff 	add.w	r6, r1, #4294967295
 80013e0:	d213      	bcs.n	800140a <__udivmoddi4+0x292>
 80013e2:	42a3      	cmp	r3, r4
 80013e4:	d911      	bls.n	800140a <__udivmoddi4+0x292>
 80013e6:	3902      	subs	r1, #2
 80013e8:	4464      	add	r4, ip
 80013ea:	1ae4      	subs	r4, r4, r3
 80013ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013f0:	e73b      	b.n	800126a <__udivmoddi4+0xf2>
 80013f2:	4604      	mov	r4, r0
 80013f4:	e6f2      	b.n	80011dc <__udivmoddi4+0x64>
 80013f6:	4608      	mov	r0, r1
 80013f8:	e708      	b.n	800120c <__udivmoddi4+0x94>
 80013fa:	45c2      	cmp	sl, r8
 80013fc:	d2af      	bcs.n	800135e <__udivmoddi4+0x1e6>
 80013fe:	ebb8 0e02 	subs.w	lr, r8, r2
 8001402:	eb63 060c 	sbc.w	r6, r3, ip
 8001406:	3801      	subs	r0, #1
 8001408:	e7a9      	b.n	800135e <__udivmoddi4+0x1e6>
 800140a:	4631      	mov	r1, r6
 800140c:	e7ed      	b.n	80013ea <__udivmoddi4+0x272>
 800140e:	4603      	mov	r3, r0
 8001410:	e79a      	b.n	8001348 <__udivmoddi4+0x1d0>
 8001412:	4630      	mov	r0, r6
 8001414:	e7d4      	b.n	80013c0 <__udivmoddi4+0x248>
 8001416:	46b0      	mov	r8, r6
 8001418:	e781      	b.n	800131e <__udivmoddi4+0x1a6>
 800141a:	4463      	add	r3, ip
 800141c:	3802      	subs	r0, #2
 800141e:	e74f      	b.n	80012c0 <__udivmoddi4+0x148>
 8001420:	4606      	mov	r6, r0
 8001422:	4623      	mov	r3, r4
 8001424:	4608      	mov	r0, r1
 8001426:	e711      	b.n	800124c <__udivmoddi4+0xd4>
 8001428:	3e02      	subs	r6, #2
 800142a:	4463      	add	r3, ip
 800142c:	e732      	b.n	8001294 <__udivmoddi4+0x11c>
 800142e:	bf00      	nop

08001430 <__aeabi_idiv0>:
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop

08001434 <move>:
#include "encoders.h"

#include <math.h>


void move(int16_t mm) {	// Make n 90 degree turns (no acceleration)
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	80fb      	strh	r3, [r7, #6]


	resetPID();
 800143e:	f001 fb57 	bl	8002af0 <resetPID>
	setPIDGoalD(mm);
 8001442:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001446:	4618      	mov	r0, r3
 8001448:	f000 ffd6 	bl	80023f8 <setPIDGoalD>
	setPIDGoalA(0);
 800144c:	2000      	movs	r0, #0
 800144e:	f000 ffe7 	bl	8002420 <setPIDGoalA>

	while(!PIDdone())
 8001452:	bf00      	nop
 8001454:	f001 fb3c 	bl	8002ad0 <PIDdone>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0fa      	beq.n	8001454 <move+0x20>
	{

	}

	resetPID();
 800145e:	f001 fb47 	bl	8002af0 <resetPID>

}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <turn>:


void turn(int16_t degrees) {	// Make n 90 degree turns (no acceleration)
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	80fb      	strh	r3, [r7, #6]


	resetPID();
 8001474:	f001 fb3c 	bl	8002af0 <resetPID>
	setPIDGoalD(0);
 8001478:	2000      	movs	r0, #0
 800147a:	f000 ffbd 	bl	80023f8 <setPIDGoalD>
	setPIDGoalA(degrees);
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 ffcc 	bl	8002420 <setPIDGoalA>

	while(!PIDdone())
 8001488:	bf00      	nop
 800148a:	f001 fb21 	bl	8002ad0 <PIDdone>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0fa      	beq.n	800148a <turn+0x20>
	{

	}

	resetPID();
 8001494:	f001 fb2c 	bl	8002af0 <resetPID>

}
 8001498:	bf00      	nop
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <frontCorrection>:


void frontCorrection() {
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
//		}
//	}
//
//	resetPID();

}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <delayMicroseconds>:
#include "main.h"
#include "delay.h"

// Delays for us microseconds
void delayMicroseconds(uint16_t us)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	80fb      	strh	r3, [r7, #6]

    TIM10->CNT = 0;
 80014b6:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <delayMicroseconds+0x40>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	625a      	str	r2, [r3, #36]	@ 0x24
    uint16_t start = (uint16_t) TIM10->CNT;
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <delayMicroseconds+0x40>)
 80014be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c0:	81fb      	strh	r3, [r7, #14]

    uint32_t duration = us * 60;	// Our MCU runs at 60 MHz, so each microsecond lasts 60 clock ticks
 80014c2:	88fa      	ldrh	r2, [r7, #6]
 80014c4:	4613      	mov	r3, r2
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	1a9b      	subs	r3, r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	60bb      	str	r3, [r7, #8]
    while (TIM10->CNT - start < duration);
 80014ce:	bf00      	nop
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <delayMicroseconds+0x40>)
 80014d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014d4:	89fb      	ldrh	r3, [r7, #14]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	68ba      	ldr	r2, [r7, #8]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d8f8      	bhi.n	80014d0 <delayMicroseconds+0x24>

}
 80014de:	bf00      	nop
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40014400 	.word	0x40014400

080014f0 <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 80014f4:	4b04      	ldr	r3, [pc, #16]	@ (8001508 <getRightEncoderCounts+0x18>)
 80014f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	425b      	negs	r3, r3
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	b21b      	sxth	r3, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	40000400 	.word	0x40000400

0800150c <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 8001510:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <getLeftEncoderCounts+0x18>)
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	b29b      	uxth	r3, r3
 8001516:	425b      	negs	r3, r3
 8001518:	b29b      	uxth	r3, r3
 800151a:	b21b      	sxth	r3, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40010400 	.word	0x40010400

08001528 <resetEncoders>:

void resetEncoders() {
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 800152c:	4b04      	ldr	r3, [pc, #16]	@ (8001540 <resetEncoders+0x18>)
 800152e:	2200      	movs	r2, #0
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM8->CNT = (int16_t) 0;
 8001532:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <resetEncoders+0x1c>)
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	40000400 	.word	0x40000400
 8001544:	40010400 	.word	0x40010400

08001548 <gyroInit>:
int gyro_initialized = 0;
float Gx_offset = 0;
float Gy_offset = 0;
float Gz_offset = 0;

uint8_t gyroInit(void) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b0ee      	sub	sp, #440	@ 0x1b8
 800154c:	af04      	add	r7, sp, #16
    if (gyro_initialized) return 1;
 800154e:	4b90      	ldr	r3, [pc, #576]	@ (8001790 <gyroInit+0x248>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <gyroInit+0x12>
 8001556:	2301      	movs	r3, #1
 8001558:	e10c      	b.n	8001774 <gyroInit+0x22c>

    I2C_HandleTypeDef *hi2c1_ptr = Get_I2C1_Ptr();
 800155a:	f000 fe07 	bl	800216c <Get_I2C1_Ptr>
 800155e:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

    HAL_StatusTypeDef ret;
    uint8_t temp;

    // establishing connection with the device
    ret = HAL_I2C_IsDeviceReady(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, 1, 1000);
 8001562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001566:	2201      	movs	r2, #1
 8001568:	21d0      	movs	r1, #208	@ 0xd0
 800156a:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 800156e:	f004 fa47 	bl	8005a00 <HAL_I2C_IsDeviceReady>
 8001572:	4603      	mov	r3, r0
 8001574:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 8001578:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 800157c:	2b00      	cmp	r3, #0
 800157e:	d002      	beq.n	8001586 <gyroInit+0x3e>
 8001580:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001584:	e0f6      	b.n	8001774 <gyroInit+0x22c>

    // configuring power management
    temp = 0b00001000;
 8001586:	2308      	movs	r3, #8
 8001588:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_USER_CTRL, 1, &temp, 1, 100);
 800158c:	2364      	movs	r3, #100	@ 0x64
 800158e:	9302      	str	r3, [sp, #8]
 8001590:	2301      	movs	r3, #1
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 8001598:	9300      	str	r3, [sp, #0]
 800159a:	2301      	movs	r3, #1
 800159c:	226b      	movs	r2, #107	@ 0x6b
 800159e:	21d0      	movs	r1, #208	@ 0xd0
 80015a0:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80015a4:	f003 ff00 	bl	80053a8 <HAL_I2C_Mem_Write>
 80015a8:	4603      	mov	r3, r0
 80015aa:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 80015ae:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d002      	beq.n	80015bc <gyroInit+0x74>
 80015b6:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80015ba:	e0db      	b.n	8001774 <gyroInit+0x22c>

    // configuring gyroscope
    temp = FS_GYRO_500;
 80015bc:	2308      	movs	r3, #8
 80015be:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &temp, 1, 100);
 80015c2:	2364      	movs	r3, #100	@ 0x64
 80015c4:	9302      	str	r3, [sp, #8]
 80015c6:	2301      	movs	r3, #1
 80015c8:	9301      	str	r3, [sp, #4]
 80015ca:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	2301      	movs	r3, #1
 80015d2:	221b      	movs	r2, #27
 80015d4:	21d0      	movs	r1, #208	@ 0xd0
 80015d6:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80015da:	f003 fee5 	bl	80053a8 <HAL_I2C_Mem_Write>
 80015de:	4603      	mov	r3, r0
 80015e0:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 80015e4:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d002      	beq.n	80015f2 <gyroInit+0xaa>
 80015ec:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80015f0:	e0c0      	b.n	8001774 <gyroInit+0x22c>

    // configuring accelerometer
    temp = FS_ACC_2G;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &temp, 1, 100);
 80015f8:	2364      	movs	r3, #100	@ 0x64
 80015fa:	9302      	str	r3, [sp, #8]
 80015fc:	2301      	movs	r3, #1
 80015fe:	9301      	str	r3, [sp, #4]
 8001600:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	2301      	movs	r3, #1
 8001608:	221c      	movs	r2, #28
 800160a:	21d0      	movs	r1, #208	@ 0xd0
 800160c:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8001610:	f003 feca 	bl	80053a8 <HAL_I2C_Mem_Write>
 8001614:	4603      	mov	r3, r0
 8001616:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 800161a:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 800161e:	2b00      	cmp	r3, #0
 8001620:	d002      	beq.n	8001628 <gyroInit+0xe0>
 8001622:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001626:	e0a5      	b.n	8001774 <gyroInit+0x22c>

    gyro_initialized = 1;
 8001628:	4b59      	ldr	r3, [pc, #356]	@ (8001790 <gyroInit+0x248>)
 800162a:	2201      	movs	r2, #1
 800162c:	601a      	str	r2, [r3, #0]

    // calculating offsets
//    float Gx_readings[10] = { 0.0 };
//    float Gy_readings[10] = { 0.0 };
    float Gz_readings[100] = { 0.0 };
 800162e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001632:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001636:	4618      	mov	r0, r3
 8001638:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800163c:	461a      	mov	r2, r3
 800163e:	2100      	movs	r1, #0
 8001640:	f006 fc58 	bl	8007ef4 <memset>
//    float Gx_sum = 0.0;
//    float Gy_sum = 0.0;
    float Gz_sum = 0.0;
 8001644:	f04f 0300 	mov.w	r3, #0
 8001648:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    while(1) {
    	Gz_offset = 0;
 800164c:	4b51      	ldr	r3, [pc, #324]	@ (8001794 <gyroInit+0x24c>)
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
    	Gz_sum = 0;
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    	for (int i = 0; i < 100; ++i) {
 800165c:	2300      	movs	r3, #0
 800165e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001662:	e020      	b.n	80016a6 <gyroInit+0x15e>
			readGyro(&Gz_readings[i]);
 8001664:	1d3a      	adds	r2, r7, #4
 8001666:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f000 f896 	bl	80017a0 <readGyro>
	//        Gx_sum += Gx_readings[i];
	//        Gy_sum += Gy_readings[i];
			Gz_sum += Gz_readings[i];
 8001674:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001678:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800167c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8001680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001684:	4619      	mov	r1, r3
 8001686:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 800168a:	f7ff fa49 	bl	8000b20 <__addsf3>
 800168e:	4603      	mov	r3, r0
 8001690:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
			delayMicroseconds(10000);
 8001694:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001698:	f7ff ff08 	bl	80014ac <delayMicroseconds>
    	for (int i = 0; i < 100; ++i) {
 800169c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80016a0:	3301      	adds	r3, #1
 80016a2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80016a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80016aa:	2b63      	cmp	r3, #99	@ 0x63
 80016ac:	ddda      	ble.n	8001664 <gyroInit+0x11c>
		}

	//    Gx_offset = Gx_sum / 10.0;
	//    Gy_offset = Gy_sum / 10.0;
		Gz_offset = Gz_sum / 100.0;
 80016ae:	493a      	ldr	r1, [pc, #232]	@ (8001798 <gyroInit+0x250>)
 80016b0:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 80016b4:	f7ff fbf0 	bl	8000e98 <__aeabi_fdiv>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b35      	ldr	r3, [pc, #212]	@ (8001794 <gyroInit+0x24c>)
 80016be:	601a      	str	r2, [r3, #0]

		Gz_sum = 0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
		for (int i = 0; i < 100; ++i) {
 80016c8:	2300      	movs	r3, #0
 80016ca:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80016ce:	e020      	b.n	8001712 <gyroInit+0x1ca>
			readGyro(&Gz_readings[i]);
 80016d0:	1d3a      	adds	r2, r7, #4
 80016d2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	4413      	add	r3, r2
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f860 	bl	80017a0 <readGyro>
			Gz_sum += Gz_readings[i];
 80016e0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80016e4:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80016e8:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80016ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f0:	4619      	mov	r1, r3
 80016f2:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 80016f6:	f7ff fa13 	bl	8000b20 <__addsf3>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
			delayMicroseconds(10000);
 8001700:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001704:	f7ff fed2 	bl	80014ac <delayMicroseconds>
		for (int i = 0; i < 100; ++i) {
 8001708:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800170c:	3301      	adds	r3, #1
 800170e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001712:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001716:	2b63      	cmp	r3, #99	@ 0x63
 8001718:	ddda      	ble.n	80016d0 <gyroInit+0x188>
		}
		if (Gz_sum / 100.0 < 0.1 && Gz_sum / 100.0 > -0.1) {
 800171a:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 800171e:	f7fe feb7 	bl	8000490 <__aeabi_f2d>
 8001722:	f04f 0200 	mov.w	r2, #0
 8001726:	4b1d      	ldr	r3, [pc, #116]	@ (800179c <gyroInit+0x254>)
 8001728:	f7ff f834 	bl	8000794 <__aeabi_ddiv>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	a312      	add	r3, pc, #72	@ (adr r3, 8001780 <gyroInit+0x238>)
 8001736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173a:	f7ff f973 	bl	8000a24 <__aeabi_dcmplt>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d014      	beq.n	800176e <gyroInit+0x226>
 8001744:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8001748:	f7fe fea2 	bl	8000490 <__aeabi_f2d>
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	4b12      	ldr	r3, [pc, #72]	@ (800179c <gyroInit+0x254>)
 8001752:	f7ff f81f 	bl	8000794 <__aeabi_ddiv>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4610      	mov	r0, r2
 800175c:	4619      	mov	r1, r3
 800175e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001788 <gyroInit+0x240>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f97c 	bl	8000a60 <__aeabi_dcmpgt>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d100      	bne.n	8001770 <gyroInit+0x228>
    	Gz_offset = 0;
 800176e:	e76d      	b.n	800164c <gyroInit+0x104>
			break;
 8001770:	bf00      	nop
		}
    }



    return 1;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	9999999a 	.word	0x9999999a
 8001784:	3fb99999 	.word	0x3fb99999
 8001788:	9999999a 	.word	0x9999999a
 800178c:	bfb99999 	.word	0xbfb99999
 8001790:	20000084 	.word	0x20000084
 8001794:	20000088 	.word	0x20000088
 8001798:	42c80000 	.word	0x42c80000
 800179c:	40590000 	.word	0x40590000

080017a0 <readGyro>:

void readGyro(/*float* Gx , float* Gy, */float* Gz) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af04      	add	r7, sp, #16
 80017a6:	6078      	str	r0, [r7, #4]
    if (!gyro_initialized) {
 80017a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <readGyro+0x74>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d02d      	beq.n	800180c <readGyro+0x6c>
        return;
    }

    I2C_HandleTypeDef *hi2c1_ptr = Get_I2C1_Ptr();
 80017b0:	f000 fcdc 	bl	800216c <Get_I2C1_Ptr>
 80017b4:	60f8      	str	r0, [r7, #12]

//    uint8_t data[6];
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_GYRO_DATA, 1, data, 2, 100);
 80017b6:	2364      	movs	r3, #100	@ 0x64
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	2302      	movs	r3, #2
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2301      	movs	r3, #1
 80017c6:	2247      	movs	r2, #71	@ 0x47
 80017c8:	21d0      	movs	r1, #208	@ 0xd0
 80017ca:	68f8      	ldr	r0, [r7, #12]
 80017cc:	f003 fee6 	bl	800559c <HAL_I2C_Mem_Read>

//    int16_t Gyro_X_RAW = ((int16_t)(data[0] << 8)) | data [1];
//    int16_t Gyro_Y_RAW = ((int16_t)(data[2] << 8)) | data [3];
//    int16_t Gyro_Z_RAW = ((int16_t)(data[4] << 8)) | data [5];
    int16_t Gyro_Z_RAW = ((int16_t)(data[0] << 8)) | data [1];
 80017d0:	7a3b      	ldrb	r3, [r7, #8]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21a      	sxth	r2, r3
 80017d6:	7a7b      	ldrb	r3, [r7, #9]
 80017d8:	b21b      	sxth	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	817b      	strh	r3, [r7, #10]
         for more details check GYRO_CONFIG Register              ****/

//    *Gx = Gyro_X_RAW/131.0 - Gx_offset;
//    *Gy = Gyro_Y_RAW/131.0 - Gy_offset;
//    *Gz = Gyro_Z_RAW/65.5f - Gz_offset;
    *Gz = Gyro_Z_RAW/65.8f - Gz_offset;
 80017de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fa50 	bl	8000c88 <__aeabi_i2f>
 80017e8:	4603      	mov	r3, r0
 80017ea:	490b      	ldr	r1, [pc, #44]	@ (8001818 <readGyro+0x78>)
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fb53 	bl	8000e98 <__aeabi_fdiv>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <readGyro+0x7c>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f7ff f98d 	bl	8000b1c <__aeabi_fsub>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	601a      	str	r2, [r3, #0]

    return;
 800180a:	e000      	b.n	800180e <readGyro+0x6e>
        return;
 800180c:	bf00      	nop
}
 800180e:	3710      	adds	r7, #16
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000084 	.word	0x20000084
 8001818:	4283999a 	.word	0x4283999a
 800181c:	20000088 	.word	0x20000088

08001820 <interruptRoutine>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void interruptRoutine() {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
//	delayMicroseconds(100);

	temp_tick++;
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <interruptRoutine+0x38>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	3301      	adds	r3, #1
 800182a:	4a0b      	ldr	r2, [pc, #44]	@ (8001858 <interruptRoutine+0x38>)
 800182c:	6013      	str	r3, [r2, #0]
	left_counts = getLeftEncoderCounts();
 800182e:	f7ff fe6d 	bl	800150c <getLeftEncoderCounts>
 8001832:	4603      	mov	r3, r0
 8001834:	461a      	mov	r2, r3
 8001836:	4b09      	ldr	r3, [pc, #36]	@ (800185c <interruptRoutine+0x3c>)
 8001838:	801a      	strh	r2, [r3, #0]
	right_counts = getRightEncoderCounts();
 800183a:	f7ff fe59 	bl	80014f0 <getRightEncoderCounts>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b07      	ldr	r3, [pc, #28]	@ (8001860 <interruptRoutine+0x40>)
 8001844:	801a      	strh	r2, [r3, #0]

	if (gyro_inited) {
 8001846:	4b07      	ldr	r3, [pc, #28]	@ (8001864 <interruptRoutine+0x44>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <interruptRoutine+0x32>
		updatePID();
 800184e:	f001 f85f 	bl	8002910 <updatePID>
	}
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000130c 	.word	0x2000130c
 800185c:	200002f2 	.word	0x200002f2
 8001860:	200002f4 	.word	0x200002f4
 8001864:	20001308 	.word	0x20001308

08001868 <solve>:

void solve(Algorithm alg) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
	Action nextMove = solver(alg);
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f001 fcd7 	bl	8003228 <solver>
 800187a:	4603      	mov	r3, r0
 800187c:	73fb      	strb	r3, [r7, #15]
	switch(nextMove) {
 800187e:	7bfb      	ldrb	r3, [r7, #15]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d81c      	bhi.n	80018be <solve+0x56>
 8001884:	a201      	add	r2, pc, #4	@ (adr r2, 800188c <solve+0x24>)
 8001886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800188a:	bf00      	nop
 800188c:	080018ab 	.word	0x080018ab
 8001890:	0800189d 	.word	0x0800189d
 8001894:	080018b5 	.word	0x080018b5
 8001898:	080018bf 	.word	0x080018bf
		case FORWARD:
//			move(0);
//			move(1);
			if (alg == FLOODFILL)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d00c      	beq.n	80018bc <solve+0x54>
//					solver(FLOODFILL);
//				}
//				move(1 + extra_moves);
			}
			else
				move(180);
 80018a2:	20b4      	movs	r0, #180	@ 0xb4
 80018a4:	f7ff fdc6 	bl	8001434 <move>
			break;
 80018a8:	e008      	b.n	80018bc <solve+0x54>
		case LEFT:
//			displayFace(goodright);
//			move(0);
			turn(-90);
 80018aa:	f06f 0059 	mvn.w	r0, #89	@ 0x59
 80018ae:	f7ff fddc 	bl	800146a <turn>
			break;
 80018b2:	e004      	b.n	80018be <solve+0x56>
		case RIGHT:
//			displayFace(goodleft);
//			move(0);
			turn(90);
 80018b4:	205a      	movs	r0, #90	@ 0x5a
 80018b6:	f7ff fdd8 	bl	800146a <turn>
			break;
 80018ba:	e000      	b.n	80018be <solve+0x56>
			break;
 80018bc:	bf00      	nop
		case IDLE:
			break;
	}
	if (ir_front_left > 1200 && ir_front_right > 1200) {
 80018be:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <solve+0x8c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	490d      	ldr	r1, [pc, #52]	@ (80018f8 <solve+0x90>)
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fbef 	bl	80010a8 <__aeabi_fcmpgt>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d100      	bne.n	80018d2 <solve+0x6a>
		frontCorrection();
	}
}
 80018d0:	e00b      	b.n	80018ea <solve+0x82>
	if (ir_front_left > 1200 && ir_front_right > 1200) {
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <solve+0x94>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4908      	ldr	r1, [pc, #32]	@ (80018f8 <solve+0x90>)
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff fbe5 	bl	80010a8 <__aeabi_fcmpgt>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d100      	bne.n	80018e6 <solve+0x7e>
}
 80018e4:	e001      	b.n	80018ea <solve+0x82>
		frontCorrection();
 80018e6:	f7ff fddb 	bl	80014a0 <frontCorrection>
}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002fc 	.word	0x200002fc
 80018f8:	44960000 	.word	0x44960000
 80018fc:	20000300 	.word	0x20000300

08001900 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001904:	f002 f97a 	bl	8003bfc <HAL_Init>
  /* USER CODE BEGIN Init */
//  Delay_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001908:	f000 f8b4 	bl	8001a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800190c:	f000 fb72 	bl	8001ff4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001910:	f000 fb50 	bl	8001fb4 <MX_DMA_Init>
  MX_ADC1_Init();
 8001914:	f000 f8f6 	bl	8001b04 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001918:	f000 f99e 	bl	8001c58 <MX_TIM1_Init>
  MX_TIM3_Init();
 800191c:	f000 fa44 	bl	8001da8 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001920:	f000 facc 	bl	8001ebc <MX_TIM8_Init>
  MX_TIM7_Init();
 8001924:	f000 fa94 	bl	8001e50 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001928:	f000 f968 	bl	8001bfc <MX_I2C1_Init>
  MX_TIM10_Init();
 800192c:	f000 fb1e 	bl	8001f6c <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Encoder Timers
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001930:	213c      	movs	r1, #60	@ 0x3c
 8001932:	483f      	ldr	r0, [pc, #252]	@ (8001a30 <main+0x130>)
 8001934:	f005 fc5a 	bl	80071ec <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001938:	213c      	movs	r1, #60	@ 0x3c
 800193a:	483e      	ldr	r0, [pc, #248]	@ (8001a34 <main+0x134>)
 800193c:	f005 fc56 	bl	80071ec <HAL_TIM_Encoder_Start>

  // Motor Timers
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001940:	2100      	movs	r1, #0
 8001942:	483d      	ldr	r0, [pc, #244]	@ (8001a38 <main+0x138>)
 8001944:	f005 fae4 	bl	8006f10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001948:	2104      	movs	r1, #4
 800194a:	483b      	ldr	r0, [pc, #236]	@ (8001a38 <main+0x138>)
 800194c:	f005 fae0 	bl	8006f10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001950:	2108      	movs	r1, #8
 8001952:	4839      	ldr	r0, [pc, #228]	@ (8001a38 <main+0x138>)
 8001954:	f005 fadc 	bl	8006f10 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001958:	210c      	movs	r1, #12
 800195a:	4837      	ldr	r0, [pc, #220]	@ (8001a38 <main+0x138>)
 800195c:	f005 fad8 	bl	8006f10 <HAL_TIM_PWM_Start>

  // Delay us timer (MUST START BEFORE INTERRUPT TIMER)
  HAL_TIM_Base_Start(&htim10);
 8001960:	4836      	ldr	r0, [pc, #216]	@ (8001a3c <main+0x13c>)
 8001962:	f005 f9b1 	bl	8006cc8 <HAL_TIM_Base_Start>

  // Interrupt Timer
  HAL_TIM_Base_Start_IT(&htim7);
 8001966:	4836      	ldr	r0, [pc, #216]	@ (8001a40 <main+0x140>)
 8001968:	f005 fa14 	bl	8006d94 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, IR_SAMPLES * 4);
 800196c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001970:	4934      	ldr	r1, [pc, #208]	@ (8001a44 <main+0x144>)
 8001972:	4835      	ldr	r0, [pc, #212]	@ (8001a48 <main+0x148>)
 8001974:	f002 f9f4 	bl	8003d60 <HAL_ADC_Start_DMA>

  HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001978:	2201      	movs	r2, #1
 800197a:	2180      	movs	r1, #128	@ 0x80
 800197c:	4833      	ldr	r0, [pc, #204]	@ (8001a4c <main+0x14c>)
 800197e:	f003 fbb6 	bl	80050ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 8001982:	2201      	movs	r2, #1
 8001984:	2110      	movs	r1, #16
 8001986:	4831      	ldr	r0, [pc, #196]	@ (8001a4c <main+0x14c>)
 8001988:	f003 fbb1 	bl	80050ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 800198c:	2201      	movs	r2, #1
 800198e:	2104      	movs	r1, #4
 8001990:	482e      	ldr	r0, [pc, #184]	@ (8001a4c <main+0x14c>)
 8001992:	f003 fbac 	bl	80050ee <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800199c:	482c      	ldr	r0, [pc, #176]	@ (8001a50 <main+0x150>)
 800199e:	f003 fba6 	bl	80050ee <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	B1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80019a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80019a6:	482a      	ldr	r0, [pc, #168]	@ (8001a50 <main+0x150>)
 80019a8:	f003 fb8a 	bl	80050c0 <HAL_GPIO_ReadPin>
 80019ac:	4603      	mov	r3, r0
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <main+0x154>)
 80019b2:	701a      	strb	r2, [r3, #0]
	B2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 80019b4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019b8:	4825      	ldr	r0, [pc, #148]	@ (8001a50 <main+0x150>)
 80019ba:	f003 fb81 	bl	80050c0 <HAL_GPIO_ReadPin>
 80019be:	4603      	mov	r3, r0
 80019c0:	461a      	mov	r2, r3
 80019c2:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <main+0x158>)
 80019c4:	701a      	strb	r2, [r3, #0]


	if (B1 == GPIO_PIN_SET) {
 80019c6:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <main+0x154>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d125      	bne.n	8001a1a <main+0x11a>
		gyroInit();
 80019ce:	f7ff fdbb 	bl	8001548 <gyroInit>
		gyro_inited = 1;
 80019d2:	4b22      	ldr	r3, [pc, #136]	@ (8001a5c <main+0x15c>)
 80019d4:	2201      	movs	r2, #1
 80019d6:	701a      	strb	r2, [r3, #0]
		setIRGoals(ir_front_left, ir_front_right, ir_left, ir_right);
 80019d8:	4b21      	ldr	r3, [pc, #132]	@ (8001a60 <main+0x160>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff fb6d 	bl	80010bc <__aeabi_f2iz>
 80019e2:	4603      	mov	r3, r0
 80019e4:	b21c      	sxth	r4, r3
 80019e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a64 <main+0x164>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fb66 	bl	80010bc <__aeabi_f2iz>
 80019f0:	4603      	mov	r3, r0
 80019f2:	b21d      	sxth	r5, r3
 80019f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <main+0x168>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fb5f 	bl	80010bc <__aeabi_f2iz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	b21e      	sxth	r6, r3
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <main+0x16c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fb58 	bl	80010bc <__aeabi_f2iz>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	4632      	mov	r2, r6
 8001a12:	4629      	mov	r1, r5
 8001a14:	4620      	mov	r0, r4
 8001a16:	f000 fd2f 	bl	8002478 <setIRGoals>
	}

	if (B2 == GPIO_PIN_SET) {
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8001a58 <main+0x158>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d1bf      	bne.n	80019a2 <main+0xa2>
		solve(DEAD);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff ff20 	bl	8001868 <solve>
		start = 1;
 8001a28:	4b11      	ldr	r3, [pc, #68]	@ (8001a70 <main+0x170>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
	B1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001a2e:	e7b8      	b.n	80019a2 <main+0xa2>
 8001a30:	200001d0 	.word	0x200001d0
 8001a34:	20000260 	.word	0x20000260
 8001a38:	20000188 	.word	0x20000188
 8001a3c:	200002a8 	.word	0x200002a8
 8001a40:	20000218 	.word	0x20000218
 8001a44:	20000308 	.word	0x20000308
 8001a48:	2000008c 	.word	0x2000008c
 8001a4c:	40020000 	.word	0x40020000
 8001a50:	40020400 	.word	0x40020400
 8001a54:	200002f0 	.word	0x200002f0
 8001a58:	200002f1 	.word	0x200002f1
 8001a5c:	20001308 	.word	0x20001308
 8001a60:	200002fc 	.word	0x200002fc
 8001a64:	20000300 	.word	0x20000300
 8001a68:	200002f8 	.word	0x200002f8
 8001a6c:	20000304 	.word	0x20000304
 8001a70:	20001309 	.word	0x20001309

08001a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b092      	sub	sp, #72	@ 0x48
 8001a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a7a:	f107 0318 	add.w	r3, r7, #24
 8001a7e:	2230      	movs	r2, #48	@ 0x30
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f006 fa36 	bl	8007ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a96:	2302      	movs	r3, #2
 8001a98:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a9e:	2310      	movs	r3, #16
 8001aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001aaa:	230d      	movs	r3, #13
 8001aac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8001aae:	23c3      	movs	r3, #195	@ 0xc3
 8001ab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ab6:	2304      	movs	r3, #4
 8001ab8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aba:	f107 0318 	add.w	r3, r7, #24
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f004 fc80 	bl	80063c4 <HAL_RCC_OscConfig>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001aca:	f000 fbdb 	bl	8002284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ace:	230f      	movs	r3, #15
 8001ad0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ada:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ade:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ae6:	1d3b      	adds	r3, r7, #4
 8001ae8:	2103      	movs	r1, #3
 8001aea:	4618      	mov	r0, r3
 8001aec:	f004 febe 	bl	800686c <HAL_RCC_ClockConfig>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001af6:	f000 fbc5 	bl	8002284 <Error_Handler>
  }
}
 8001afa:	bf00      	nop
 8001afc:	3748      	adds	r7, #72	@ 0x48
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001b16:	4b36      	ldr	r3, [pc, #216]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b18:	4a36      	ldr	r2, [pc, #216]	@ (8001bf4 <MX_ADC1_Init+0xf0>)
 8001b1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001b1c:	4b34      	ldr	r3, [pc, #208]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b1e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001b22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b24:	4b32      	ldr	r3, [pc, #200]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b2a:	4b31      	ldr	r3, [pc, #196]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b30:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b36:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b44:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b46:	4a2c      	ldr	r2, [pc, #176]	@ (8001bf8 <MX_ADC1_Init+0xf4>)
 8001b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b4a:	4b29      	ldr	r3, [pc, #164]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001b50:	4b27      	ldr	r3, [pc, #156]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b52:	2204      	movs	r2, #4
 8001b54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b56:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b64:	4822      	ldr	r0, [pc, #136]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b66:	f002 f8b7 	bl	8003cd8 <HAL_ADC_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b70:	f000 fb88 	bl	8002284 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001b74:	2305      	movs	r3, #5
 8001b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b80:	463b      	mov	r3, r7
 8001b82:	4619      	mov	r1, r3
 8001b84:	481a      	ldr	r0, [pc, #104]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001b86:	f002 f9db 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b90:	f000 fb78 	bl	8002284 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001b94:	2306      	movs	r3, #6
 8001b96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4813      	ldr	r0, [pc, #76]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001ba2:	f002 f9cd 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001bac:	f000 fb6a 	bl	8002284 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001bb0:	230a      	movs	r3, #10
 8001bb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb8:	463b      	mov	r3, r7
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001bbe:	f002 f9bf 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001bc8:	f000 fb5c 	bl	8002284 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001bcc:	230b      	movs	r3, #11
 8001bce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	@ (8001bf0 <MX_ADC1_Init+0xec>)
 8001bda:	f002 f9b1 	bl	8003f40 <HAL_ADC_ConfigChannel>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001be4:	f000 fb4e 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	2000008c 	.word	0x2000008c
 8001bf4:	40012000 	.word	0x40012000
 8001bf8:	0f000001 	.word	0x0f000001

08001bfc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <MX_I2C1_Init+0x50>)
 8001c02:	4a13      	ldr	r2, [pc, #76]	@ (8001c50 <MX_I2C1_Init+0x54>)
 8001c04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <MX_I2C1_Init+0x50>)
 8001c08:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <MX_I2C1_Init+0x58>)
 8001c0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <MX_I2C1_Init+0x50>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <MX_I2C1_Init+0x50>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <MX_I2C1_Init+0x50>)
 8001c1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c20:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <MX_I2C1_Init+0x50>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <MX_I2C1_Init+0x50>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c2c:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <MX_I2C1_Init+0x50>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <MX_I2C1_Init+0x50>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c38:	4804      	ldr	r0, [pc, #16]	@ (8001c4c <MX_I2C1_Init+0x50>)
 8001c3a:	f003 fa71 	bl	8005120 <HAL_I2C_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c44:	f000 fb1e 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000134 	.word	0x20000134
 8001c50:	40005400 	.word	0x40005400
 8001c54:	00061a80 	.word	0x00061a80

08001c58 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b092      	sub	sp, #72	@ 0x48
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c5e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	609a      	str	r2, [r3, #8]
 8001c74:	60da      	str	r2, [r3, #12]
 8001c76:	611a      	str	r2, [r3, #16]
 8001c78:	615a      	str	r2, [r3, #20]
 8001c7a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2220      	movs	r2, #32
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f006 f936 	bl	8007ef4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c88:	4b45      	ldr	r3, [pc, #276]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001c8a:	4a46      	ldr	r2, [pc, #280]	@ (8001da4 <MX_TIM1_Init+0x14c>)
 8001c8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c8e:	4b44      	ldr	r3, [pc, #272]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c94:	4b42      	ldr	r3, [pc, #264]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 8001c9a:	4b41      	ldr	r3, [pc, #260]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001c9c:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ca8:	4b3d      	ldr	r3, [pc, #244]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	4b3c      	ldr	r3, [pc, #240]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001cb4:	483a      	ldr	r0, [pc, #232]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001cb6:	f005 f8db 	bl	8006e70 <HAL_TIM_PWM_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001cc0:	f000 fae0 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ccc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4833      	ldr	r0, [pc, #204]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001cd4:	f005 ff72 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001cde:	f000 fad1 	bl	8002284 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce2:	2360      	movs	r3, #96	@ 0x60
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	4826      	ldr	r0, [pc, #152]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001d08:	f005 fbee 	bl	80074e8 <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001d12:	f000 fab7 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4820      	ldr	r0, [pc, #128]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001d20:	f005 fbe2 	bl	80074e8 <HAL_TIM_PWM_ConfigChannel>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001d2a:	f000 faab 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d32:	2208      	movs	r2, #8
 8001d34:	4619      	mov	r1, r3
 8001d36:	481a      	ldr	r0, [pc, #104]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001d38:	f005 fbd6 	bl	80074e8 <HAL_TIM_PWM_ConfigChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001d42:	f000 fa9f 	bl	8002284 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4814      	ldr	r0, [pc, #80]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001d50:	f005 fbca 	bl	80074e8 <HAL_TIM_PWM_ConfigChannel>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001d5a:	f000 fa93 	bl	8002284 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d76:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4807      	ldr	r0, [pc, #28]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001d82:	f005 ff95 	bl	8007cb0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001d8c:	f000 fa7a 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d90:	4803      	ldr	r0, [pc, #12]	@ (8001da0 <MX_TIM1_Init+0x148>)
 8001d92:	f001 fdb9 	bl	8003908 <HAL_TIM_MspPostInit>

}
 8001d96:	bf00      	nop
 8001d98:	3748      	adds	r7, #72	@ 0x48
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000188 	.word	0x20000188
 8001da4:	40010000 	.word	0x40010000

08001da8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b08c      	sub	sp, #48	@ 0x30
 8001dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	2224      	movs	r2, #36	@ 0x24
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f006 f89c 	bl	8007ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dc4:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <MX_TIM3_Init+0xa0>)
 8001dc6:	4a21      	ldr	r2, [pc, #132]	@ (8001e4c <MX_TIM3_Init+0xa4>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dca:	4b1f      	ldr	r3, [pc, #124]	@ (8001e48 <MX_TIM3_Init+0xa0>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	@ (8001e48 <MX_TIM3_Init+0xa0>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <MX_TIM3_Init+0xa0>)
 8001dd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ddc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	@ (8001e48 <MX_TIM3_Init+0xa0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b18      	ldr	r3, [pc, #96]	@ (8001e48 <MX_TIM3_Init+0xa0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001dea:	2303      	movs	r3, #3
 8001dec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001df2:	2301      	movs	r3, #1
 8001df4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e02:	2301      	movs	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001e0e:	f107 030c 	add.w	r3, r7, #12
 8001e12:	4619      	mov	r1, r3
 8001e14:	480c      	ldr	r0, [pc, #48]	@ (8001e48 <MX_TIM3_Init+0xa0>)
 8001e16:	f005 f943 	bl	80070a0 <HAL_TIM_Encoder_Init>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001e20:	f000 fa30 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <MX_TIM3_Init+0xa0>)
 8001e32:	f005 fec3 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001e3c:	f000 fa22 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	3730      	adds	r7, #48	@ 0x30
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200001d0 	.word	0x200001d0
 8001e4c:	40000400 	.word	0x40000400

08001e50 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e56:	463b      	mov	r3, r7
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <MX_TIM7_Init+0x64>)
 8001e60:	4a15      	ldr	r2, [pc, #84]	@ (8001eb8 <MX_TIM7_Init+0x68>)
 8001e62:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 59;
 8001e64:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <MX_TIM7_Init+0x64>)
 8001e66:	223b      	movs	r2, #59	@ 0x3b
 8001e68:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e6a:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <MX_TIM7_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001e70:	4b10      	ldr	r3, [pc, #64]	@ (8001eb4 <MX_TIM7_Init+0x64>)
 8001e72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e76:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e78:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <MX_TIM7_Init+0x64>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e7e:	480d      	ldr	r0, [pc, #52]	@ (8001eb4 <MX_TIM7_Init+0x64>)
 8001e80:	f004 fed2 	bl	8006c28 <HAL_TIM_Base_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001e8a:	f000 f9fb 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e96:	463b      	mov	r3, r7
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4806      	ldr	r0, [pc, #24]	@ (8001eb4 <MX_TIM7_Init+0x64>)
 8001e9c:	f005 fe8e 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001ea6:	f000 f9ed 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000218 	.word	0x20000218
 8001eb8:	40001400 	.word	0x40001400

08001ebc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	@ 0x30
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	2224      	movs	r2, #36	@ 0x24
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f006 f812 	bl	8007ef4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ed8:	4b22      	ldr	r3, [pc, #136]	@ (8001f64 <MX_TIM8_Init+0xa8>)
 8001eda:	4a23      	ldr	r2, [pc, #140]	@ (8001f68 <MX_TIM8_Init+0xac>)
 8001edc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001ede:	4b21      	ldr	r3, [pc, #132]	@ (8001f64 <MX_TIM8_Init+0xa8>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f64 <MX_TIM8_Init+0xa8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001eea:	4b1e      	ldr	r3, [pc, #120]	@ (8001f64 <MX_TIM8_Init+0xa8>)
 8001eec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ef0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f64 <MX_TIM8_Init+0xa8>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f64 <MX_TIM8_Init+0xa8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efe:	4b19      	ldr	r3, [pc, #100]	@ (8001f64 <MX_TIM8_Init+0xa8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001f04:	2303      	movs	r3, #3
 8001f06:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480d      	ldr	r0, [pc, #52]	@ (8001f64 <MX_TIM8_Init+0xa8>)
 8001f30:	f005 f8b6 	bl	80070a0 <HAL_TIM_Encoder_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001f3a:	f000 f9a3 	bl	8002284 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4806      	ldr	r0, [pc, #24]	@ (8001f64 <MX_TIM8_Init+0xa8>)
 8001f4c:	f005 fe36 	bl	8007bbc <HAL_TIMEx_MasterConfigSynchronization>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001f56:	f000 f995 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	3730      	adds	r7, #48	@ 0x30
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000260 	.word	0x20000260
 8001f68:	40010400 	.word	0x40010400

08001f6c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001f70:	4b0e      	ldr	r3, [pc, #56]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f72:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb0 <MX_TIM10_Init+0x44>)
 8001f74:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001f76:	4b0d      	ldr	r3, [pc, #52]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f88:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f90:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	@ (8001fac <MX_TIM10_Init+0x40>)
 8001f98:	f004 fe46 	bl	8006c28 <HAL_TIM_Base_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001fa2:	f000 f96f 	bl	8002284 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200002a8 	.word	0x200002a8
 8001fb0:	40014400 	.word	0x40014400

08001fb4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	607b      	str	r3, [r7, #4]
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <MX_DMA_Init+0x3c>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a0b      	ldr	r2, [pc, #44]	@ (8001ff0 <MX_DMA_Init+0x3c>)
 8001fc4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b09      	ldr	r3, [pc, #36]	@ (8001ff0 <MX_DMA_Init+0x3c>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2038      	movs	r0, #56	@ 0x38
 8001fdc:	f002 fb2f 	bl	800463e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001fe0:	2038      	movs	r0, #56	@ 0x38
 8001fe2:	f002 fb48 	bl	8004676 <HAL_NVIC_EnableIRQ>

}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800

08001ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08a      	sub	sp, #40	@ 0x28
 8001ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	4b52      	ldr	r3, [pc, #328]	@ (8002158 <MX_GPIO_Init+0x164>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002012:	4a51      	ldr	r2, [pc, #324]	@ (8002158 <MX_GPIO_Init+0x164>)
 8002014:	f043 0304 	orr.w	r3, r3, #4
 8002018:	6313      	str	r3, [r2, #48]	@ 0x30
 800201a:	4b4f      	ldr	r3, [pc, #316]	@ (8002158 <MX_GPIO_Init+0x164>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	f003 0304 	and.w	r3, r3, #4
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b4b      	ldr	r3, [pc, #300]	@ (8002158 <MX_GPIO_Init+0x164>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	4a4a      	ldr	r2, [pc, #296]	@ (8002158 <MX_GPIO_Init+0x164>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6313      	str	r3, [r2, #48]	@ 0x30
 8002036:	4b48      	ldr	r3, [pc, #288]	@ (8002158 <MX_GPIO_Init+0x164>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	60bb      	str	r3, [r7, #8]
 8002046:	4b44      	ldr	r3, [pc, #272]	@ (8002158 <MX_GPIO_Init+0x164>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	4a43      	ldr	r2, [pc, #268]	@ (8002158 <MX_GPIO_Init+0x164>)
 800204c:	f043 0302 	orr.w	r3, r3, #2
 8002050:	6313      	str	r3, [r2, #48]	@ 0x30
 8002052:	4b41      	ldr	r3, [pc, #260]	@ (8002158 <MX_GPIO_Init+0x164>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800205e:	2300      	movs	r3, #0
 8002060:	607b      	str	r3, [r7, #4]
 8002062:	4b3d      	ldr	r3, [pc, #244]	@ (8002158 <MX_GPIO_Init+0x164>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002066:	4a3c      	ldr	r2, [pc, #240]	@ (8002158 <MX_GPIO_Init+0x164>)
 8002068:	f043 0308 	orr.w	r3, r3, #8
 800206c:	6313      	str	r3, [r2, #48]	@ 0x30
 800206e:	4b3a      	ldr	r3, [pc, #232]	@ (8002158 <MX_GPIO_Init+0x164>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	f003 0308 	and.w	r3, r3, #8
 8002076:	607b      	str	r3, [r7, #4]
 8002078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 800207a:	2200      	movs	r2, #0
 800207c:	2194      	movs	r1, #148	@ 0x94
 800207e:	4837      	ldr	r0, [pc, #220]	@ (800215c <MX_GPIO_Init+0x168>)
 8002080:	f003 f835 	bl	80050ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800208a:	4835      	ldr	r0, [pc, #212]	@ (8002160 <MX_GPIO_Init+0x16c>)
 800208c:	f003 f82f 	bl	80050ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 8002090:	2394      	movs	r3, #148	@ 0x94
 8002092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002094:	2301      	movs	r3, #1
 8002096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209c:	2300      	movs	r3, #0
 800209e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	482d      	ldr	r0, [pc, #180]	@ (800215c <MX_GPIO_Init+0x168>)
 80020a8:	f002 fe6c 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80020ac:	2308      	movs	r3, #8
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020bc:	2301      	movs	r3, #1
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	4825      	ldr	r0, [pc, #148]	@ (800215c <MX_GPIO_Init+0x168>)
 80020c8:	f002 fe5c 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button1_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin;
 80020cc:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80020d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020da:	f107 0314 	add.w	r3, r7, #20
 80020de:	4619      	mov	r1, r3
 80020e0:	481f      	ldr	r0, [pc, #124]	@ (8002160 <MX_GPIO_Init+0x16c>)
 80020e2:	f002 fe4f 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch3_Pin */
  GPIO_InitStruct.Pin = Switch3_Pin;
 80020e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch3_GPIO_Port, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	4818      	ldr	r0, [pc, #96]	@ (800215c <MX_GPIO_Init+0x168>)
 80020fc:	f002 fe42 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch1_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin;
 8002100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch1_GPIO_Port, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	4813      	ldr	r0, [pc, #76]	@ (8002164 <MX_GPIO_Init+0x170>)
 8002116:	f002 fe35 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 800211a:	2304      	movs	r3, #4
 800211c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800211e:	2300      	movs	r3, #0
 8002120:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002122:	2300      	movs	r3, #0
 8002124:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	480e      	ldr	r0, [pc, #56]	@ (8002168 <MX_GPIO_Init+0x174>)
 800212e:	f002 fe29 	bl	8004d84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8002132:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002138:	2301      	movs	r3, #1
 800213a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4619      	mov	r1, r3
 800214a:	4805      	ldr	r0, [pc, #20]	@ (8002160 <MX_GPIO_Init+0x16c>)
 800214c:	f002 fe1a 	bl	8004d84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002150:	bf00      	nop
 8002152:	3728      	adds	r7, #40	@ 0x28
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40023800 	.word	0x40023800
 800215c:	40020000 	.word	0x40020000
 8002160:	40020400 	.word	0x40020400
 8002164:	40020800 	.word	0x40020800
 8002168:	40020c00 	.word	0x40020c00

0800216c <Get_I2C1_Ptr>:
{
	return &hadc1;
}

I2C_HandleTypeDef* Get_I2C1_Ptr(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
	return &hi2c1;
 8002170:	4b02      	ldr	r3, [pc, #8]	@ (800217c <Get_I2C1_Ptr+0x10>)
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	bc80      	pop	{r7}
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000134 	.word	0x20000134

08002180 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

	temp_left = 0;
 8002188:	4b34      	ldr	r3, [pc, #208]	@ (800225c <HAL_ADC_ConvCpltCallback+0xdc>)
 800218a:	2200      	movs	r2, #0
 800218c:	601a      	str	r2, [r3, #0]
	temp_front_left = 0;
 800218e:	4b34      	ldr	r3, [pc, #208]	@ (8002260 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
	temp_front_right = 0;
 8002194:	4b33      	ldr	r3, [pc, #204]	@ (8002264 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
	temp_ir_right = 0;
 800219a:	4b33      	ldr	r3, [pc, #204]	@ (8002268 <HAL_ADC_ConvCpltCallback+0xe8>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < IR_SAMPLES * 4; i = i + 4) {
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	e029      	b.n	80021fa <HAL_ADC_ConvCpltCallback+0x7a>
    	temp_left += adc_buf[i];
 80021a6:	4a31      	ldr	r2, [pc, #196]	@ (800226c <HAL_ADC_ConvCpltCallback+0xec>)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021ae:	4b2b      	ldr	r3, [pc, #172]	@ (800225c <HAL_ADC_ConvCpltCallback+0xdc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a29      	ldr	r2, [pc, #164]	@ (800225c <HAL_ADC_ConvCpltCallback+0xdc>)
 80021b6:	6013      	str	r3, [r2, #0]
    	temp_front_left += adc_buf[i+1];
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	3301      	adds	r3, #1
 80021bc:	4a2b      	ldr	r2, [pc, #172]	@ (800226c <HAL_ADC_ConvCpltCallback+0xec>)
 80021be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021c2:	4b27      	ldr	r3, [pc, #156]	@ (8002260 <HAL_ADC_ConvCpltCallback+0xe0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a25      	ldr	r2, [pc, #148]	@ (8002260 <HAL_ADC_ConvCpltCallback+0xe0>)
 80021ca:	6013      	str	r3, [r2, #0]
    	temp_front_right += adc_buf[i+2];
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	3302      	adds	r3, #2
 80021d0:	4a26      	ldr	r2, [pc, #152]	@ (800226c <HAL_ADC_ConvCpltCallback+0xec>)
 80021d2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021d6:	4b23      	ldr	r3, [pc, #140]	@ (8002264 <HAL_ADC_ConvCpltCallback+0xe4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4413      	add	r3, r2
 80021dc:	4a21      	ldr	r2, [pc, #132]	@ (8002264 <HAL_ADC_ConvCpltCallback+0xe4>)
 80021de:	6013      	str	r3, [r2, #0]
    	temp_ir_right += adc_buf[i+3];
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3303      	adds	r3, #3
 80021e4:	4a21      	ldr	r2, [pc, #132]	@ (800226c <HAL_ADC_ConvCpltCallback+0xec>)
 80021e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80021ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <HAL_ADC_ConvCpltCallback+0xe8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a1d      	ldr	r2, [pc, #116]	@ (8002268 <HAL_ADC_ConvCpltCallback+0xe8>)
 80021f2:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < IR_SAMPLES * 4; i = i + 4) {
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	3304      	adds	r3, #4
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002200:	dbd1      	blt.n	80021a6 <HAL_ADC_ConvCpltCallback+0x26>
    }

    ir_left = temp_left / IR_SAMPLES;
 8002202:	4b16      	ldr	r3, [pc, #88]	@ (800225c <HAL_ADC_ConvCpltCallback+0xdc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe fd39 	bl	8000c80 <__aeabi_ui2f>
 800220e:	4603      	mov	r3, r0
 8002210:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002212:	6013      	str	r3, [r2, #0]
    ir_front_left = temp_front_left / IR_SAMPLES;
 8002214:	4b12      	ldr	r3, [pc, #72]	@ (8002260 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0a1b      	lsrs	r3, r3, #8
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe fd30 	bl	8000c80 <__aeabi_ui2f>
 8002220:	4603      	mov	r3, r0
 8002222:	4a14      	ldr	r2, [pc, #80]	@ (8002274 <HAL_ADC_ConvCpltCallback+0xf4>)
 8002224:	6013      	str	r3, [r2, #0]
    ir_front_right = temp_front_right / IR_SAMPLES;
 8002226:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0a1b      	lsrs	r3, r3, #8
 800222c:	4618      	mov	r0, r3
 800222e:	f7fe fd27 	bl	8000c80 <__aeabi_ui2f>
 8002232:	4603      	mov	r3, r0
 8002234:	4a10      	ldr	r2, [pc, #64]	@ (8002278 <HAL_ADC_ConvCpltCallback+0xf8>)
 8002236:	6013      	str	r3, [r2, #0]
    ir_right = temp_ir_right / IR_SAMPLES;
 8002238:	4b0b      	ldr	r3, [pc, #44]	@ (8002268 <HAL_ADC_ConvCpltCallback+0xe8>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe fd1e 	bl	8000c80 <__aeabi_ui2f>
 8002244:	4603      	mov	r3, r0
 8002246:	4a0d      	ldr	r2, [pc, #52]	@ (800227c <HAL_ADC_ConvCpltCallback+0xfc>)
 8002248:	6013      	str	r3, [r2, #0]

    temp_adc++;
 800224a:	4b0d      	ldr	r3, [pc, #52]	@ (8002280 <HAL_ADC_ConvCpltCallback+0x100>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	4a0b      	ldr	r2, [pc, #44]	@ (8002280 <HAL_ADC_ConvCpltCallback+0x100>)
 8002252:	6013      	str	r3, [r2, #0]

}
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	20001314 	.word	0x20001314
 8002260:	20001318 	.word	0x20001318
 8002264:	2000131c 	.word	0x2000131c
 8002268:	20001320 	.word	0x20001320
 800226c:	20000308 	.word	0x20000308
 8002270:	200002f8 	.word	0x200002f8
 8002274:	200002fc 	.word	0x200002fc
 8002278:	20000300 	.word	0x20000300
 800227c:	20000304 	.word	0x20000304
 8002280:	20001310 	.word	0x20001310

08002284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002288:	b672      	cpsid	i
}
 800228a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800228c:	bf00      	nop
 800228e:	e7fd      	b.n	800228c <Error_Handler+0x8>

08002290 <limitPWM>:
//#include "pid.h"
//
//extern float velocity_left;
//extern float velocity_right;

float limitPWM(float pwm) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7fe f8f9 	bl	8000490 <__aeabi_f2d>
 800229e:	a30e      	add	r3, pc, #56	@ (adr r3, 80022d8 <limitPWM+0x48>)
 80022a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a4:	f7fe fbdc 	bl	8000a60 <__aeabi_dcmpgt>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <limitPWM+0x22>
		return PWM_MAX;
 80022ae:	4b0e      	ldr	r3, [pc, #56]	@ (80022e8 <limitPWM+0x58>)
 80022b0:	e00d      	b.n	80022ce <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7fe f8ec 	bl	8000490 <__aeabi_f2d>
 80022b8:	a309      	add	r3, pc, #36	@ (adr r3, 80022e0 <limitPWM+0x50>)
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	f7fe fbb1 	bl	8000a24 <__aeabi_dcmplt>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <limitPWM+0x3c>
		return -PWM_MAX;
 80022c8:	4b08      	ldr	r3, [pc, #32]	@ (80022ec <limitPWM+0x5c>)
 80022ca:	e000      	b.n	80022ce <limitPWM+0x3e>
	else
		return pwm;
 80022cc:	687b      	ldr	r3, [r7, #4]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	66666666 	.word	0x66666666
 80022dc:	3fee6666 	.word	0x3fee6666
 80022e0:	66666666 	.word	0x66666666
 80022e4:	bfee6666 	.word	0xbfee6666
 80022e8:	3f733333 	.word	0x3f733333
 80022ec:	bf733333 	.word	0xbf733333

080022f0 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 80022f0:	b590      	push	{r4, r7, lr}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 80022f8:	f04f 0100 	mov.w	r1, #0
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7fe fec9 	bl	8001094 <__aeabi_fcmpge>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d012      	beq.n	800232e <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8002308:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <setMotorLPWM+0x70>)
 800230a:	2200      	movs	r2, #0
 800230c:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ffbe 	bl	8002290 <limitPWM>
 8002314:	4603      	mov	r3, r0
 8002316:	4913      	ldr	r1, [pc, #76]	@ (8002364 <setMotorLPWM+0x74>)
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe fd09 	bl	8000d30 <__aeabi_fmul>
 800231e:	4603      	mov	r3, r0
 8002320:	4c0f      	ldr	r4, [pc, #60]	@ (8002360 <setMotorLPWM+0x70>)
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe fef0 	bl	8001108 <__aeabi_f2uiz>
 8002328:	4603      	mov	r3, r0
 800232a:	63a3      	str	r3, [r4, #56]	@ 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 800232c:	e013      	b.n	8002356 <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 800232e:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <setMotorLPWM+0x70>)
 8002330:	2200      	movs	r2, #0
 8002332:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff ffab 	bl	8002290 <limitPWM>
 800233a:	4603      	mov	r3, r0
 800233c:	4909      	ldr	r1, [pc, #36]	@ (8002364 <setMotorLPWM+0x74>)
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fcf6 	bl	8000d30 <__aeabi_fmul>
 8002344:	4603      	mov	r3, r0
 8002346:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800234a:	4c05      	ldr	r4, [pc, #20]	@ (8002360 <setMotorLPWM+0x70>)
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe fedb 	bl	8001108 <__aeabi_f2uiz>
 8002352:	4603      	mov	r3, r0
 8002354:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	bd90      	pop	{r4, r7, pc}
 800235e:	bf00      	nop
 8002360:	40010000 	.word	0x40010000
 8002364:	4547f000 	.word	0x4547f000

08002368 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 8002368:	b590      	push	{r4, r7, lr}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002370:	f04f 0100 	mov.w	r1, #0
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7fe fe8d 	bl	8001094 <__aeabi_fcmpge>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d012      	beq.n	80023a6 <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 8002380:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <setMotorRPWM+0x70>)
 8002382:	2200      	movs	r2, #0
 8002384:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ff82 	bl	8002290 <limitPWM>
 800238c:	4603      	mov	r3, r0
 800238e:	4913      	ldr	r1, [pc, #76]	@ (80023dc <setMotorRPWM+0x74>)
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fccd 	bl	8000d30 <__aeabi_fmul>
 8002396:	4603      	mov	r3, r0
 8002398:	4c0f      	ldr	r4, [pc, #60]	@ (80023d8 <setMotorRPWM+0x70>)
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe feb4 	bl	8001108 <__aeabi_f2uiz>
 80023a0:	4603      	mov	r3, r0
 80023a2:	63e3      	str	r3, [r4, #60]	@ 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 80023a4:	e013      	b.n	80023ce <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 80023a6:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <setMotorRPWM+0x70>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f7ff ff6f 	bl	8002290 <limitPWM>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4909      	ldr	r1, [pc, #36]	@ (80023dc <setMotorRPWM+0x74>)
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe fcba 	bl	8000d30 <__aeabi_fmul>
 80023bc:	4603      	mov	r3, r0
 80023be:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80023c2:	4c05      	ldr	r4, [pc, #20]	@ (80023d8 <setMotorRPWM+0x70>)
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fe9f 	bl	8001108 <__aeabi_f2uiz>
 80023ca:	4603      	mov	r3, r0
 80023cc:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd90      	pop	{r4, r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40010000 	.word	0x40010000
 80023dc:	4547f000 	.word	0x4547f000

080023e0 <resetMotors>:

void resetMotors() {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 80023e4:	f04f 0000 	mov.w	r0, #0
 80023e8:	f7ff ff82 	bl	80022f0 <setMotorLPWM>
	setMotorRPWM(0);
 80023ec:	f04f 0000 	mov.w	r0, #0
 80023f0:	f7ff ffba 	bl	8002368 <setMotorRPWM>
}
 80023f4:	bf00      	nop
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <setPIDGoalD>:
int goal_reached_timer = 0;

float gyro_angle = 0;
float gyro_vel = 0;

void setPIDGoalD(int16_t distance) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	4603      	mov	r3, r0
 8002400:	80fb      	strh	r3, [r7, #6]
	goal_distance = distance;
 8002402:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fc3e 	bl	8000c88 <__aeabi_i2f>
 800240c:	4603      	mov	r3, r0
 800240e:	4a03      	ldr	r2, [pc, #12]	@ (800241c <setPIDGoalD+0x24>)
 8002410:	6013      	str	r3, [r2, #0]
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	20001324 	.word	0x20001324

08002420 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	4603      	mov	r3, r0
 8002428:	80fb      	strh	r3, [r7, #6]
	goal_angle += angle;
 800242a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fc2a 	bl	8000c88 <__aeabi_i2f>
 8002434:	4602      	mov	r2, r0
 8002436:	4b07      	ldr	r3, [pc, #28]	@ (8002454 <setPIDGoalA+0x34>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	4610      	mov	r0, r2
 800243e:	f7fe fb6f 	bl	8000b20 <__addsf3>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	4b03      	ldr	r3, [pc, #12]	@ (8002454 <setPIDGoalA+0x34>)
 8002448:	601a      	str	r2, [r3, #0]
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20001328 	.word	0x20001328

08002458 <setState>:

void setState(STATE curr_state) {
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	state = curr_state;
 8002462:	4a04      	ldr	r2, [pc, #16]	@ (8002474 <setState+0x1c>)
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	7013      	strb	r3, [r2, #0]
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	200013a6 	.word	0x200013a6

08002478 <setIRGoals>:

void setIRGoals(int16_t front_left_goal, int16_t front_right_goal, int16_t left_goal, int16_t right_goal) {
 8002478:	b490      	push	{r4, r7}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4604      	mov	r4, r0
 8002480:	4608      	mov	r0, r1
 8002482:	4611      	mov	r1, r2
 8002484:	461a      	mov	r2, r3
 8002486:	4623      	mov	r3, r4
 8002488:	80fb      	strh	r3, [r7, #6]
 800248a:	4603      	mov	r3, r0
 800248c:	80bb      	strh	r3, [r7, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	807b      	strh	r3, [r7, #2]
 8002492:	4613      	mov	r3, r2
 8002494:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = left_goal - right_goal;
 8002496:	887a      	ldrh	r2, [r7, #2]
 8002498:	883b      	ldrh	r3, [r7, #0]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	b29b      	uxth	r3, r3
 800249e:	b21a      	sxth	r2, r3
 80024a0:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <setIRGoals+0x50>)
 80024a2:	801a      	strh	r2, [r3, #0]
	goal_forward_left = front_left_goal;
 80024a4:	4a09      	ldr	r2, [pc, #36]	@ (80024cc <setIRGoals+0x54>)
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	8013      	strh	r3, [r2, #0]
	goal_forward_right = front_right_goal;
 80024aa:	4a09      	ldr	r2, [pc, #36]	@ (80024d0 <setIRGoals+0x58>)
 80024ac:	88bb      	ldrh	r3, [r7, #4]
 80024ae:	8013      	strh	r3, [r2, #0]
	goal_left = left_goal;
 80024b0:	4a08      	ldr	r2, [pc, #32]	@ (80024d4 <setIRGoals+0x5c>)
 80024b2:	887b      	ldrh	r3, [r7, #2]
 80024b4:	8013      	strh	r3, [r2, #0]
	goal_right = right_goal;
 80024b6:	4a08      	ldr	r2, [pc, #32]	@ (80024d8 <setIRGoals+0x60>)
 80024b8:	883b      	ldrh	r3, [r7, #0]
 80024ba:	8013      	strh	r3, [r2, #0]

}
 80024bc:	bf00      	nop
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc90      	pop	{r4, r7}
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	2000139c 	.word	0x2000139c
 80024cc:	2000139e 	.word	0x2000139e
 80024d0:	200013a0 	.word	0x200013a0
 80024d4:	200013a2 	.word	0x200013a2
 80024d8:	200013a4 	.word	0x200013a4

080024dc <setIRAngle>:

// TODO: CHANGE TO USE WALL CHECK FUNCTIONS
void setIRAngle(float left, float right){
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]

	if (left > 600 && right > 600 && goal_angle == 0)
 80024e6:	4947      	ldr	r1, [pc, #284]	@ (8002604 <setIRAngle+0x128>)
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7fe fddd 	bl	80010a8 <__aeabi_fcmpgt>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02d      	beq.n	8002550 <setIRAngle+0x74>
 80024f4:	4943      	ldr	r1, [pc, #268]	@ (8002604 <setIRAngle+0x128>)
 80024f6:	6838      	ldr	r0, [r7, #0]
 80024f8:	f7fe fdd6 	bl	80010a8 <__aeabi_fcmpgt>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d026      	beq.n	8002550 <setIRAngle+0x74>
 8002502:	4b41      	ldr	r3, [pc, #260]	@ (8002608 <setIRAngle+0x12c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f04f 0100 	mov.w	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fda4 	bl	8001058 <__aeabi_fcmpeq>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d01c      	beq.n	8002550 <setIRAngle+0x74>
	{
		IRadjustment = (kPir * ((left - right) - IRAngleOffset));
 8002516:	6839      	ldr	r1, [r7, #0]
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7fe faff 	bl	8000b1c <__aeabi_fsub>
 800251e:	4603      	mov	r3, r0
 8002520:	461c      	mov	r4, r3
 8002522:	4b3a      	ldr	r3, [pc, #232]	@ (800260c <setIRAngle+0x130>)
 8002524:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fbad 	bl	8000c88 <__aeabi_i2f>
 800252e:	4603      	mov	r3, r0
 8002530:	4619      	mov	r1, r3
 8002532:	4620      	mov	r0, r4
 8002534:	f7fe faf2 	bl	8000b1c <__aeabi_fsub>
 8002538:	4603      	mov	r3, r0
 800253a:	461a      	mov	r2, r3
 800253c:	4b34      	ldr	r3, [pc, #208]	@ (8002610 <setIRAngle+0x134>)
 800253e:	4619      	mov	r1, r3
 8002540:	4610      	mov	r0, r2
 8002542:	f7fe fbf5 	bl	8000d30 <__aeabi_fmul>
 8002546:	4603      	mov	r3, r0
 8002548:	461a      	mov	r2, r3
 800254a:	4b32      	ldr	r3, [pc, #200]	@ (8002614 <setIRAngle+0x138>)
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e054      	b.n	80025fa <setIRAngle+0x11e>
	}
	else if (left > 600 && goal_angle == 0)
 8002550:	492c      	ldr	r1, [pc, #176]	@ (8002604 <setIRAngle+0x128>)
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f7fe fda8 	bl	80010a8 <__aeabi_fcmpgt>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d020      	beq.n	80025a0 <setIRAngle+0xc4>
 800255e:	4b2a      	ldr	r3, [pc, #168]	@ (8002608 <setIRAngle+0x12c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f04f 0100 	mov.w	r1, #0
 8002566:	4618      	mov	r0, r3
 8002568:	f7fe fd76 	bl	8001058 <__aeabi_fcmpeq>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d016      	beq.n	80025a0 <setIRAngle+0xc4>
	{
		IRadjustment = (kPir2 * (left - goal_left));
 8002572:	4b29      	ldr	r3, [pc, #164]	@ (8002618 <setIRAngle+0x13c>)
 8002574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fb85 	bl	8000c88 <__aeabi_i2f>
 800257e:	4603      	mov	r3, r0
 8002580:	4619      	mov	r1, r3
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7fe faca 	bl	8000b1c <__aeabi_fsub>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	4b23      	ldr	r3, [pc, #140]	@ (800261c <setIRAngle+0x140>)
 800258e:	4619      	mov	r1, r3
 8002590:	4610      	mov	r0, r2
 8002592:	f7fe fbcd 	bl	8000d30 <__aeabi_fmul>
 8002596:	4603      	mov	r3, r0
 8002598:	461a      	mov	r2, r3
 800259a:	4b1e      	ldr	r3, [pc, #120]	@ (8002614 <setIRAngle+0x138>)
 800259c:	601a      	str	r2, [r3, #0]
 800259e:	e02c      	b.n	80025fa <setIRAngle+0x11e>
	}
	else if (right > 600 && goal_angle == 0)
 80025a0:	4918      	ldr	r1, [pc, #96]	@ (8002604 <setIRAngle+0x128>)
 80025a2:	6838      	ldr	r0, [r7, #0]
 80025a4:	f7fe fd80 	bl	80010a8 <__aeabi_fcmpgt>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d020      	beq.n	80025f0 <setIRAngle+0x114>
 80025ae:	4b16      	ldr	r3, [pc, #88]	@ (8002608 <setIRAngle+0x12c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f04f 0100 	mov.w	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fd4e 	bl	8001058 <__aeabi_fcmpeq>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <setIRAngle+0x114>
	{
		IRadjustment = (kPir2 * (goal_right - right));
 80025c2:	4b17      	ldr	r3, [pc, #92]	@ (8002620 <setIRAngle+0x144>)
 80025c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fb5d 	bl	8000c88 <__aeabi_i2f>
 80025ce:	4603      	mov	r3, r0
 80025d0:	6839      	ldr	r1, [r7, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe faa2 	bl	8000b1c <__aeabi_fsub>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	4b0f      	ldr	r3, [pc, #60]	@ (800261c <setIRAngle+0x140>)
 80025de:	4619      	mov	r1, r3
 80025e0:	4610      	mov	r0, r2
 80025e2:	f7fe fba5 	bl	8000d30 <__aeabi_fmul>
 80025e6:	4603      	mov	r3, r0
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <setIRAngle+0x138>)
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	e004      	b.n	80025fa <setIRAngle+0x11e>
	}
	else
		IRadjustment = 0;
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <setIRAngle+0x138>)
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd90      	pop	{r4, r7, pc}
 8002602:	bf00      	nop
 8002604:	44160000 	.word	0x44160000
 8002608:	20001328 	.word	0x20001328
 800260c:	2000139c 	.word	0x2000139c
 8002610:	3a83126f 	.word	0x3a83126f
 8002614:	20001398 	.word	0x20001398
 8002618:	200013a2 	.word	0x200013a2
 800261c:	3b449ba6 	.word	0x3b449ba6
 8002620:	200013a4 	.word	0x200013a4
 8002624:	00000000 	.word	0x00000000

08002628 <PDController>:

void PDController() {
 8002628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	setIRAngle(ir_left, ir_right);
 800262e:	4b9e      	ldr	r3, [pc, #632]	@ (80028a8 <PDController+0x280>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a9e      	ldr	r2, [pc, #632]	@ (80028ac <PDController+0x284>)
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff4f 	bl	80024dc <setIRAngle>

	float adjusted_angle = goal_angle + IRadjustment;
 800263e:	4b9c      	ldr	r3, [pc, #624]	@ (80028b0 <PDController+0x288>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a9c      	ldr	r2, [pc, #624]	@ (80028b4 <PDController+0x28c>)
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	4611      	mov	r1, r2
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fa69 	bl	8000b20 <__addsf3>
 800264e:	4603      	mov	r3, r0
 8002650:	607b      	str	r3, [r7, #4]

	readGyro(&gyro_vel);
 8002652:	4899      	ldr	r0, [pc, #612]	@ (80028b8 <PDController+0x290>)
 8002654:	f7ff f8a4 	bl	80017a0 <readGyro>
	gyro_vel /= 1000;
 8002658:	4b97      	ldr	r3, [pc, #604]	@ (80028b8 <PDController+0x290>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4997      	ldr	r1, [pc, #604]	@ (80028bc <PDController+0x294>)
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fc1a 	bl	8000e98 <__aeabi_fdiv>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b93      	ldr	r3, [pc, #588]	@ (80028b8 <PDController+0x290>)
 800266a:	601a      	str	r2, [r3, #0]
	gyro_angle += gyro_vel;
 800266c:	4b94      	ldr	r3, [pc, #592]	@ (80028c0 <PDController+0x298>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a91      	ldr	r2, [pc, #580]	@ (80028b8 <PDController+0x290>)
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	4611      	mov	r1, r2
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fa52 	bl	8000b20 <__addsf3>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	4b8f      	ldr	r3, [pc, #572]	@ (80028c0 <PDController+0x298>)
 8002682:	601a      	str	r2, [r3, #0]

	angle_error = adjusted_angle - gyro_angle;
 8002684:	4b8e      	ldr	r3, [pc, #568]	@ (80028c0 <PDController+0x298>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fa46 	bl	8000b1c <__aeabi_fsub>
 8002690:	4603      	mov	r3, r0
 8002692:	461a      	mov	r2, r3
 8002694:	4b8b      	ldr	r3, [pc, #556]	@ (80028c4 <PDController+0x29c>)
 8002696:	601a      	str	r2, [r3, #0]
	angle_correction = kPw * angle_error + kDw * (angle_error - old_angle_error);
 8002698:	4a8b      	ldr	r2, [pc, #556]	@ (80028c8 <PDController+0x2a0>)
 800269a:	4b8a      	ldr	r3, [pc, #552]	@ (80028c4 <PDController+0x29c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4619      	mov	r1, r3
 80026a0:	4610      	mov	r0, r2
 80026a2:	f7fe fb45 	bl	8000d30 <__aeabi_fmul>
 80026a6:	4603      	mov	r3, r0
 80026a8:	461c      	mov	r4, r3
 80026aa:	4b86      	ldr	r3, [pc, #536]	@ (80028c4 <PDController+0x29c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a87      	ldr	r2, [pc, #540]	@ (80028cc <PDController+0x2a4>)
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	4611      	mov	r1, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe fa31 	bl	8000b1c <__aeabi_fsub>
 80026ba:	4603      	mov	r3, r0
 80026bc:	461a      	mov	r2, r3
 80026be:	4b84      	ldr	r3, [pc, #528]	@ (80028d0 <PDController+0x2a8>)
 80026c0:	4619      	mov	r1, r3
 80026c2:	4610      	mov	r0, r2
 80026c4:	f7fe fb34 	bl	8000d30 <__aeabi_fmul>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4619      	mov	r1, r3
 80026cc:	4620      	mov	r0, r4
 80026ce:	f7fe fa27 	bl	8000b20 <__addsf3>
 80026d2:	4603      	mov	r3, r0
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b7f      	ldr	r3, [pc, #508]	@ (80028d4 <PDController+0x2ac>)
 80026d8:	601a      	str	r2, [r3, #0]

	distance_error = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts()) / (2 * ENC_TO_MM));
 80026da:	4b7f      	ldr	r3, [pc, #508]	@ (80028d8 <PDController+0x2b0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7fd fed6 	bl	8000490 <__aeabi_f2d>
 80026e4:	4604      	mov	r4, r0
 80026e6:	460d      	mov	r5, r1
 80026e8:	f7fe ff10 	bl	800150c <getLeftEncoderCounts>
 80026ec:	4603      	mov	r3, r0
 80026ee:	461e      	mov	r6, r3
 80026f0:	f7fe fefe 	bl	80014f0 <getRightEncoderCounts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	4433      	add	r3, r6
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd feb7 	bl	800046c <__aeabi_i2d>
 80026fe:	a368      	add	r3, pc, #416	@ (adr r3, 80028a0 <PDController+0x278>)
 8002700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002704:	f7fe f846 	bl	8000794 <__aeabi_ddiv>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4620      	mov	r0, r4
 800270e:	4629      	mov	r1, r5
 8002710:	f7fd fd5e 	bl	80001d0 <__aeabi_dsub>
 8002714:	4602      	mov	r2, r0
 8002716:	460b      	mov	r3, r1
 8002718:	4610      	mov	r0, r2
 800271a:	4619      	mov	r1, r3
 800271c:	f7fe f9aa 	bl	8000a74 <__aeabi_d2f>
 8002720:	4603      	mov	r3, r0
 8002722:	4a6e      	ldr	r2, [pc, #440]	@ (80028dc <PDController+0x2b4>)
 8002724:	6013      	str	r3, [r2, #0]

	distance_correction = kPx * distance_error + kDx * (distance_error - old_distance_error);
 8002726:	4a6e      	ldr	r2, [pc, #440]	@ (80028e0 <PDController+0x2b8>)
 8002728:	4b6c      	ldr	r3, [pc, #432]	@ (80028dc <PDController+0x2b4>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4619      	mov	r1, r3
 800272e:	4610      	mov	r0, r2
 8002730:	f7fe fafe 	bl	8000d30 <__aeabi_fmul>
 8002734:	4603      	mov	r3, r0
 8002736:	461c      	mov	r4, r3
 8002738:	4b68      	ldr	r3, [pc, #416]	@ (80028dc <PDController+0x2b4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a69      	ldr	r2, [pc, #420]	@ (80028e4 <PDController+0x2bc>)
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe f9ea 	bl	8000b1c <__aeabi_fsub>
 8002748:	4603      	mov	r3, r0
 800274a:	461a      	mov	r2, r3
 800274c:	4b64      	ldr	r3, [pc, #400]	@ (80028e0 <PDController+0x2b8>)
 800274e:	4619      	mov	r1, r3
 8002750:	4610      	mov	r0, r2
 8002752:	f7fe faed 	bl	8000d30 <__aeabi_fmul>
 8002756:	4603      	mov	r3, r0
 8002758:	4619      	mov	r1, r3
 800275a:	4620      	mov	r0, r4
 800275c:	f7fe f9e0 	bl	8000b20 <__addsf3>
 8002760:	4603      	mov	r3, r0
 8002762:	461a      	mov	r2, r3
 8002764:	4b60      	ldr	r3, [pc, #384]	@ (80028e8 <PDController+0x2c0>)
 8002766:	601a      	str	r2, [r3, #0]

/////////////////////////////////	APPLY ACCELERATION	///////////////////////////////

	if (fabs(distance_error) > 100)
 8002768:	4b5c      	ldr	r3, [pc, #368]	@ (80028dc <PDController+0x2b4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002770:	495e      	ldr	r1, [pc, #376]	@ (80028ec <PDController+0x2c4>)
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fc98 	bl	80010a8 <__aeabi_fcmpgt>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d034      	beq.n	80027e8 <PDController+0x1c0>
	{		// If we're going straight and not at the end, apply acceleration
		if (fabs(distance_correction - old_distance_correction) > xacceleration)
 800277e:	4b5a      	ldr	r3, [pc, #360]	@ (80028e8 <PDController+0x2c0>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a5b      	ldr	r2, [pc, #364]	@ (80028f0 <PDController+0x2c8>)
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	4611      	mov	r1, r2
 8002788:	4618      	mov	r0, r3
 800278a:	f7fe f9c7 	bl	8000b1c <__aeabi_fsub>
 800278e:	4603      	mov	r3, r0
 8002790:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002794:	4a57      	ldr	r2, [pc, #348]	@ (80028f4 <PDController+0x2cc>)
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fc85 	bl	80010a8 <__aeabi_fcmpgt>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d021      	beq.n	80027e8 <PDController+0x1c0>
		{
			distance_correction = old_distance_correction + (xacceleration * sign(distance_correction - old_distance_correction));
 80027a4:	4b50      	ldr	r3, [pc, #320]	@ (80028e8 <PDController+0x2c0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a51      	ldr	r2, [pc, #324]	@ (80028f0 <PDController+0x2c8>)
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7fe f9b4 	bl	8000b1c <__aeabi_fsub>
 80027b4:	4603      	mov	r3, r0
 80027b6:	4618      	mov	r0, r3
 80027b8:	f001 f9d8 	bl	8003b6c <sign>
 80027bc:	4603      	mov	r3, r0
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fe fa62 	bl	8000c88 <__aeabi_i2f>
 80027c4:	4603      	mov	r3, r0
 80027c6:	4a4b      	ldr	r2, [pc, #300]	@ (80028f4 <PDController+0x2cc>)
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fe fab0 	bl	8000d30 <__aeabi_fmul>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b46      	ldr	r3, [pc, #280]	@ (80028f0 <PDController+0x2c8>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	4610      	mov	r0, r2
 80027dc:	f7fe f9a0 	bl	8000b20 <__addsf3>
 80027e0:	4603      	mov	r3, r0
 80027e2:	461a      	mov	r2, r3
 80027e4:	4b40      	ldr	r3, [pc, #256]	@ (80028e8 <PDController+0x2c0>)
 80027e6:	601a      	str	r2, [r3, #0]
		}
	}

////////////////////// ROUND DISTANCE AND ANGLE CORRECTION	//////////////////////////

	if (fabs(distance_correction) > PWMMaxx)		// Upper Limit for PWM
 80027e8:	4b3f      	ldr	r3, [pc, #252]	@ (80028e8 <PDController+0x2c0>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027f0:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fc56 	bl	80010a8 <__aeabi_fcmpgt>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d013      	beq.n	800282a <PDController+0x202>
		distance_correction = sign(distance_correction) * PWMMaxx;
 8002802:	4b39      	ldr	r3, [pc, #228]	@ (80028e8 <PDController+0x2c0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f001 f9b0 	bl	8003b6c <sign>
 800280c:	4603      	mov	r3, r0
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe fa3a 	bl	8000c88 <__aeabi_i2f>
 8002814:	4603      	mov	r3, r0
 8002816:	f04f 527a 	mov.w	r2, #1048576000	@ 0x3e800000
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe fa87 	bl	8000d30 <__aeabi_fmul>
 8002822:	4603      	mov	r3, r0
 8002824:	461a      	mov	r2, r3
 8002826:	4b30      	ldr	r3, [pc, #192]	@ (80028e8 <PDController+0x2c0>)
 8002828:	601a      	str	r2, [r3, #0]

	if (fabs(angle_correction) > PWMMaxw)
 800282a:	4b2a      	ldr	r3, [pc, #168]	@ (80028d4 <PDController+0x2ac>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002832:	4a31      	ldr	r2, [pc, #196]	@ (80028f8 <PDController+0x2d0>)
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f7fe fc36 	bl	80010a8 <__aeabi_fcmpgt>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d012      	beq.n	8002868 <PDController+0x240>
		angle_correction = sign(angle_correction) * PWMMaxw;
 8002842:	4b24      	ldr	r3, [pc, #144]	@ (80028d4 <PDController+0x2ac>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f001 f990 	bl	8003b6c <sign>
 800284c:	4603      	mov	r3, r0
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fa1a 	bl	8000c88 <__aeabi_i2f>
 8002854:	4603      	mov	r3, r0
 8002856:	4a28      	ldr	r2, [pc, #160]	@ (80028f8 <PDController+0x2d0>)
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fa68 	bl	8000d30 <__aeabi_fmul>
 8002860:	4603      	mov	r3, r0
 8002862:	461a      	mov	r2, r3
 8002864:	4b1b      	ldr	r3, [pc, #108]	@ (80028d4 <PDController+0x2ac>)
 8002866:	601a      	str	r2, [r3, #0]

	left_PWM_value = (distance_correction + angle_correction);
 8002868:	4b1f      	ldr	r3, [pc, #124]	@ (80028e8 <PDController+0x2c0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a19      	ldr	r2, [pc, #100]	@ (80028d4 <PDController+0x2ac>)
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f7fe f954 	bl	8000b20 <__addsf3>
 8002878:	4603      	mov	r3, r0
 800287a:	461a      	mov	r2, r3
 800287c:	4b1f      	ldr	r3, [pc, #124]	@ (80028fc <PDController+0x2d4>)
 800287e:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distance_correction - angle_correction);
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <PDController+0x2c0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a13      	ldr	r2, [pc, #76]	@ (80028d4 <PDController+0x2ac>)
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe f946 	bl	8000b1c <__aeabi_fsub>
 8002890:	4603      	mov	r3, r0
 8002892:	461a      	mov	r2, r3
 8002894:	4b1a      	ldr	r3, [pc, #104]	@ (8002900 <PDController+0x2d8>)
 8002896:	601a      	str	r2, [r3, #0]

}
 8002898:	bf00      	nop
 800289a:	e033      	b.n	8002904 <PDController+0x2dc>
 800289c:	f3af 8000 	nop.w
 80028a0:	5e353f7d 	.word	0x5e353f7d
 80028a4:	401b49ba 	.word	0x401b49ba
 80028a8:	200002f8 	.word	0x200002f8
 80028ac:	20000304 	.word	0x20000304
 80028b0:	20001328 	.word	0x20001328
 80028b4:	20001398 	.word	0x20001398
 80028b8:	200013b8 	.word	0x200013b8
 80028bc:	447a0000 	.word	0x447a0000
 80028c0:	200013b4 	.word	0x200013b4
 80028c4:	2000132c 	.word	0x2000132c
 80028c8:	3d23d70a 	.word	0x3d23d70a
 80028cc:	20001330 	.word	0x20001330
 80028d0:	3cf5c28f 	.word	0x3cf5c28f
 80028d4:	2000135c 	.word	0x2000135c
 80028d8:	20001324 	.word	0x20001324
 80028dc:	20001360 	.word	0x20001360
 80028e0:	3c75c28f 	.word	0x3c75c28f
 80028e4:	20001364 	.word	0x20001364
 80028e8:	20001390 	.word	0x20001390
 80028ec:	42c80000 	.word	0x42c80000
 80028f0:	20001394 	.word	0x20001394
 80028f4:	3a83126f 	.word	0x3a83126f
 80028f8:	3dcccccd 	.word	0x3dcccccd
 80028fc:	200013a8 	.word	0x200013a8
 8002900:	200013ac 	.word	0x200013ac
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800290a:	bf00      	nop
 800290c:	0000      	movs	r0, r0
	...

08002910 <updatePID>:

void updatePID() {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 8002916:	f7ff fe87 	bl	8002628 <PDController>

	if (fabs(left_PWM_value) > 0.03) {
 800291a:	4b63      	ldr	r3, [pc, #396]	@ (8002aa8 <updatePID+0x198>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002922:	4618      	mov	r0, r3
 8002924:	f7fd fdb4 	bl	8000490 <__aeabi_f2d>
 8002928:	a35d      	add	r3, pc, #372	@ (adr r3, 8002aa0 <updatePID+0x190>)
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	f7fe f897 	bl	8000a60 <__aeabi_dcmpgt>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d01a      	beq.n	800296e <updatePID+0x5e>
		left_PWM_value += sign(left_PWM_value) * PWMMin;
 8002938:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa8 <updatePID+0x198>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f001 f915 	bl	8003b6c <sign>
 8002942:	4603      	mov	r3, r0
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe f99f 	bl	8000c88 <__aeabi_i2f>
 800294a:	4603      	mov	r3, r0
 800294c:	4a57      	ldr	r2, [pc, #348]	@ (8002aac <updatePID+0x19c>)
 800294e:	4611      	mov	r1, r2
 8002950:	4618      	mov	r0, r3
 8002952:	f7fe f9ed 	bl	8000d30 <__aeabi_fmul>
 8002956:	4603      	mov	r3, r0
 8002958:	461a      	mov	r2, r3
 800295a:	4b53      	ldr	r3, [pc, #332]	@ (8002aa8 <updatePID+0x198>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4619      	mov	r1, r3
 8002960:	4610      	mov	r0, r2
 8002962:	f7fe f8dd 	bl	8000b20 <__addsf3>
 8002966:	4603      	mov	r3, r0
 8002968:	461a      	mov	r2, r3
 800296a:	4b4f      	ldr	r3, [pc, #316]	@ (8002aa8 <updatePID+0x198>)
 800296c:	601a      	str	r2, [r3, #0]

	}

	if (fabs(right_PWM_value) > 0.03) {
 800296e:	4b50      	ldr	r3, [pc, #320]	@ (8002ab0 <updatePID+0x1a0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fd8a 	bl	8000490 <__aeabi_f2d>
 800297c:	a348      	add	r3, pc, #288	@ (adr r3, 8002aa0 <updatePID+0x190>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fe f86d 	bl	8000a60 <__aeabi_dcmpgt>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01a      	beq.n	80029c2 <updatePID+0xb2>
		right_PWM_value += sign(right_PWM_value) * PWMMin;
 800298c:	4b48      	ldr	r3, [pc, #288]	@ (8002ab0 <updatePID+0x1a0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f001 f8eb 	bl	8003b6c <sign>
 8002996:	4603      	mov	r3, r0
 8002998:	4618      	mov	r0, r3
 800299a:	f7fe f975 	bl	8000c88 <__aeabi_i2f>
 800299e:	4603      	mov	r3, r0
 80029a0:	4a42      	ldr	r2, [pc, #264]	@ (8002aac <updatePID+0x19c>)
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7fe f9c3 	bl	8000d30 <__aeabi_fmul>
 80029aa:	4603      	mov	r3, r0
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b40      	ldr	r3, [pc, #256]	@ (8002ab0 <updatePID+0x1a0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4619      	mov	r1, r3
 80029b4:	4610      	mov	r0, r2
 80029b6:	f7fe f8b3 	bl	8000b20 <__addsf3>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	4b3c      	ldr	r3, [pc, #240]	@ (8002ab0 <updatePID+0x1a0>)
 80029c0:	601a      	str	r2, [r3, #0]

	}

//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 80029c2:	4b39      	ldr	r3, [pc, #228]	@ (8002aa8 <updatePID+0x198>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff fc92 	bl	80022f0 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 80029cc:	4b38      	ldr	r3, [pc, #224]	@ (8002ab0 <updatePID+0x1a0>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff fcc9 	bl	8002368 <setMotorRPWM>

	if(angle_error < 2 && angle_error > -2 && distance_error < 2 && distance_error > -2)
 80029d6:	4b37      	ldr	r3, [pc, #220]	@ (8002ab4 <updatePID+0x1a4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fb44 	bl	800106c <__aeabi_fcmplt>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d023      	beq.n	8002a32 <updatePID+0x122>
 80029ea:	4b32      	ldr	r3, [pc, #200]	@ (8002ab4 <updatePID+0x1a4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fb58 	bl	80010a8 <__aeabi_fcmpgt>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d019      	beq.n	8002a32 <updatePID+0x122>
 80029fe:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab8 <updatePID+0x1a8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe fb30 	bl	800106c <__aeabi_fcmplt>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00f      	beq.n	8002a32 <updatePID+0x122>
 8002a12:	4b29      	ldr	r3, [pc, #164]	@ (8002ab8 <updatePID+0x1a8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe fb44 	bl	80010a8 <__aeabi_fcmpgt>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <updatePID+0x122>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002a26:	4b25      	ldr	r3, [pc, #148]	@ (8002abc <updatePID+0x1ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	4a23      	ldr	r2, [pc, #140]	@ (8002abc <updatePID+0x1ac>)
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	e002      	b.n	8002a38 <updatePID+0x128>

	else
		goal_reached_timer = 0;
 8002a32:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <updatePID+0x1ac>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	old_distance_correction = distance_correction;
 8002a38:	4b21      	ldr	r3, [pc, #132]	@ (8002ac0 <updatePID+0x1b0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a21      	ldr	r2, [pc, #132]	@ (8002ac4 <updatePID+0x1b4>)
 8002a3e:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002a40:	2309      	movs	r3, #9
 8002a42:	607b      	str	r3, [r7, #4]
 8002a44:	e00b      	b.n	8002a5e <updatePID+0x14e>
		old_angle_errors[i] = old_angle_errors[i-1];	// Adds the newest angle_error to array and shifts everything to the right
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac8 <updatePID+0x1b8>)
 8002a4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a50:	491d      	ldr	r1, [pc, #116]	@ (8002ac8 <updatePID+0x1b8>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	607b      	str	r3, [r7, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	dcf0      	bgt.n	8002a46 <updatePID+0x136>
	old_angle_errors[0] = angle_error;
 8002a64:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <updatePID+0x1a4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a17      	ldr	r2, [pc, #92]	@ (8002ac8 <updatePID+0x1b8>)
 8002a6a:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002a6c:	2309      	movs	r3, #9
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	e00b      	b.n	8002a8a <updatePID+0x17a>
		old_distance_errors[i] = old_distance_errors[i-1];	// Adds the newest distance_error to array and shifts everything right
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	4a15      	ldr	r2, [pc, #84]	@ (8002acc <updatePID+0x1bc>)
 8002a78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a7c:	4913      	ldr	r1, [pc, #76]	@ (8002acc <updatePID+0x1bc>)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	3b01      	subs	r3, #1
 8002a88:	603b      	str	r3, [r7, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	dcf0      	bgt.n	8002a72 <updatePID+0x162>
	old_distance_errors[0] = distance_error;
 8002a90:	4b09      	ldr	r3, [pc, #36]	@ (8002ab8 <updatePID+0x1a8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	@ (8002acc <updatePID+0x1bc>)
 8002a96:	6013      	str	r3, [r2, #0]

}
 8002a98:	bf00      	nop
 8002a9a:	3708      	adds	r7, #8
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	eb851eb8 	.word	0xeb851eb8
 8002aa4:	3f9eb851 	.word	0x3f9eb851
 8002aa8:	200013a8 	.word	0x200013a8
 8002aac:	3e570a3d 	.word	0x3e570a3d
 8002ab0:	200013ac 	.word	0x200013ac
 8002ab4:	2000132c 	.word	0x2000132c
 8002ab8:	20001360 	.word	0x20001360
 8002abc:	200013b0 	.word	0x200013b0
 8002ac0:	20001390 	.word	0x20001390
 8002ac4:	20001394 	.word	0x20001394
 8002ac8:	20001334 	.word	0x20001334
 8002acc:	20001368 	.word	0x20001368

08002ad0 <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 8002ad4:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <PIDdone+0x1c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b31      	cmp	r3, #49	@ 0x31
 8002ada:	dd03      	ble.n	8002ae4 <PIDdone+0x14>
	{
		resetPID();
 8002adc:	f000 f808 	bl	8002af0 <resetPID>
		return 1;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <PIDdone+0x16>
	}
	else
		return 0;
 8002ae4:	2300      	movs	r3, #0

}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200013b0 	.word	0x200013b0

08002af0 <resetPID>:

void resetPID() {
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angle_error = 0;
 8002af6:	4b24      	ldr	r3, [pc, #144]	@ (8002b88 <resetPID+0x98>)
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
	old_angle_error = 0;
 8002afe:	4b23      	ldr	r3, [pc, #140]	@ (8002b8c <resetPID+0x9c>)
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]
	angle_correction = 0;
 8002b06:	4b22      	ldr	r3, [pc, #136]	@ (8002b90 <resetPID+0xa0>)
 8002b08:	f04f 0200 	mov.w	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]
 8002b12:	e008      	b.n	8002b26 <resetPID+0x36>
		old_angle_errors[i] = 0;
 8002b14:	4a1f      	ldr	r2, [pc, #124]	@ (8002b94 <resetPID+0xa4>)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f04f 0100 	mov.w	r1, #0
 8002b1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3301      	adds	r3, #1
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b09      	cmp	r3, #9
 8002b2a:	ddf3      	ble.n	8002b14 <resetPID+0x24>

	distance_error = 0;
 8002b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b98 <resetPID+0xa8>)
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
	old_distance_error = 0;
 8002b34:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <resetPID+0xac>)
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
	distance_correction = 0;
 8002b3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ba0 <resetPID+0xb0>)
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002b44:	2300      	movs	r3, #0
 8002b46:	603b      	str	r3, [r7, #0]
 8002b48:	e008      	b.n	8002b5c <resetPID+0x6c>
		old_distance_errors[i] = 0;
 8002b4a:	4a16      	ldr	r2, [pc, #88]	@ (8002ba4 <resetPID+0xb4>)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	f04f 0100 	mov.w	r1, #0
 8002b52:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	2b09      	cmp	r3, #9
 8002b60:	ddf3      	ble.n	8002b4a <resetPID+0x5a>

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
//	goal_angle = 0;
//	gyro_angle = 0;
	goal_distance = 0;
 8002b62:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <resetPID+0xb8>)
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
	goal_reached_timer = 0;
 8002b6a:	4b10      	ldr	r3, [pc, #64]	@ (8002bac <resetPID+0xbc>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

	resetEncoders();
 8002b70:	f7fe fcda 	bl	8001528 <resetEncoders>
	resetMotors();
 8002b74:	f7ff fc34 	bl	80023e0 <resetMotors>
	setState(REST);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7ff fc6d 	bl	8002458 <setState>
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	2000132c 	.word	0x2000132c
 8002b8c:	20001330 	.word	0x20001330
 8002b90:	2000135c 	.word	0x2000135c
 8002b94:	20001334 	.word	0x20001334
 8002b98:	20001360 	.word	0x20001360
 8002b9c:	20001364 	.word	0x20001364
 8002ba0:	20001390 	.word	0x20001390
 8002ba4:	20001368 	.word	0x20001368
 8002ba8:	20001324 	.word	0x20001324
 8002bac:	200013b0 	.word	0x200013b0

08002bb0 <newCell>:
int16_t vertWall[16][17];

int16_t discovered[16][16];

struct Cell* newCell(int r, int c)           // Acts as a constructor for a cell cuz C is annoying
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
    struct Cell* p = malloc(sizeof(struct Cell));
 8002bba:	2008      	movs	r0, #8
 8002bbc:	f005 f8dc 	bl	8007d78 <malloc>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	60fb      	str	r3, [r7, #12]
    p->row = r;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	601a      	str	r2, [r3, #0]
    p->col = c;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	605a      	str	r2, [r3, #4]
    return p;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
	...

08002bdc <insertQueue>:

void insertQueue(struct Cell* input) {
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
    queue[queueEnd] = input;
 8002be4:	4b0f      	ldr	r3, [pc, #60]	@ (8002c24 <insertQueue+0x48>)
 8002be6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4a0e      	ldr	r2, [pc, #56]	@ (8002c28 <insertQueue+0x4c>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    queueEnd++;
 8002bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c24 <insertQueue+0x48>)
 8002bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	b21a      	sxth	r2, r3
 8002c02:	4b08      	ldr	r3, [pc, #32]	@ (8002c24 <insertQueue+0x48>)
 8002c04:	801a      	strh	r2, [r3, #0]

    if (queueEnd == 512) {
 8002c06:	4b07      	ldr	r3, [pc, #28]	@ (8002c24 <insertQueue+0x48>)
 8002c08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c10:	d102      	bne.n	8002c18 <insertQueue+0x3c>
        queueEnd = 0;
 8002c12:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <insertQueue+0x48>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20001dca 	.word	0x20001dca
 8002c28:	200015c8 	.word	0x200015c8

08002c2c <popQueueFront>:

void popQueueFront()
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
    free(queueFront());
 8002c30:	f000 f81a 	bl	8002c68 <queueFront>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f005 f8a6 	bl	8007d88 <free>

    queueStart++;
 8002c3c:	4b09      	ldr	r3, [pc, #36]	@ (8002c64 <popQueueFront+0x38>)
 8002c3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	3301      	adds	r3, #1
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	b21a      	sxth	r2, r3
 8002c4a:	4b06      	ldr	r3, [pc, #24]	@ (8002c64 <popQueueFront+0x38>)
 8002c4c:	801a      	strh	r2, [r3, #0]
    if (queueStart == 512) {
 8002c4e:	4b05      	ldr	r3, [pc, #20]	@ (8002c64 <popQueueFront+0x38>)
 8002c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c58:	d102      	bne.n	8002c60 <popQueueFront+0x34>
        queueStart = 0;
 8002c5a:	4b02      	ldr	r3, [pc, #8]	@ (8002c64 <popQueueFront+0x38>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002c60:	bf00      	nop
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	20001dc8 	.word	0x20001dc8

08002c68 <queueFront>:

struct Cell* queueFront()
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
    return queue[queueStart];
 8002c6c:	4b05      	ldr	r3, [pc, #20]	@ (8002c84 <queueFront+0x1c>)
 8002c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <queueFront+0x20>)
 8002c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	20001dc8 	.word	0x20001dc8
 8002c88:	200015c8 	.word	0x200015c8

08002c8c <initElements>:

void initElements()
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
    currPos = newCell(15, 0);           // Sets current position to row 15, column 0
 8002c92:	2100      	movs	r1, #0
 8002c94:	200f      	movs	r0, #15
 8002c96:	f7ff ff8b 	bl	8002bb0 <newCell>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	4a32      	ldr	r2, [pc, #200]	@ (8002d68 <initElements+0xdc>)
 8002c9e:	6013      	str	r3, [r2, #0]
    currHead = NORTH;                    // Sets current heading to north
 8002ca0:	4b32      	ldr	r3, [pc, #200]	@ (8002d6c <initElements+0xe0>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin) == GPIO_PIN_SET)	// This is not the first run and we want to load maze
 8002ca6:	2104      	movs	r1, #4
 8002ca8:	4831      	ldr	r0, [pc, #196]	@ (8002d70 <initElements+0xe4>)
 8002caa:	f002 fa09 	bl	80050c0 <HAL_GPIO_ReadPin>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d04f      	beq.n	8002d54 <initElements+0xc8>
    {
//    	loadMaze(); TODO
    }
    else																	// We don't want to load maze from memory
    {
        for (int i = 0; i < 17; i++) {
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
 8002cb8:	e013      	b.n	8002ce2 <initElements+0x56>
            for (int j = 0; j < 16; j++) {
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	e00a      	b.n	8002cd6 <initElements+0x4a>
                horzWall[i][j] = 0;
 8002cc0:	492c      	ldr	r1, [pc, #176]	@ (8002d74 <initElements+0xe8>)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	011a      	lsls	r2, r3, #4
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 16; j++) {
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b0f      	cmp	r3, #15
 8002cda:	ddf1      	ble.n	8002cc0 <initElements+0x34>
        for (int i = 0; i < 17; i++) {
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b10      	cmp	r3, #16
 8002ce6:	dde8      	ble.n	8002cba <initElements+0x2e>
            }
        }
        for (int i = 0; i < 16; i++) {
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e015      	b.n	8002d1a <initElements+0x8e>
            for (int j = 0; j < 17; j++) {
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	e00c      	b.n	8002d0e <initElements+0x82>
                vertWall[i][j] = 0;
 8002cf4:	4920      	ldr	r1, [pc, #128]	@ (8002d78 <initElements+0xec>)
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	011b      	lsls	r3, r3, #4
 8002cfc:	4413      	add	r3, r2
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	4413      	add	r3, r2
 8002d02:	2200      	movs	r2, #0
 8002d04:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 17; j++) {
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	ddef      	ble.n	8002cf4 <initElements+0x68>
        for (int i = 0; i < 16; i++) {
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3301      	adds	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b0f      	cmp	r3, #15
 8002d1e:	dde6      	ble.n	8002cee <initElements+0x62>
            }
        }
		for (int i = 0; i < 16; i++) {
 8002d20:	2300      	movs	r3, #0
 8002d22:	607b      	str	r3, [r7, #4]
 8002d24:	e013      	b.n	8002d4e <initElements+0xc2>
			for (int j = 0; j < 16; j++) {
 8002d26:	2300      	movs	r3, #0
 8002d28:	603b      	str	r3, [r7, #0]
 8002d2a:	e00a      	b.n	8002d42 <initElements+0xb6>
				discovered[i][j] = 0;
 8002d2c:	4913      	ldr	r1, [pc, #76]	@ (8002d7c <initElements+0xf0>)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	011a      	lsls	r2, r3, #4
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	4413      	add	r3, r2
 8002d36:	2200      	movs	r2, #0
 8002d38:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int j = 0; j < 16; j++) {
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	603b      	str	r3, [r7, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b0f      	cmp	r3, #15
 8002d46:	ddf1      	ble.n	8002d2c <initElements+0xa0>
		for (int i = 0; i < 16; i++) {
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b0f      	cmp	r3, #15
 8002d52:	dde8      	ble.n	8002d26 <initElements+0x9a>
			}
		}
    }

    queueStart = 0;
 8002d54:	4b0a      	ldr	r3, [pc, #40]	@ (8002d80 <initElements+0xf4>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 8002d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d84 <initElements+0xf8>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	801a      	strh	r2, [r3, #0]
}
 8002d60:	bf00      	nop
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	200013c0 	.word	0x200013c0
 8002d6c:	200013c4 	.word	0x200013c4
 8002d70:	40020c00 	.word	0x40020c00
 8002d74:	20001dcc 	.word	0x20001dcc
 8002d78:	20001fec 	.word	0x20001fec
 8002d7c:	2000220c 	.word	0x2000220c
 8002d80:	20001dc8 	.word	0x20001dc8
 8002d84:	20001dca 	.word	0x20001dca

08002d88 <setWall>:

void setWall(int dir)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
    switch (dir)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d844      	bhi.n	8002e20 <setWall+0x98>
 8002d96:	a201      	add	r2, pc, #4	@ (adr r2, 8002d9c <setWall+0x14>)
 8002d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002dc7 	.word	0x08002dc7
 8002da4:	08002de7 	.word	0x08002de7
 8002da8:	08002e03 	.word	0x08002e03
    {
    case NORTH:
        horzWall[currPos->row][currPos->col] = 1;   // Sets the 2D array value to 1 to represent true (there's no bool type in C)
 8002dac:	4b1f      	ldr	r3, [pc, #124]	@ (8002e2c <setWall+0xa4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e2c <setWall+0xa4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	491d      	ldr	r1, [pc, #116]	@ (8002e30 <setWall+0xa8>)
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	4413      	add	r3, r2
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 8002dc4:	e02c      	b.n	8002e20 <setWall+0x98>
    case EAST:
        vertWall[currPos->row][currPos->col + 1] = 1;   // May need to check 2D array logic my head hurts lol
 8002dc6:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <setWall+0xa4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b17      	ldr	r3, [pc, #92]	@ (8002e2c <setWall+0xa4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	1c59      	adds	r1, r3, #1
 8002dd4:	4817      	ldr	r0, [pc, #92]	@ (8002e34 <setWall+0xac>)
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	4413      	add	r3, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	2201      	movs	r2, #1
 8002de0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 8002de4:	e01c      	b.n	8002e20 <setWall+0x98>
    case SOUTH:
        horzWall[currPos->row + 1][currPos->col] = 1;
 8002de6:	4b11      	ldr	r3, [pc, #68]	@ (8002e2c <setWall+0xa4>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <setWall+0xa4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	490e      	ldr	r1, [pc, #56]	@ (8002e30 <setWall+0xa8>)
 8002df6:	0112      	lsls	r2, r2, #4
 8002df8:	4413      	add	r3, r2
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 8002e00:	e00e      	b.n	8002e20 <setWall+0x98>
    case WEST:
        vertWall[currPos->row][currPos->col] = 1;
 8002e02:	4b0a      	ldr	r3, [pc, #40]	@ (8002e2c <setWall+0xa4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	4b08      	ldr	r3, [pc, #32]	@ (8002e2c <setWall+0xa4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	4809      	ldr	r0, [pc, #36]	@ (8002e34 <setWall+0xac>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	4413      	add	r3, r2
 8002e16:	440b      	add	r3, r1
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 8002e1e:	bf00      	nop
    }
}
 8002e20:	bf00      	nop
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bc80      	pop	{r7}
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	200013c0 	.word	0x200013c0
 8002e30:	20001dcc 	.word	0x20001dcc
 8002e34:	20001fec 	.word	0x20001fec

08002e38 <detectWalls>:

void detectWalls()
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
    switch (currHead)
 8002e3c:	4b44      	ldr	r3, [pc, #272]	@ (8002f50 <detectWalls+0x118>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d876      	bhi.n	8002f32 <detectWalls+0xfa>
 8002e44:	a201      	add	r2, pc, #4	@ (adr r2, 8002e4c <detectWalls+0x14>)
 8002e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4a:	bf00      	nop
 8002e4c:	08002e5d 	.word	0x08002e5d
 8002e50:	08002e8f 	.word	0x08002e8f
 8002e54:	08002ec1 	.word	0x08002ec1
 8002e58:	08002ef3 	.word	0x08002ef3
    {
    case NORTH:
        if (frontWallCheck())
 8002e5c:	f000 fe62 	bl	8003b24 <frontWallCheck>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <detectWalls+0x34>
        {
            setWall(NORTH);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7ff ff8e 	bl	8002d88 <setWall>
        }
        if (leftWallCheck())
 8002e6c:	f000 fe12 	bl	8003a94 <leftWallCheck>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <detectWalls+0x44>
        {
            setWall(WEST);
 8002e76:	2003      	movs	r0, #3
 8002e78:	f7ff ff86 	bl	8002d88 <setWall>
        }
        if (rightWallCheck())
 8002e7c:	f000 fe2e 	bl	8003adc <rightWallCheck>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d04e      	beq.n	8002f24 <detectWalls+0xec>
        {
            setWall(EAST);
 8002e86:	2001      	movs	r0, #1
 8002e88:	f7ff ff7e 	bl	8002d88 <setWall>
        }
        break;
 8002e8c:	e04a      	b.n	8002f24 <detectWalls+0xec>
    case EAST:
        if (frontWallCheck())
 8002e8e:	f000 fe49 	bl	8003b24 <frontWallCheck>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <detectWalls+0x66>
        {
            setWall(EAST);
 8002e98:	2001      	movs	r0, #1
 8002e9a:	f7ff ff75 	bl	8002d88 <setWall>
        }
        if (leftWallCheck())
 8002e9e:	f000 fdf9 	bl	8003a94 <leftWallCheck>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <detectWalls+0x76>
        {
            setWall(NORTH);
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7ff ff6d 	bl	8002d88 <setWall>
        }
        if (rightWallCheck())
 8002eae:	f000 fe15 	bl	8003adc <rightWallCheck>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d037      	beq.n	8002f28 <detectWalls+0xf0>
        {
            setWall(SOUTH);
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f7ff ff65 	bl	8002d88 <setWall>
        }
        break;
 8002ebe:	e033      	b.n	8002f28 <detectWalls+0xf0>
    case SOUTH:
        if (frontWallCheck())
 8002ec0:	f000 fe30 	bl	8003b24 <frontWallCheck>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d002      	beq.n	8002ed0 <detectWalls+0x98>
        {
            setWall(SOUTH);
 8002eca:	2002      	movs	r0, #2
 8002ecc:	f7ff ff5c 	bl	8002d88 <setWall>
        }
        if (leftWallCheck())
 8002ed0:	f000 fde0 	bl	8003a94 <leftWallCheck>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <detectWalls+0xa8>
        {
            setWall(EAST);
 8002eda:	2001      	movs	r0, #1
 8002edc:	f7ff ff54 	bl	8002d88 <setWall>
        }
        if (rightWallCheck())
 8002ee0:	f000 fdfc 	bl	8003adc <rightWallCheck>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d020      	beq.n	8002f2c <detectWalls+0xf4>
        {
            setWall(WEST);
 8002eea:	2003      	movs	r0, #3
 8002eec:	f7ff ff4c 	bl	8002d88 <setWall>
        }
        break;
 8002ef0:	e01c      	b.n	8002f2c <detectWalls+0xf4>
    case WEST:
        if (frontWallCheck())
 8002ef2:	f000 fe17 	bl	8003b24 <frontWallCheck>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <detectWalls+0xca>
        {
            setWall(WEST);
 8002efc:	2003      	movs	r0, #3
 8002efe:	f7ff ff43 	bl	8002d88 <setWall>
        }
        if (leftWallCheck())
 8002f02:	f000 fdc7 	bl	8003a94 <leftWallCheck>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <detectWalls+0xda>
        {
            setWall(SOUTH);
 8002f0c:	2002      	movs	r0, #2
 8002f0e:	f7ff ff3b 	bl	8002d88 <setWall>
        }
        if (rightWallCheck())
 8002f12:	f000 fde3 	bl	8003adc <rightWallCheck>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <detectWalls+0xf8>
        {
            setWall(NORTH);
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7ff ff33 	bl	8002d88 <setWall>
        }
        break;
 8002f22:	e005      	b.n	8002f30 <detectWalls+0xf8>
        break;
 8002f24:	bf00      	nop
 8002f26:	e004      	b.n	8002f32 <detectWalls+0xfa>
        break;
 8002f28:	bf00      	nop
 8002f2a:	e002      	b.n	8002f32 <detectWalls+0xfa>
        break;
 8002f2c:	bf00      	nop
 8002f2e:	e000      	b.n	8002f32 <detectWalls+0xfa>
        break;
 8002f30:	bf00      	nop
    }

    discovered[currPos->row][currPos->col] = 1;		// Mark current cell as discovered
 8002f32:	4b08      	ldr	r3, [pc, #32]	@ (8002f54 <detectWalls+0x11c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <detectWalls+0x11c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4906      	ldr	r1, [pc, #24]	@ (8002f58 <detectWalls+0x120>)
 8002f40:	0112      	lsls	r2, r2, #4
 8002f42:	4413      	add	r3, r2
 8002f44:	2201      	movs	r2, #1
 8002f46:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200013c4 	.word	0x200013c4
 8002f54:	200013c0 	.word	0x200013c0
 8002f58:	2000220c 	.word	0x2000220c

08002f5c <recalculate>:

void recalculate()
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
    queueStart = 0;
 8002f62:	4bab      	ldr	r3, [pc, #684]	@ (8003210 <recalculate+0x2b4>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 8002f68:	4baa      	ldr	r3, [pc, #680]	@ (8003214 <recalculate+0x2b8>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	801a      	strh	r2, [r3, #0]

    // Mark all cells as -1, meaning that they have not had their Manhattan set yet
    for (int j = 0; j < 16; j++)
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
 8002f72:	e014      	b.n	8002f9e <recalculate+0x42>
    {
        for (int i = 0; i < 16; i++)
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	e00b      	b.n	8002f92 <recalculate+0x36>
        {
            Manhattans[i][j] = -1;
 8002f7a:	49a7      	ldr	r1, [pc, #668]	@ (8003218 <recalculate+0x2bc>)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	011a      	lsls	r2, r3, #4
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	4413      	add	r3, r2
 8002f84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002f88:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int i = 0; i < 16; i++)
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	3301      	adds	r3, #1
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	ddf0      	ble.n	8002f7a <recalculate+0x1e>
    for (int j = 0; j < 16; j++)
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b0f      	cmp	r3, #15
 8002fa2:	dde7      	ble.n	8002f74 <recalculate+0x18>
        }
    }

    if(goToCenter)
 8002fa4:	4b9d      	ldr	r3, [pc, #628]	@ (800321c <recalculate+0x2c0>)
 8002fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d030      	beq.n	8003010 <recalculate+0xb4>
    {
        // Set middle four manhattan distances to 0, and insert all 4 into queue (set middle as destination)
       Manhattans[7][7] = 0;
 8002fae:	4b9a      	ldr	r3, [pc, #616]	@ (8003218 <recalculate+0x2bc>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
       Manhattans[7][8] = 0;
 8002fb6:	4b98      	ldr	r3, [pc, #608]	@ (8003218 <recalculate+0x2bc>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
       Manhattans[8][7] = 0;
 8002fbe:	4b96      	ldr	r3, [pc, #600]	@ (8003218 <recalculate+0x2bc>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
       Manhattans[8][8] = 0;
 8002fc6:	4b94      	ldr	r3, [pc, #592]	@ (8003218 <recalculate+0x2bc>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
       insertQueue(newCell(7, 7));
 8002fce:	2107      	movs	r1, #7
 8002fd0:	2007      	movs	r0, #7
 8002fd2:	f7ff fded 	bl	8002bb0 <newCell>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fdff 	bl	8002bdc <insertQueue>
       insertQueue(newCell(7, 8));
 8002fde:	2108      	movs	r1, #8
 8002fe0:	2007      	movs	r0, #7
 8002fe2:	f7ff fde5 	bl	8002bb0 <newCell>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7ff fdf7 	bl	8002bdc <insertQueue>
       insertQueue(newCell(8, 7));
 8002fee:	2107      	movs	r1, #7
 8002ff0:	2008      	movs	r0, #8
 8002ff2:	f7ff fddd 	bl	8002bb0 <newCell>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f7ff fdef 	bl	8002bdc <insertQueue>
       insertQueue(newCell(8, 8));
 8002ffe:	2108      	movs	r1, #8
 8003000:	2008      	movs	r0, #8
 8003002:	f7ff fdd5 	bl	8002bb0 <newCell>
 8003006:	4603      	mov	r3, r0
 8003008:	4618      	mov	r0, r3
 800300a:	f7ff fde7 	bl	8002bdc <insertQueue>
 800300e:	e0f1      	b.n	80031f4 <recalculate+0x298>
    }

    else
    {
        // Set starting cell to 0, insert starting cell into queue (set start as destination)
        Manhattans[15][0] = 0;
 8003010:	4b81      	ldr	r3, [pc, #516]	@ (8003218 <recalculate+0x2bc>)
 8003012:	2200      	movs	r2, #0
 8003014:	f8a3 21e0 	strh.w	r2, [r3, #480]	@ 0x1e0
        insertQueue(newCell(15, 0));
 8003018:	2100      	movs	r1, #0
 800301a:	200f      	movs	r0, #15
 800301c:	f7ff fdc8 	bl	8002bb0 <newCell>
 8003020:	4603      	mov	r3, r0
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fdda 	bl	8002bdc <insertQueue>
    }


    //while queue is not empty
    while (queueStart != queueEnd) {
 8003028:	e0e4      	b.n	80031f4 <recalculate+0x298>

        struct Cell* currElement = queueFront();
 800302a:	f7ff fe1d 	bl	8002c68 <queueFront>
 800302e:	60f8      	str	r0, [r7, #12]

        int currRow = currElement->row;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60bb      	str	r3, [r7, #8]
        int currCol = currElement->col;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	607b      	str	r3, [r7, #4]

        // For all accessable neighbors with no set Manhattan distance, add cell to queue and set Manhattan to current Manhattan + 1

        //north wall
        if (currRow > 0 && horzWall[currRow][currCol] != 1 && Manhattans[currRow - 1][currCol] == -1) {
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	dd31      	ble.n	80030a6 <recalculate+0x14a>
 8003042:	4977      	ldr	r1, [pc, #476]	@ (8003220 <recalculate+0x2c4>)
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	011a      	lsls	r2, r3, #4
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4413      	add	r3, r2
 800304c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003050:	2b01      	cmp	r3, #1
 8003052:	d028      	beq.n	80030a6 <recalculate+0x14a>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	3b01      	subs	r3, #1
 8003058:	496f      	ldr	r1, [pc, #444]	@ (8003218 <recalculate+0x2bc>)
 800305a:	011a      	lsls	r2, r3, #4
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4413      	add	r3, r2
 8003060:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003068:	d11d      	bne.n	80030a6 <recalculate+0x14a>
            Manhattans[currRow - 1][currCol] = Manhattans[currRow][currCol] + 1;
 800306a:	496b      	ldr	r1, [pc, #428]	@ (8003218 <recalculate+0x2bc>)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	011a      	lsls	r2, r3, #4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4413      	add	r3, r2
 8003074:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003078:	b29b      	uxth	r3, r3
 800307a:	3301      	adds	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3b01      	subs	r3, #1
 8003082:	b210      	sxth	r0, r2
 8003084:	4964      	ldr	r1, [pc, #400]	@ (8003218 <recalculate+0x2bc>)
 8003086:	011a      	lsls	r2, r3, #4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4413      	add	r3, r2
 800308c:	4602      	mov	r2, r0
 800308e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow - 1, currCol));
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	3b01      	subs	r3, #1
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff fd89 	bl	8002bb0 <newCell>
 800309e:	4603      	mov	r3, r0
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff fd9b 	bl	8002bdc <insertQueue>
        }
        //east wall
        if (currCol < 15 && vertWall[currRow][currCol + 1] != 1 && Manhattans[currRow][currCol + 1] == -1) {
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b0e      	cmp	r3, #14
 80030aa:	dc34      	bgt.n	8003116 <recalculate+0x1ba>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	1c59      	adds	r1, r3, #1
 80030b0:	485c      	ldr	r0, [pc, #368]	@ (8003224 <recalculate+0x2c8>)
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	4613      	mov	r3, r2
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	4413      	add	r3, r2
 80030ba:	440b      	add	r3, r1
 80030bc:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d028      	beq.n	8003116 <recalculate+0x1ba>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3301      	adds	r3, #1
 80030c8:	4953      	ldr	r1, [pc, #332]	@ (8003218 <recalculate+0x2bc>)
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	4413      	add	r3, r2
 80030d0:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d11d      	bne.n	8003116 <recalculate+0x1ba>
            Manhattans[currRow][currCol + 1] = Manhattans[currRow][currCol] + 1;
 80030da:	494f      	ldr	r1, [pc, #316]	@ (8003218 <recalculate+0x2bc>)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	011a      	lsls	r2, r3, #4
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3301      	adds	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3301      	adds	r3, #1
 80030f2:	b210      	sxth	r0, r2
 80030f4:	4948      	ldr	r1, [pc, #288]	@ (8003218 <recalculate+0x2bc>)
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	0112      	lsls	r2, r2, #4
 80030fa:	4413      	add	r3, r2
 80030fc:	4602      	mov	r2, r0
 80030fe:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol + 1));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3301      	adds	r3, #1
 8003106:	4619      	mov	r1, r3
 8003108:	68b8      	ldr	r0, [r7, #8]
 800310a:	f7ff fd51 	bl	8002bb0 <newCell>
 800310e:	4603      	mov	r3, r0
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fd63 	bl	8002bdc <insertQueue>
        }
        //south wall
        if (currRow < 15 && horzWall[currRow + 1][currCol] != 1 && Manhattans[currRow + 1][currCol] == -1) {
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b0e      	cmp	r3, #14
 800311a:	dc32      	bgt.n	8003182 <recalculate+0x226>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	3301      	adds	r3, #1
 8003120:	493f      	ldr	r1, [pc, #252]	@ (8003220 <recalculate+0x2c4>)
 8003122:	011a      	lsls	r2, r3, #4
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d028      	beq.n	8003182 <recalculate+0x226>
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	3301      	adds	r3, #1
 8003134:	4938      	ldr	r1, [pc, #224]	@ (8003218 <recalculate+0x2bc>)
 8003136:	011a      	lsls	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d11d      	bne.n	8003182 <recalculate+0x226>
            Manhattans[currRow + 1][currCol] = Manhattans[currRow][currCol] + 1;
 8003146:	4934      	ldr	r1, [pc, #208]	@ (8003218 <recalculate+0x2bc>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	011a      	lsls	r2, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4413      	add	r3, r2
 8003150:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003154:	b29b      	uxth	r3, r3
 8003156:	3301      	adds	r3, #1
 8003158:	b29a      	uxth	r2, r3
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	3301      	adds	r3, #1
 800315e:	b210      	sxth	r0, r2
 8003160:	492d      	ldr	r1, [pc, #180]	@ (8003218 <recalculate+0x2bc>)
 8003162:	011a      	lsls	r2, r3, #4
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4413      	add	r3, r2
 8003168:	4602      	mov	r2, r0
 800316a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow + 1, currCol));
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	3301      	adds	r3, #1
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff fd1b 	bl	8002bb0 <newCell>
 800317a:	4603      	mov	r3, r0
 800317c:	4618      	mov	r0, r3
 800317e:	f7ff fd2d 	bl	8002bdc <insertQueue>
        }
        //west wall
        if (currCol > 0 && vertWall[currRow][currCol] != 1 && Manhattans[currRow][currCol - 1] == -1) {
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	dd33      	ble.n	80031f0 <recalculate+0x294>
 8003188:	4926      	ldr	r1, [pc, #152]	@ (8003224 <recalculate+0x2c8>)
 800318a:	68ba      	ldr	r2, [r7, #8]
 800318c:	4613      	mov	r3, r2
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	4413      	add	r3, r2
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d028      	beq.n	80031f0 <recalculate+0x294>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3b01      	subs	r3, #1
 80031a2:	491d      	ldr	r1, [pc, #116]	@ (8003218 <recalculate+0x2bc>)
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	0112      	lsls	r2, r2, #4
 80031a8:	4413      	add	r3, r2
 80031aa:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80031ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b2:	d11d      	bne.n	80031f0 <recalculate+0x294>
            Manhattans[currRow][currCol - 1] = Manhattans[currRow][currCol] + 1;
 80031b4:	4918      	ldr	r1, [pc, #96]	@ (8003218 <recalculate+0x2bc>)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	011a      	lsls	r2, r3, #4
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	3301      	adds	r3, #1
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b210      	sxth	r0, r2
 80031ce:	4912      	ldr	r1, [pc, #72]	@ (8003218 <recalculate+0x2bc>)
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	4413      	add	r3, r2
 80031d6:	4602      	mov	r2, r0
 80031d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol - 1));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3b01      	subs	r3, #1
 80031e0:	4619      	mov	r1, r3
 80031e2:	68b8      	ldr	r0, [r7, #8]
 80031e4:	f7ff fce4 	bl	8002bb0 <newCell>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7ff fcf6 	bl	8002bdc <insertQueue>
        }

        // Deletes cell from queue and frees memory
        popQueueFront();
 80031f0:	f7ff fd1c 	bl	8002c2c <popQueueFront>
    while (queueStart != queueEnd) {
 80031f4:	4b06      	ldr	r3, [pc, #24]	@ (8003210 <recalculate+0x2b4>)
 80031f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <recalculate+0x2b8>)
 80031fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003200:	429a      	cmp	r2, r3
 8003202:	f47f af12 	bne.w	800302a <recalculate+0xce>
    }
}
 8003206:	bf00      	nop
 8003208:	bf00      	nop
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	20001dc8 	.word	0x20001dc8
 8003214:	20001dca 	.word	0x20001dca
 8003218:	200013c8 	.word	0x200013c8
 800321c:	20000000 	.word	0x20000000
 8003220:	20001dcc 	.word	0x20001dcc
 8003224:	20001fec 	.word	0x20001fec

08003228 <solver>:

Action solver(Algorithm alg) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	71fb      	strb	r3, [r7, #7]
    switch (alg)
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <solver+0x16>
 8003238:	2b01      	cmp	r3, #1
 800323a:	d004      	beq.n	8003246 <solver+0x1e>
 800323c:	e007      	b.n	800324e <solver+0x26>
    {
    case DEAD:
    	return deadReckoning();
 800323e:	f000 f80b 	bl	8003258 <deadReckoning>
 8003242:	4603      	mov	r3, r0
 8003244:	e004      	b.n	8003250 <solver+0x28>
    	break;
    case FLOODFILL:
    	return floodFill();
 8003246:	f000 f81b 	bl	8003280 <floodFill>
 800324a:	4603      	mov	r3, r0
 800324c:	e000      	b.n	8003250 <solver+0x28>
    	break;
    default:
    	return FORWARD;
 800324e:	2301      	movs	r3, #1
    }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <deadReckoning>:

Action deadReckoning() {       // The simple left wall following algorithm that they provided
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
	if (!frontWallCheck())
 800325c:	f000 fc62 	bl	8003b24 <frontWallCheck>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <deadReckoning+0x12>
	{
		return FORWARD;
 8003266:	2301      	movs	r3, #1
 8003268:	e007      	b.n	800327a <deadReckoning+0x22>
	}
	else if (!rightWallCheck())
 800326a:	f000 fc37 	bl	8003adc <rightWallCheck>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d101      	bne.n	8003278 <deadReckoning+0x20>
	{
		return RIGHT;
 8003274:	2302      	movs	r3, #2
 8003276:	e000      	b.n	800327a <deadReckoning+0x22>
	}
	else
	{
		return LEFT;
 8003278:	2300      	movs	r3, #0
	}
}
 800327a:	4618      	mov	r0, r3
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <floodFill>:

Action floodFill() {
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af00      	add	r7, sp, #0
    // Initializes all the elements and calculates Manhattan distances
    if (!initialized)
 8003286:	4b9b      	ldr	r3, [pc, #620]	@ (80034f4 <floodFill+0x274>)
 8003288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d106      	bne.n	800329e <floodFill+0x1e>
    {
        initElements();
 8003290:	f7ff fcfc 	bl	8002c8c <initElements>
        recalculate();
 8003294:	f7ff fe62 	bl	8002f5c <recalculate>
        initialized = 1;
 8003298:	4b96      	ldr	r3, [pc, #600]	@ (80034f4 <floodFill+0x274>)
 800329a:	2201      	movs	r2, #1
 800329c:	801a      	strh	r2, [r3, #0]
    }

    // Lights up detected walls and adds them to the 2D wall arrays
    detectWalls();
 800329e:	f7ff fdcb 	bl	8002e38 <detectWalls>

    // Display all Manhattan distances in the API dispaly

    int row = currPos->row;
 80032a2:	4b95      	ldr	r3, [pc, #596]	@ (80034f8 <floodFill+0x278>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
    int col = currPos->col;
 80032aa:	4b93      	ldr	r3, [pc, #588]	@ (80034f8 <floodFill+0x278>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	617b      	str	r3, [r7, #20]

    // If goal has already been reached, set new destination to either middle or starting cell
    if (Manhattans[row][col] == 0)
 80032b2:	4992      	ldr	r1, [pc, #584]	@ (80034fc <floodFill+0x27c>)
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	011a      	lsls	r2, r3, #4
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	4413      	add	r3, r2
 80032bc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10f      	bne.n	80032e4 <floodFill+0x64>
//		{
//			saveMaze();
//		}
//    	TODO

        if (goToCenter)
 80032c4:	4b8e      	ldr	r3, [pc, #568]	@ (8003500 <floodFill+0x280>)
 80032c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <floodFill+0x56>
            goToCenter = 0; // Destination is now Starting Cell
 80032ce:	4b8c      	ldr	r3, [pc, #560]	@ (8003500 <floodFill+0x280>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	801a      	strh	r2, [r3, #0]
 80032d4:	e002      	b.n	80032dc <floodFill+0x5c>
        else
            goToCenter = 1; // Destination is now middle four
 80032d6:	4b8a      	ldr	r3, [pc, #552]	@ (8003500 <floodFill+0x280>)
 80032d8:	2201      	movs	r2, #1
 80032da:	801a      	strh	r2, [r3, #0]

        recalculate();
 80032dc:	f7ff fe3e 	bl	8002f5c <recalculate>
        return IDLE;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e11c      	b.n	800351e <floodFill+0x29e>
    }

    int northBlocked = horzWall[row][col];
 80032e4:	4987      	ldr	r1, [pc, #540]	@ (8003504 <floodFill+0x284>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	011a      	lsls	r2, r3, #4
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	4413      	add	r3, r2
 80032ee:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80032f2:	613b      	str	r3, [r7, #16]
    int eastBlocked = vertWall[row][col + 1];
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	1c59      	adds	r1, r3, #1
 80032f8:	4883      	ldr	r0, [pc, #524]	@ (8003508 <floodFill+0x288>)
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	4413      	add	r3, r2
 8003302:	440b      	add	r3, r1
 8003304:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003308:	60fb      	str	r3, [r7, #12]
    int southBlocked = horzWall[row + 1][col];
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3301      	adds	r3, #1
 800330e:	497d      	ldr	r1, [pc, #500]	@ (8003504 <floodFill+0x284>)
 8003310:	011a      	lsls	r2, r3, #4
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	4413      	add	r3, r2
 8003316:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800331a:	60bb      	str	r3, [r7, #8]
    int westBlocked = vertWall[row][col];
 800331c:	497a      	ldr	r1, [pc, #488]	@ (8003508 <floodFill+0x288>)
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	4413      	add	r3, r2
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	4413      	add	r3, r2
 800332a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800332e:	607b      	str	r3, [r7, #4]

    // Find next heading
    int nextHead = -1;
 8003330:	f04f 33ff 	mov.w	r3, #4294967295
 8003334:	61fb      	str	r3, [r7, #28]

    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d016      	beq.n	800336a <floodFill+0xea>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	3b01      	subs	r3, #1
 8003340:	496e      	ldr	r1, [pc, #440]	@ (80034fc <floodFill+0x27c>)
 8003342:	011a      	lsls	r2, r3, #4
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	4413      	add	r3, r2
 8003348:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 800334c:	486b      	ldr	r0, [pc, #428]	@ (80034fc <floodFill+0x27c>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	0119      	lsls	r1, r3, #4
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	440b      	add	r3, r1
 8003356:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800335a:	429a      	cmp	r2, r3
 800335c:	da05      	bge.n	800336a <floodFill+0xea>
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <floodFill+0xea>
        nextHead = NORTH;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	e04c      	b.n	8003404 <floodFill+0x184>
    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b0f      	cmp	r3, #15
 800336e:	d016      	beq.n	800339e <floodFill+0x11e>
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	3301      	adds	r3, #1
 8003374:	4961      	ldr	r1, [pc, #388]	@ (80034fc <floodFill+0x27c>)
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	0112      	lsls	r2, r2, #4
 800337a:	4413      	add	r3, r2
 800337c:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003380:	485e      	ldr	r0, [pc, #376]	@ (80034fc <floodFill+0x27c>)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	0119      	lsls	r1, r3, #4
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	440b      	add	r3, r1
 800338a:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800338e:	429a      	cmp	r2, r3
 8003390:	da05      	bge.n	800339e <floodFill+0x11e>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d102      	bne.n	800339e <floodFill+0x11e>
        nextHead = EAST;
 8003398:	2301      	movs	r3, #1
 800339a:	61fb      	str	r3, [r7, #28]
 800339c:	e032      	b.n	8003404 <floodFill+0x184>
    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b0f      	cmp	r3, #15
 80033a2:	d016      	beq.n	80033d2 <floodFill+0x152>
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	3301      	adds	r3, #1
 80033a8:	4954      	ldr	r1, [pc, #336]	@ (80034fc <floodFill+0x27c>)
 80033aa:	011a      	lsls	r2, r3, #4
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	4413      	add	r3, r2
 80033b0:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80033b4:	4851      	ldr	r0, [pc, #324]	@ (80034fc <floodFill+0x27c>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	0119      	lsls	r1, r3, #4
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	440b      	add	r3, r1
 80033be:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80033c2:	429a      	cmp	r2, r3
 80033c4:	da05      	bge.n	80033d2 <floodFill+0x152>
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d102      	bne.n	80033d2 <floodFill+0x152>
        nextHead = SOUTH;
 80033cc:	2302      	movs	r3, #2
 80033ce:	61fb      	str	r3, [r7, #28]
 80033d0:	e018      	b.n	8003404 <floodFill+0x184>
    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d015      	beq.n	8003404 <floodFill+0x184>
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3b01      	subs	r3, #1
 80033dc:	4947      	ldr	r1, [pc, #284]	@ (80034fc <floodFill+0x27c>)
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	0112      	lsls	r2, r2, #4
 80033e2:	4413      	add	r3, r2
 80033e4:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80033e8:	4844      	ldr	r0, [pc, #272]	@ (80034fc <floodFill+0x27c>)
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	0119      	lsls	r1, r3, #4
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	440b      	add	r3, r1
 80033f2:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	da04      	bge.n	8003404 <floodFill+0x184>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <floodFill+0x184>
        nextHead = WEST;
 8003400:	2303      	movs	r3, #3
 8003402:	61fb      	str	r3, [r7, #28]

    // If no path available, then recalculta
    if (nextHead == -1)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800340a:	d103      	bne.n	8003414 <floodFill+0x194>
    {
        recalculate();
 800340c:	f7ff fda6 	bl	8002f5c <recalculate>
        return IDLE;
 8003410:	2303      	movs	r3, #3
 8003412:	e084      	b.n	800351e <floodFill+0x29e>
    }

    // If next heading is in same direction, move forward
    if (nextHead == currHead)
 8003414:	4b3d      	ldr	r3, [pc, #244]	@ (800350c <floodFill+0x28c>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	461a      	mov	r2, r3
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4293      	cmp	r3, r2
 800341e:	d129      	bne.n	8003474 <floodFill+0x1f4>
    {
        switch (currHead)
 8003420:	4b3a      	ldr	r3, [pc, #232]	@ (800350c <floodFill+0x28c>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b03      	cmp	r3, #3
 8003426:	d823      	bhi.n	8003470 <floodFill+0x1f0>
 8003428:	a201      	add	r2, pc, #4	@ (adr r2, 8003430 <floodFill+0x1b0>)
 800342a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003441 	.word	0x08003441
 8003434:	0800344d 	.word	0x0800344d
 8003438:	08003459 	.word	0x08003459
 800343c:	08003465 	.word	0x08003465
        {
        case NORTH:
            currPos->row--;
 8003440:	4b2d      	ldr	r3, [pc, #180]	@ (80034f8 <floodFill+0x278>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	3a01      	subs	r2, #1
 8003448:	601a      	str	r2, [r3, #0]
            break;
 800344a:	e011      	b.n	8003470 <floodFill+0x1f0>
        case EAST:
            currPos->col++;
 800344c:	4b2a      	ldr	r3, [pc, #168]	@ (80034f8 <floodFill+0x278>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	685a      	ldr	r2, [r3, #4]
 8003452:	3201      	adds	r2, #1
 8003454:	605a      	str	r2, [r3, #4]
            break;
 8003456:	e00b      	b.n	8003470 <floodFill+0x1f0>
        case SOUTH:
            currPos->row++;
 8003458:	4b27      	ldr	r3, [pc, #156]	@ (80034f8 <floodFill+0x278>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	3201      	adds	r2, #1
 8003460:	601a      	str	r2, [r3, #0]
            break;
 8003462:	e005      	b.n	8003470 <floodFill+0x1f0>
        case WEST:
            currPos->col--;
 8003464:	4b24      	ldr	r3, [pc, #144]	@ (80034f8 <floodFill+0x278>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	3a01      	subs	r2, #1
 800346c:	605a      	str	r2, [r3, #4]
            break;
 800346e:	bf00      	nop
        }
        return FORWARD;
 8003470:	2301      	movs	r3, #1
 8003472:	e054      	b.n	800351e <floodFill+0x29e>
    }

    // If next heading is in opposite direction, turn right
    if ((nextHead - currHead) % 2 == 0)
 8003474:	4b25      	ldr	r3, [pc, #148]	@ (800350c <floodFill+0x28c>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10f      	bne.n	80034a6 <floodFill+0x226>
    {
        if (currHead == WEST)
 8003486:	4b21      	ldr	r3, [pc, #132]	@ (800350c <floodFill+0x28c>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b03      	cmp	r3, #3
 800348c:	d103      	bne.n	8003496 <floodFill+0x216>
            currHead = NORTH;
 800348e:	4b1f      	ldr	r3, [pc, #124]	@ (800350c <floodFill+0x28c>)
 8003490:	2200      	movs	r2, #0
 8003492:	701a      	strb	r2, [r3, #0]
 8003494:	e005      	b.n	80034a2 <floodFill+0x222>
        else
            currHead++;
 8003496:	4b1d      	ldr	r3, [pc, #116]	@ (800350c <floodFill+0x28c>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	3301      	adds	r3, #1
 800349c:	b2da      	uxtb	r2, r3
 800349e:	4b1b      	ldr	r3, [pc, #108]	@ (800350c <floodFill+0x28c>)
 80034a0:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 80034a2:	2302      	movs	r3, #2
 80034a4:	e03b      	b.n	800351e <floodFill+0x29e>
    }

    // If next heading is right, turn right
    if ((nextHead - currHead) == 1 || nextHead - currHead == -3)
 80034a6:	4b19      	ldr	r3, [pc, #100]	@ (800350c <floodFill+0x28c>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	1a9b      	subs	r3, r3, r2
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d007      	beq.n	80034c4 <floodFill+0x244>
 80034b4:	4b15      	ldr	r3, [pc, #84]	@ (800350c <floodFill+0x28c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	f113 0f03 	cmn.w	r3, #3
 80034c2:	d10f      	bne.n	80034e4 <floodFill+0x264>
    {
        if (currHead == WEST)
 80034c4:	4b11      	ldr	r3, [pc, #68]	@ (800350c <floodFill+0x28c>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b03      	cmp	r3, #3
 80034ca:	d103      	bne.n	80034d4 <floodFill+0x254>
            currHead = NORTH;
 80034cc:	4b0f      	ldr	r3, [pc, #60]	@ (800350c <floodFill+0x28c>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	e005      	b.n	80034e0 <floodFill+0x260>
        else
            currHead++;
 80034d4:	4b0d      	ldr	r3, [pc, #52]	@ (800350c <floodFill+0x28c>)
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	3301      	adds	r3, #1
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <floodFill+0x28c>)
 80034de:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 80034e0:	2302      	movs	r3, #2
 80034e2:	e01c      	b.n	800351e <floodFill+0x29e>
    }

    // else, turn left
    if (currHead == NORTH)
 80034e4:	4b09      	ldr	r3, [pc, #36]	@ (800350c <floodFill+0x28c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d111      	bne.n	8003510 <floodFill+0x290>
        currHead = WEST;
 80034ec:	4b07      	ldr	r3, [pc, #28]	@ (800350c <floodFill+0x28c>)
 80034ee:	2203      	movs	r2, #3
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	e013      	b.n	800351c <floodFill+0x29c>
 80034f4:	200013bc 	.word	0x200013bc
 80034f8:	200013c0 	.word	0x200013c0
 80034fc:	200013c8 	.word	0x200013c8
 8003500:	20000000 	.word	0x20000000
 8003504:	20001dcc 	.word	0x20001dcc
 8003508:	20001fec 	.word	0x20001fec
 800350c:	200013c4 	.word	0x200013c4
    else
        currHead--;
 8003510:	4b05      	ldr	r3, [pc, #20]	@ (8003528 <floodFill+0x2a8>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	3b01      	subs	r3, #1
 8003516:	b2da      	uxtb	r2, r3
 8003518:	4b03      	ldr	r3, [pc, #12]	@ (8003528 <floodFill+0x2a8>)
 800351a:	701a      	strb	r2, [r3, #0]
    return LEFT;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200013c4 	.word	0x200013c4

0800352c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	607b      	str	r3, [r7, #4]
 8003536:	4b0f      	ldr	r3, [pc, #60]	@ (8003574 <HAL_MspInit+0x48>)
 8003538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800353a:	4a0e      	ldr	r2, [pc, #56]	@ (8003574 <HAL_MspInit+0x48>)
 800353c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003540:	6453      	str	r3, [r2, #68]	@ 0x44
 8003542:	4b0c      	ldr	r3, [pc, #48]	@ (8003574 <HAL_MspInit+0x48>)
 8003544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003546:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800354a:	607b      	str	r3, [r7, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	4b08      	ldr	r3, [pc, #32]	@ (8003574 <HAL_MspInit+0x48>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	4a07      	ldr	r2, [pc, #28]	@ (8003574 <HAL_MspInit+0x48>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800355c:	6413      	str	r3, [r2, #64]	@ 0x40
 800355e:	4b05      	ldr	r3, [pc, #20]	@ (8003574 <HAL_MspInit+0x48>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	40023800 	.word	0x40023800

08003578 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b08a      	sub	sp, #40	@ 0x28
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003580:	f107 0314 	add.w	r3, r7, #20
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
 800358e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a3c      	ldr	r2, [pc, #240]	@ (8003688 <HAL_ADC_MspInit+0x110>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d171      	bne.n	800367e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	4b3b      	ldr	r3, [pc, #236]	@ (800368c <HAL_ADC_MspInit+0x114>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	4a3a      	ldr	r2, [pc, #232]	@ (800368c <HAL_ADC_MspInit+0x114>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80035aa:	4b38      	ldr	r3, [pc, #224]	@ (800368c <HAL_ADC_MspInit+0x114>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	4b34      	ldr	r3, [pc, #208]	@ (800368c <HAL_ADC_MspInit+0x114>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	4a33      	ldr	r2, [pc, #204]	@ (800368c <HAL_ADC_MspInit+0x114>)
 80035c0:	f043 0304 	orr.w	r3, r3, #4
 80035c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c6:	4b31      	ldr	r3, [pc, #196]	@ (800368c <HAL_ADC_MspInit+0x114>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	60bb      	str	r3, [r7, #8]
 80035d6:	4b2d      	ldr	r3, [pc, #180]	@ (800368c <HAL_ADC_MspInit+0x114>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035da:	4a2c      	ldr	r2, [pc, #176]	@ (800368c <HAL_ADC_MspInit+0x114>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80035e2:	4b2a      	ldr	r3, [pc, #168]	@ (800368c <HAL_ADC_MspInit+0x114>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	60bb      	str	r3, [r7, #8]
 80035ec:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 80035ee:	2303      	movs	r3, #3
 80035f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035f2:	2303      	movs	r3, #3
 80035f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035fa:	f107 0314 	add.w	r3, r7, #20
 80035fe:	4619      	mov	r1, r3
 8003600:	4823      	ldr	r0, [pc, #140]	@ (8003690 <HAL_ADC_MspInit+0x118>)
 8003602:	f001 fbbf 	bl	8004d84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 8003606:	2360      	movs	r3, #96	@ 0x60
 8003608:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800360a:	2303      	movs	r3, #3
 800360c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003612:	f107 0314 	add.w	r3, r7, #20
 8003616:	4619      	mov	r1, r3
 8003618:	481e      	ldr	r0, [pc, #120]	@ (8003694 <HAL_ADC_MspInit+0x11c>)
 800361a:	f001 fbb3 	bl	8004d84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800361e:	4b1e      	ldr	r3, [pc, #120]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 8003620:	4a1e      	ldr	r2, [pc, #120]	@ (800369c <HAL_ADC_MspInit+0x124>)
 8003622:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003624:	4b1c      	ldr	r3, [pc, #112]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 8003626:	2200      	movs	r2, #0
 8003628:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800362a:	4b1b      	ldr	r3, [pc, #108]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003630:	4b19      	ldr	r3, [pc, #100]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003636:	4b18      	ldr	r3, [pc, #96]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 8003638:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800363c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800363e:	4b16      	ldr	r3, [pc, #88]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 8003640:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003644:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003646:	4b14      	ldr	r3, [pc, #80]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 8003648:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800364c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800364e:	4b12      	ldr	r3, [pc, #72]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 8003650:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003654:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003656:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 8003658:	2200      	movs	r2, #0
 800365a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800365c:	4b0e      	ldr	r3, [pc, #56]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 800365e:	2200      	movs	r2, #0
 8003660:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003662:	480d      	ldr	r0, [pc, #52]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 8003664:	f001 f822 	bl	80046ac <HAL_DMA_Init>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800366e:	f7fe fe09 	bl	8002284 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a08      	ldr	r2, [pc, #32]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 8003676:	639a      	str	r2, [r3, #56]	@ 0x38
 8003678:	4a07      	ldr	r2, [pc, #28]	@ (8003698 <HAL_ADC_MspInit+0x120>)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800367e:	bf00      	nop
 8003680:	3728      	adds	r7, #40	@ 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40012000 	.word	0x40012000
 800368c:	40023800 	.word	0x40023800
 8003690:	40020800 	.word	0x40020800
 8003694:	40020000 	.word	0x40020000
 8003698:	200000d4 	.word	0x200000d4
 800369c:	40026410 	.word	0x40026410

080036a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08a      	sub	sp, #40	@ 0x28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a8:	f107 0314 	add.w	r3, r7, #20
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	609a      	str	r2, [r3, #8]
 80036b4:	60da      	str	r2, [r3, #12]
 80036b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a19      	ldr	r2, [pc, #100]	@ (8003724 <HAL_I2C_MspInit+0x84>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d12b      	bne.n	800371a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	4b18      	ldr	r3, [pc, #96]	@ (8003728 <HAL_I2C_MspInit+0x88>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ca:	4a17      	ldr	r2, [pc, #92]	@ (8003728 <HAL_I2C_MspInit+0x88>)
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80036d2:	4b15      	ldr	r3, [pc, #84]	@ (8003728 <HAL_I2C_MspInit+0x88>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036de:	23c0      	movs	r3, #192	@ 0xc0
 80036e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036e2:	2312      	movs	r3, #18
 80036e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036e6:	2300      	movs	r3, #0
 80036e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036ea:	2303      	movs	r3, #3
 80036ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80036ee:	2304      	movs	r3, #4
 80036f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f2:	f107 0314 	add.w	r3, r7, #20
 80036f6:	4619      	mov	r1, r3
 80036f8:	480c      	ldr	r0, [pc, #48]	@ (800372c <HAL_I2C_MspInit+0x8c>)
 80036fa:	f001 fb43 	bl	8004d84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	4b09      	ldr	r3, [pc, #36]	@ (8003728 <HAL_I2C_MspInit+0x88>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	4a08      	ldr	r2, [pc, #32]	@ (8003728 <HAL_I2C_MspInit+0x88>)
 8003708:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800370c:	6413      	str	r3, [r2, #64]	@ 0x40
 800370e:	4b06      	ldr	r3, [pc, #24]	@ (8003728 <HAL_I2C_MspInit+0x88>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800371a:	bf00      	nop
 800371c:	3728      	adds	r7, #40	@ 0x28
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40005400 	.word	0x40005400
 8003728:	40023800 	.word	0x40023800
 800372c:	40020400 	.word	0x40020400

08003730 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a0e      	ldr	r2, [pc, #56]	@ (8003778 <HAL_TIM_PWM_MspInit+0x48>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d115      	bne.n	800376e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003742:	2300      	movs	r3, #0
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	4b0d      	ldr	r3, [pc, #52]	@ (800377c <HAL_TIM_PWM_MspInit+0x4c>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374a:	4a0c      	ldr	r2, [pc, #48]	@ (800377c <HAL_TIM_PWM_MspInit+0x4c>)
 800374c:	f043 0301 	orr.w	r3, r3, #1
 8003750:	6453      	str	r3, [r2, #68]	@ 0x44
 8003752:	4b0a      	ldr	r3, [pc, #40]	@ (800377c <HAL_TIM_PWM_MspInit+0x4c>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800375e:	2200      	movs	r2, #0
 8003760:	2100      	movs	r1, #0
 8003762:	2019      	movs	r0, #25
 8003764:	f000 ff6b 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003768:	2019      	movs	r0, #25
 800376a:	f000 ff84 	bl	8004676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000
 800377c:	40023800 	.word	0x40023800

08003780 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	@ 0x30
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003788:	f107 031c 	add.w	r3, r7, #28
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	605a      	str	r2, [r3, #4]
 8003792:	609a      	str	r2, [r3, #8]
 8003794:	60da      	str	r2, [r3, #12]
 8003796:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a32      	ldr	r2, [pc, #200]	@ (8003868 <HAL_TIM_Encoder_MspInit+0xe8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d12c      	bne.n	80037fc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	4b31      	ldr	r3, [pc, #196]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	4a30      	ldr	r2, [pc, #192]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 80037ac:	f043 0302 	orr.w	r3, r3, #2
 80037b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b2:	4b2e      	ldr	r3, [pc, #184]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	4b2a      	ldr	r3, [pc, #168]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	4a29      	ldr	r2, [pc, #164]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ce:	4b27      	ldr	r3, [pc, #156]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 80037da:	2330      	movs	r3, #48	@ 0x30
 80037dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037de:	2302      	movs	r3, #2
 80037e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e2:	2300      	movs	r3, #0
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e6:	2300      	movs	r3, #0
 80037e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037ea:	2302      	movs	r3, #2
 80037ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037ee:	f107 031c 	add.w	r3, r7, #28
 80037f2:	4619      	mov	r1, r3
 80037f4:	481e      	ldr	r0, [pc, #120]	@ (8003870 <HAL_TIM_Encoder_MspInit+0xf0>)
 80037f6:	f001 fac5 	bl	8004d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80037fa:	e030      	b.n	800385e <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a1c      	ldr	r2, [pc, #112]	@ (8003874 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d12b      	bne.n	800385e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	4b18      	ldr	r3, [pc, #96]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 800380c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380e:	4a17      	ldr	r2, [pc, #92]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 8003810:	f043 0302 	orr.w	r3, r3, #2
 8003814:	6453      	str	r3, [r2, #68]	@ 0x44
 8003816:	4b15      	ldr	r3, [pc, #84]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003822:	2300      	movs	r3, #0
 8003824:	60fb      	str	r3, [r7, #12]
 8003826:	4b11      	ldr	r3, [pc, #68]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 8003828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382a:	4a10      	ldr	r2, [pc, #64]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 800382c:	f043 0304 	orr.w	r3, r3, #4
 8003830:	6313      	str	r3, [r2, #48]	@ 0x30
 8003832:	4b0e      	ldr	r3, [pc, #56]	@ (800386c <HAL_TIM_Encoder_MspInit+0xec>)
 8003834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 800383e:	23c0      	movs	r3, #192	@ 0xc0
 8003840:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003842:	2302      	movs	r3, #2
 8003844:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003846:	2300      	movs	r3, #0
 8003848:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800384a:	2300      	movs	r3, #0
 800384c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800384e:	2303      	movs	r3, #3
 8003850:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003852:	f107 031c 	add.w	r3, r7, #28
 8003856:	4619      	mov	r1, r3
 8003858:	4807      	ldr	r0, [pc, #28]	@ (8003878 <HAL_TIM_Encoder_MspInit+0xf8>)
 800385a:	f001 fa93 	bl	8004d84 <HAL_GPIO_Init>
}
 800385e:	bf00      	nop
 8003860:	3730      	adds	r7, #48	@ 0x30
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40000400 	.word	0x40000400
 800386c:	40023800 	.word	0x40023800
 8003870:	40020400 	.word	0x40020400
 8003874:	40010400 	.word	0x40010400
 8003878:	40020800 	.word	0x40020800

0800387c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a1c      	ldr	r2, [pc, #112]	@ (80038fc <HAL_TIM_Base_MspInit+0x80>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d116      	bne.n	80038bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b1b      	ldr	r3, [pc, #108]	@ (8003900 <HAL_TIM_Base_MspInit+0x84>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	4a1a      	ldr	r2, [pc, #104]	@ (8003900 <HAL_TIM_Base_MspInit+0x84>)
 8003898:	f043 0320 	orr.w	r3, r3, #32
 800389c:	6413      	str	r3, [r2, #64]	@ 0x40
 800389e:	4b18      	ldr	r3, [pc, #96]	@ (8003900 <HAL_TIM_Base_MspInit+0x84>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	f003 0320 	and.w	r3, r3, #32
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80038aa:	2200      	movs	r2, #0
 80038ac:	2100      	movs	r1, #0
 80038ae:	2037      	movs	r0, #55	@ 0x37
 80038b0:	f000 fec5 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038b4:	2037      	movs	r0, #55	@ 0x37
 80038b6:	f000 fede 	bl	8004676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80038ba:	e01a      	b.n	80038f2 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a10      	ldr	r2, [pc, #64]	@ (8003904 <HAL_TIM_Base_MspInit+0x88>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d115      	bne.n	80038f2 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80038c6:	2300      	movs	r3, #0
 80038c8:	60bb      	str	r3, [r7, #8]
 80038ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <HAL_TIM_Base_MspInit+0x84>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003900 <HAL_TIM_Base_MspInit+0x84>)
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80038d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003900 <HAL_TIM_Base_MspInit+0x84>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038de:	60bb      	str	r3, [r7, #8]
 80038e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80038e2:	2200      	movs	r2, #0
 80038e4:	2100      	movs	r1, #0
 80038e6:	2019      	movs	r0, #25
 80038e8:	f000 fea9 	bl	800463e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80038ec:	2019      	movs	r0, #25
 80038ee:	f000 fec2 	bl	8004676 <HAL_NVIC_EnableIRQ>
}
 80038f2:	bf00      	nop
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40001400 	.word	0x40001400
 8003900:	40023800 	.word	0x40023800
 8003904:	40014400 	.word	0x40014400

08003908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003910:	f107 030c 	add.w	r3, r7, #12
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	609a      	str	r2, [r3, #8]
 800391c:	60da      	str	r2, [r3, #12]
 800391e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a12      	ldr	r2, [pc, #72]	@ (8003970 <HAL_TIM_MspPostInit+0x68>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d11e      	bne.n	8003968 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	4b11      	ldr	r3, [pc, #68]	@ (8003974 <HAL_TIM_MspPostInit+0x6c>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003932:	4a10      	ldr	r2, [pc, #64]	@ (8003974 <HAL_TIM_MspPostInit+0x6c>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6313      	str	r3, [r2, #48]	@ 0x30
 800393a:	4b0e      	ldr	r3, [pc, #56]	@ (8003974 <HAL_TIM_MspPostInit+0x6c>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	60bb      	str	r3, [r7, #8]
 8003944:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8003946:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800394a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394c:	2302      	movs	r3, #2
 800394e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003950:	2300      	movs	r3, #0
 8003952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003954:	2300      	movs	r3, #0
 8003956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003958:	2301      	movs	r3, #1
 800395a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395c:	f107 030c 	add.w	r3, r7, #12
 8003960:	4619      	mov	r1, r3
 8003962:	4805      	ldr	r0, [pc, #20]	@ (8003978 <HAL_TIM_MspPostInit+0x70>)
 8003964:	f001 fa0e 	bl	8004d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003968:	bf00      	nop
 800396a:	3720      	adds	r7, #32
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40010000 	.word	0x40010000
 8003974:	40023800 	.word	0x40023800
 8003978:	40020000 	.word	0x40020000

0800397c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003980:	bf00      	nop
 8003982:	e7fd      	b.n	8003980 <NMI_Handler+0x4>

08003984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003988:	bf00      	nop
 800398a:	e7fd      	b.n	8003988 <HardFault_Handler+0x4>

0800398c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003990:	bf00      	nop
 8003992:	e7fd      	b.n	8003990 <MemManage_Handler+0x4>

08003994 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003998:	bf00      	nop
 800399a:	e7fd      	b.n	8003998 <BusFault_Handler+0x4>

0800399c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039a0:	bf00      	nop
 80039a2:	e7fd      	b.n	80039a0 <UsageFault_Handler+0x4>

080039a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039a8:	bf00      	nop
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bc80      	pop	{r7}
 80039ba:	4770      	bx	lr

080039bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039c0:	bf00      	nop
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039cc:	f000 f968 	bl	8003ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039d0:	bf00      	nop
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039d8:	4803      	ldr	r0, [pc, #12]	@ (80039e8 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80039da:	f003 fc95 	bl	8007308 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80039de:	4803      	ldr	r0, [pc, #12]	@ (80039ec <TIM1_UP_TIM10_IRQHandler+0x18>)
 80039e0:	f003 fc92 	bl	8007308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20000188 	.word	0x20000188
 80039ec:	200002a8 	.word	0x200002a8

080039f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80039f4:	4803      	ldr	r0, [pc, #12]	@ (8003a04 <TIM7_IRQHandler+0x14>)
 80039f6:	f003 fc87 	bl	8007308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  interruptRoutine();
 80039fa:	f7fd ff11 	bl	8001820 <interruptRoutine>
  /* USER CODE END TIM7_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	20000218 	.word	0x20000218

08003a08 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a0c:	4802      	ldr	r0, [pc, #8]	@ (8003a18 <DMA2_Stream0_IRQHandler+0x10>)
 8003a0e:	f000 ff53 	bl	80048b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200000d4 	.word	0x200000d4

08003a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b086      	sub	sp, #24
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a24:	4a14      	ldr	r2, [pc, #80]	@ (8003a78 <_sbrk+0x5c>)
 8003a26:	4b15      	ldr	r3, [pc, #84]	@ (8003a7c <_sbrk+0x60>)
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a30:	4b13      	ldr	r3, [pc, #76]	@ (8003a80 <_sbrk+0x64>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a38:	4b11      	ldr	r3, [pc, #68]	@ (8003a80 <_sbrk+0x64>)
 8003a3a:	4a12      	ldr	r2, [pc, #72]	@ (8003a84 <_sbrk+0x68>)
 8003a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a3e:	4b10      	ldr	r3, [pc, #64]	@ (8003a80 <_sbrk+0x64>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4413      	add	r3, r2
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d207      	bcs.n	8003a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a4c:	f004 fa6a 	bl	8007f24 <__errno>
 8003a50:	4603      	mov	r3, r0
 8003a52:	220c      	movs	r2, #12
 8003a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	e009      	b.n	8003a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a5c:	4b08      	ldr	r3, [pc, #32]	@ (8003a80 <_sbrk+0x64>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a62:	4b07      	ldr	r3, [pc, #28]	@ (8003a80 <_sbrk+0x64>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	4a05      	ldr	r2, [pc, #20]	@ (8003a80 <_sbrk+0x64>)
 8003a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20020000 	.word	0x20020000
 8003a7c:	00000400 	.word	0x00000400
 8003a80:	2000240c 	.word	0x2000240c
 8003a84:	20002568 	.word	0x20002568

08003a88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr

08003a94 <leftWallCheck>:

void setLeftWall(int wall) { left_wall_threshold = wall; }
void setRightWall(int wall) { right_wall_threshold = wall; }
void setFrontWall(int wall) { front_wall_threshold = wall; }

int16_t leftWallCheck() {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
	if (ir_left > left_wall_threshold) {
 8003a98:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <leftWallCheck+0x3c>)
 8003a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7fd f8f2 	bl	8000c88 <__aeabi_i2f>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <leftWallCheck+0x40>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4610      	mov	r0, r2
 8003aae:	f7fd fadd 	bl	800106c <__aeabi_fcmplt>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <leftWallCheck+0x2c>
		left_wall = 1;
 8003ab8:	4b07      	ldr	r3, [pc, #28]	@ (8003ad8 <leftWallCheck+0x44>)
 8003aba:	2201      	movs	r2, #1
 8003abc:	801a      	strh	r2, [r3, #0]
 8003abe:	e002      	b.n	8003ac6 <leftWallCheck+0x32>
	}
	else {
		left_wall = 0;
 8003ac0:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <leftWallCheck+0x44>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	801a      	strh	r2, [r3, #0]
	}
	return left_wall;
 8003ac6:	4b04      	ldr	r3, [pc, #16]	@ (8003ad8 <leftWallCheck+0x44>)
 8003ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000008 	.word	0x20000008
 8003ad4:	200002f8 	.word	0x200002f8
 8003ad8:	20002410 	.word	0x20002410

08003adc <rightWallCheck>:

int16_t rightWallCheck() {
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
	if (ir_right > right_wall_threshold) {
 8003ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b18 <rightWallCheck+0x3c>)
 8003ae2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fd f8ce 	bl	8000c88 <__aeabi_i2f>
 8003aec:	4602      	mov	r2, r0
 8003aee:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <rightWallCheck+0x40>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4619      	mov	r1, r3
 8003af4:	4610      	mov	r0, r2
 8003af6:	f7fd fab9 	bl	800106c <__aeabi_fcmplt>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d003      	beq.n	8003b08 <rightWallCheck+0x2c>
		right_wall = 1;
 8003b00:	4b07      	ldr	r3, [pc, #28]	@ (8003b20 <rightWallCheck+0x44>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	801a      	strh	r2, [r3, #0]
 8003b06:	e002      	b.n	8003b0e <rightWallCheck+0x32>
	}
	else {
		right_wall = 0;
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <rightWallCheck+0x44>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	801a      	strh	r2, [r3, #0]
	}
	return right_wall;
 8003b0e:	4b04      	ldr	r3, [pc, #16]	@ (8003b20 <rightWallCheck+0x44>)
 8003b10:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	2000000a 	.word	0x2000000a
 8003b1c:	20000304 	.word	0x20000304
 8003b20:	20002412 	.word	0x20002412

08003b24 <frontWallCheck>:

int16_t frontWallCheck() {
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
	if (ir_front_right > front_wall_threshold) {
 8003b28:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <frontWallCheck+0x3c>)
 8003b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd f8aa 	bl	8000c88 <__aeabi_i2f>
 8003b34:	4602      	mov	r2, r0
 8003b36:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <frontWallCheck+0x40>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	f7fd fa95 	bl	800106c <__aeabi_fcmplt>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <frontWallCheck+0x2c>
		front_wall = 1;
 8003b48:	4b07      	ldr	r3, [pc, #28]	@ (8003b68 <frontWallCheck+0x44>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	801a      	strh	r2, [r3, #0]
 8003b4e:	e002      	b.n	8003b56 <frontWallCheck+0x32>
	}
	else {
		front_wall = 0;
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <frontWallCheck+0x44>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	801a      	strh	r2, [r3, #0]
	}
	return front_wall;
 8003b56:	4b04      	ldr	r3, [pc, #16]	@ (8003b68 <frontWallCheck+0x44>)
 8003b58:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	2000000c 	.word	0x2000000c
 8003b64:	20000300 	.word	0x20000300
 8003b68:	20002414 	.word	0x20002414

08003b6c <sign>:

int16_t sign(float x) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b082      	sub	sp, #8
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	if (x > 0)
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7fd fa95 	bl	80010a8 <__aeabi_fcmpgt>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <sign+0x1c>
	{
		return 1;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e00b      	b.n	8003ba0 <sign+0x34>
	}
	else if (x < 0)
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f7fd fa6d 	bl	800106c <__aeabi_fcmplt>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <sign+0x32>
	{
		return -1;
 8003b98:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9c:	e000      	b.n	8003ba0 <sign+0x34>
	}
	else
	{
		return 0;
 8003b9e:	2300      	movs	r3, #0
	}
}
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003be0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8003bac:	f7ff ff6c 	bl	8003a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bb0:	480c      	ldr	r0, [pc, #48]	@ (8003be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bb2:	490d      	ldr	r1, [pc, #52]	@ (8003be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bb8:	e002      	b.n	8003bc0 <LoopCopyDataInit>

08003bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bbe:	3304      	adds	r3, #4

08003bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bc4:	d3f9      	bcc.n	8003bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8003bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bcc:	e001      	b.n	8003bd2 <LoopFillZerobss>

08003bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bd0:	3204      	adds	r2, #4

08003bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bd4:	d3fb      	bcc.n	8003bce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003bd6:	f004 f9ab 	bl	8007f30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003bda:	f7fd fe91 	bl	8001900 <main>
  bx  lr    
 8003bde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003be8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8003bec:	08008054 	.word	0x08008054
  ldr r2, =_sbss
 8003bf0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8003bf4:	20002564 	.word	0x20002564

08003bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bf8:	e7fe      	b.n	8003bf8 <ADC_IRQHandler>
	...

08003bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c00:	4b0e      	ldr	r3, [pc, #56]	@ (8003c3c <HAL_Init+0x40>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a0d      	ldr	r2, [pc, #52]	@ (8003c3c <HAL_Init+0x40>)
 8003c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <HAL_Init+0x40>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a0a      	ldr	r2, [pc, #40]	@ (8003c3c <HAL_Init+0x40>)
 8003c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c18:	4b08      	ldr	r3, [pc, #32]	@ (8003c3c <HAL_Init+0x40>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a07      	ldr	r2, [pc, #28]	@ (8003c3c <HAL_Init+0x40>)
 8003c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c24:	2003      	movs	r0, #3
 8003c26:	f000 fcff 	bl	8004628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c2a:	200f      	movs	r0, #15
 8003c2c:	f000 f808 	bl	8003c40 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8003c30:	f7ff fc7c 	bl	800352c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	40023c00 	.word	0x40023c00

08003c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c48:	4b12      	ldr	r3, [pc, #72]	@ (8003c94 <HAL_InitTick+0x54>)
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	4b12      	ldr	r3, [pc, #72]	@ (8003c98 <HAL_InitTick+0x58>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	4619      	mov	r1, r3
 8003c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fd17 	bl	8004692 <HAL_SYSTICK_Config>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d001      	beq.n	8003c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e00e      	b.n	8003c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b0f      	cmp	r3, #15
 8003c72:	d80a      	bhi.n	8003c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c74:	2200      	movs	r2, #0
 8003c76:	6879      	ldr	r1, [r7, #4]
 8003c78:	f04f 30ff 	mov.w	r0, #4294967295
 8003c7c:	f000 fcdf 	bl	800463e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c80:	4a06      	ldr	r2, [pc, #24]	@ (8003c9c <HAL_InitTick+0x5c>)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	20000004 	.word	0x20000004
 8003c98:	20000014 	.word	0x20000014
 8003c9c:	20000010 	.word	0x20000010

08003ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ca4:	4b05      	ldr	r3, [pc, #20]	@ (8003cbc <HAL_IncTick+0x1c>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_IncTick+0x20>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4413      	add	r3, r2
 8003cb0:	4a03      	ldr	r2, [pc, #12]	@ (8003cc0 <HAL_IncTick+0x20>)
 8003cb2:	6013      	str	r3, [r2, #0]
}
 8003cb4:	bf00      	nop
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr
 8003cbc:	20000014 	.word	0x20000014
 8003cc0:	20002418 	.word	0x20002418

08003cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8003cc8:	4b02      	ldr	r3, [pc, #8]	@ (8003cd4 <HAL_GetTick+0x10>)
 8003cca:	681b      	ldr	r3, [r3, #0]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bc80      	pop	{r7}
 8003cd2:	4770      	bx	lr
 8003cd4:	20002418 	.word	0x20002418

08003cd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e033      	b.n	8003d56 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7ff fc3e 	bl	8003578 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	f003 0310 	and.w	r3, r3, #16
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d118      	bne.n	8003d48 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d1a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003d1e:	f023 0302 	bic.w	r3, r3, #2
 8003d22:	f043 0202 	orr.w	r2, r3, #2
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f000 fa28 	bl	8004180 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	f043 0201 	orr.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d46:	e001      	b.n	8003d4c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_ADC_Start_DMA+0x1e>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e0bc      	b.n	8003ef8 <HAL_ADC_Start_DMA+0x198>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d018      	beq.n	8003dc6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f042 0201 	orr.w	r2, r2, #1
 8003da2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003da4:	4b56      	ldr	r3, [pc, #344]	@ (8003f00 <HAL_ADC_Start_DMA+0x1a0>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a56      	ldr	r2, [pc, #344]	@ (8003f04 <HAL_ADC_Start_DMA+0x1a4>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	0c9a      	lsrs	r2, r3, #18
 8003db0:	4613      	mov	r3, r2
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4413      	add	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003db8:	e002      	b.n	8003dc0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1f9      	bne.n	8003dba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	f040 8084 	bne.w	8003ede <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003dde:	f023 0301 	bic.w	r3, r3, #1
 8003de2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d007      	beq.n	8003e08 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003e00:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e14:	d106      	bne.n	8003e24 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e1a:	f023 0206 	bic.w	r2, r3, #6
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e22:	e002      	b.n	8003e2a <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e36:	4a34      	ldr	r2, [pc, #208]	@ (8003f08 <HAL_ADC_Start_DMA+0x1a8>)
 8003e38:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3e:	4a33      	ldr	r2, [pc, #204]	@ (8003f0c <HAL_ADC_Start_DMA+0x1ac>)
 8003e40:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	4a32      	ldr	r2, [pc, #200]	@ (8003f10 <HAL_ADC_Start_DMA+0x1b0>)
 8003e48:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003e52:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003e62:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	689a      	ldr	r2, [r3, #8]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e72:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	334c      	adds	r3, #76	@ 0x4c
 8003e7e:	4619      	mov	r1, r3
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f000 fcc0 	bl	8004808 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003e88:	4b22      	ldr	r3, [pc, #136]	@ (8003f14 <HAL_ADC_Start_DMA+0x1b4>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10f      	bne.n	8003eb4 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d129      	bne.n	8003ef6 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003eb0:	609a      	str	r2, [r3, #8]
 8003eb2:	e020      	b.n	8003ef6 <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a17      	ldr	r2, [pc, #92]	@ (8003f18 <HAL_ADC_Start_DMA+0x1b8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d11b      	bne.n	8003ef6 <HAL_ADC_Start_DMA+0x196>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d114      	bne.n	8003ef6 <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003eda:	609a      	str	r2, [r3, #8]
 8003edc:	e00b      	b.n	8003ef6 <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee2:	f043 0210 	orr.w	r2, r3, #16
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eee:	f043 0201 	orr.w	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3718      	adds	r7, #24
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20000004 	.word	0x20000004
 8003f04:	431bde83 	.word	0x431bde83
 8003f08:	0800438d 	.word	0x0800438d
 8003f0c:	08004447 	.word	0x08004447
 8003f10:	08004463 	.word	0x08004463
 8003f14:	40012300 	.word	0x40012300
 8003f18:	40012000 	.word	0x40012000

08003f1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr

08003f2e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc80      	pop	{r7}
 8003f3e:	4770      	bx	lr

08003f40 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_ADC_ConfigChannel+0x1c>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e103      	b.n	8004164 <HAL_ADC_ConfigChannel+0x224>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b09      	cmp	r3, #9
 8003f6a:	d925      	bls.n	8003fb8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68d9      	ldr	r1, [r3, #12]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	3b1e      	subs	r3, #30
 8003f82:	2207      	movs	r2, #7
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43da      	mvns	r2, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	400a      	ands	r2, r1
 8003f90:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68d9      	ldr	r1, [r3, #12]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	005b      	lsls	r3, r3, #1
 8003fa8:	4403      	add	r3, r0
 8003faa:	3b1e      	subs	r3, #30
 8003fac:	409a      	lsls	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	e022      	b.n	8003ffe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6919      	ldr	r1, [r3, #16]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	2207      	movs	r2, #7
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	400a      	ands	r2, r1
 8003fda:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6919      	ldr	r1, [r3, #16]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	4618      	mov	r0, r3
 8003fee:	4603      	mov	r3, r0
 8003ff0:	005b      	lsls	r3, r3, #1
 8003ff2:	4403      	add	r3, r0
 8003ff4:	409a      	lsls	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b06      	cmp	r3, #6
 8004004:	d824      	bhi.n	8004050 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	3b05      	subs	r3, #5
 8004018:	221f      	movs	r2, #31
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43da      	mvns	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	400a      	ands	r2, r1
 8004026:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	b29b      	uxth	r3, r3
 8004034:	4618      	mov	r0, r3
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	4613      	mov	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	3b05      	subs	r3, #5
 8004042:	fa00 f203 	lsl.w	r2, r0, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	430a      	orrs	r2, r1
 800404c:	635a      	str	r2, [r3, #52]	@ 0x34
 800404e:	e04c      	b.n	80040ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b0c      	cmp	r3, #12
 8004056:	d824      	bhi.n	80040a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	3b23      	subs	r3, #35	@ 0x23
 800406a:	221f      	movs	r2, #31
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43da      	mvns	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	400a      	ands	r2, r1
 8004078:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	b29b      	uxth	r3, r3
 8004086:	4618      	mov	r0, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	3b23      	subs	r3, #35	@ 0x23
 8004094:	fa00 f203 	lsl.w	r2, r0, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	631a      	str	r2, [r3, #48]	@ 0x30
 80040a0:	e023      	b.n	80040ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4413      	add	r3, r2
 80040b2:	3b41      	subs	r3, #65	@ 0x41
 80040b4:	221f      	movs	r2, #31
 80040b6:	fa02 f303 	lsl.w	r3, r2, r3
 80040ba:	43da      	mvns	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	400a      	ands	r2, r1
 80040c2:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	4618      	mov	r0, r3
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	4613      	mov	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	4413      	add	r3, r2
 80040dc:	3b41      	subs	r3, #65	@ 0x41
 80040de:	fa00 f203 	lsl.w	r2, r0, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	430a      	orrs	r2, r1
 80040e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a20      	ldr	r2, [pc, #128]	@ (8004170 <HAL_ADC_ConfigChannel+0x230>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d109      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x1c8>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b12      	cmp	r3, #18
 80040fa:	d105      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80040fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004174 <HAL_ADC_ConfigChannel+0x234>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4a1c      	ldr	r2, [pc, #112]	@ (8004174 <HAL_ADC_ConfigChannel+0x234>)
 8004102:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004106:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a18      	ldr	r2, [pc, #96]	@ (8004170 <HAL_ADC_ConfigChannel+0x230>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d123      	bne.n	800415a <HAL_ADC_ConfigChannel+0x21a>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b10      	cmp	r3, #16
 8004118:	d003      	beq.n	8004122 <HAL_ADC_ConfigChannel+0x1e2>
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b11      	cmp	r3, #17
 8004120:	d11b      	bne.n	800415a <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004122:	4b14      	ldr	r3, [pc, #80]	@ (8004174 <HAL_ADC_ConfigChannel+0x234>)
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	4a13      	ldr	r2, [pc, #76]	@ (8004174 <HAL_ADC_ConfigChannel+0x234>)
 8004128:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800412c:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2b10      	cmp	r3, #16
 8004134:	d111      	bne.n	800415a <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004136:	4b10      	ldr	r3, [pc, #64]	@ (8004178 <HAL_ADC_ConfigChannel+0x238>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a10      	ldr	r2, [pc, #64]	@ (800417c <HAL_ADC_ConfigChannel+0x23c>)
 800413c:	fba2 2303 	umull	r2, r3, r2, r3
 8004140:	0c9a      	lsrs	r2, r3, #18
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 800414c:	e002      	b.n	8004154 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b01      	subs	r3, #1
 8004152:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1f9      	bne.n	800414e <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40012000 	.word	0x40012000
 8004174:	40012300 	.word	0x40012300
 8004178:	20000004 	.word	0x20000004
 800417c:	431bde83 	.word	0x431bde83

08004180 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004188:	4b7e      	ldr	r3, [pc, #504]	@ (8004384 <ADC_Init+0x204>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	4a7d      	ldr	r2, [pc, #500]	@ (8004384 <ADC_Init+0x204>)
 800418e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004192:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004194:	4b7b      	ldr	r3, [pc, #492]	@ (8004384 <ADC_Init+0x204>)
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	4979      	ldr	r1, [pc, #484]	@ (8004384 <ADC_Init+0x204>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6859      	ldr	r1, [r3, #4]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	021a      	lsls	r2, r3, #8
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6859      	ldr	r1, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689a      	ldr	r2, [r3, #8]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6899      	ldr	r1, [r3, #8]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800420e:	4a5e      	ldr	r2, [pc, #376]	@ (8004388 <ADC_Init+0x208>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d022      	beq.n	800425a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689a      	ldr	r2, [r3, #8]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004222:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6899      	ldr	r1, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	430a      	orrs	r2, r1
 8004234:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004244:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6899      	ldr	r1, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	609a      	str	r2, [r3, #8]
 8004258:	e00f      	b.n	800427a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	689a      	ldr	r2, [r3, #8]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004268:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004278:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0202 	bic.w	r2, r2, #2
 8004288:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6899      	ldr	r1, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	7e1b      	ldrb	r3, [r3, #24]
 8004294:	005a      	lsls	r2, r3, #1
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	430a      	orrs	r2, r1
 800429c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d027      	beq.n	80042f8 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	685a      	ldr	r2, [r3, #4]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80042c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042cc:	3b01      	subs	r3, #1
 80042ce:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 80042d2:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	fa92 f2a2 	rbit	r2, r2
 80042da:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	fab2 f282 	clz	r2, r2
 80042e2:	b2d2      	uxtb	r2, r2
 80042e4:	fa03 f102 	lsl.w	r1, r3, r2
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
 80042f6:	e007      	b.n	8004308 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004306:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004316:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	3b01      	subs	r3, #1
 8004324:	051a      	lsls	r2, r3, #20
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800433c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6899      	ldr	r1, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800434a:	025a      	lsls	r2, r3, #9
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	689a      	ldr	r2, [r3, #8]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004362:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6899      	ldr	r1, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	029a      	lsls	r2, r3, #10
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	430a      	orrs	r2, r1
 8004376:	609a      	str	r2, [r3, #8]
}
 8004378:	bf00      	nop
 800437a:	3714      	adds	r7, #20
 800437c:	46bd      	mov	sp, r7
 800437e:	bc80      	pop	{r7}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	40012300 	.word	0x40012300
 8004388:	0f000001 	.word	0x0f000001

0800438c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004398:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d13c      	bne.n	8004420 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d12b      	bne.n	8004418 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d127      	bne.n	8004418 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ce:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d006      	beq.n	80043e4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d119      	bne.n	8004418 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0220 	bic.w	r2, r2, #32
 80043f2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004404:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d105      	bne.n	8004418 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	f043 0201 	orr.w	r2, r3, #1
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f7fd feb1 	bl	8002180 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800441e:	e00e      	b.n	800443e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f7ff fd7e 	bl	8003f2e <HAL_ADC_ErrorCallback>
}
 8004432:	e004      	b.n	800443e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	4798      	blx	r3
}
 800443e:	bf00      	nop
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004452:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff fd61 	bl	8003f1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800445a:	bf00      	nop
 800445c:	3710      	adds	r7, #16
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b084      	sub	sp, #16
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2240      	movs	r2, #64	@ 0x40
 8004474:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800447a:	f043 0204 	orr.w	r2, r3, #4
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff fd53 	bl	8003f2e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004488:	bf00      	nop
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a0:	4b0c      	ldr	r3, [pc, #48]	@ (80044d4 <__NVIC_SetPriorityGrouping+0x44>)
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044ac:	4013      	ands	r3, r2
 80044ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044c2:	4a04      	ldr	r2, [pc, #16]	@ (80044d4 <__NVIC_SetPriorityGrouping+0x44>)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	60d3      	str	r3, [r2, #12]
}
 80044c8:	bf00      	nop
 80044ca:	3714      	adds	r7, #20
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	e000ed00 	.word	0xe000ed00

080044d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044d8:	b480      	push	{r7}
 80044da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044dc:	4b04      	ldr	r3, [pc, #16]	@ (80044f0 <__NVIC_GetPriorityGrouping+0x18>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	0a1b      	lsrs	r3, r3, #8
 80044e2:	f003 0307 	and.w	r3, r3, #7
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	e000ed00 	.word	0xe000ed00

080044f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	4603      	mov	r3, r0
 80044fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004502:	2b00      	cmp	r3, #0
 8004504:	db0b      	blt.n	800451e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	f003 021f 	and.w	r2, r3, #31
 800450c:	4906      	ldr	r1, [pc, #24]	@ (8004528 <__NVIC_EnableIRQ+0x34>)
 800450e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	2001      	movs	r0, #1
 8004516:	fa00 f202 	lsl.w	r2, r0, r2
 800451a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800451e:	bf00      	nop
 8004520:	370c      	adds	r7, #12
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr
 8004528:	e000e100 	.word	0xe000e100

0800452c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	4603      	mov	r3, r0
 8004534:	6039      	str	r1, [r7, #0]
 8004536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453c:	2b00      	cmp	r3, #0
 800453e:	db0a      	blt.n	8004556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	b2da      	uxtb	r2, r3
 8004544:	490c      	ldr	r1, [pc, #48]	@ (8004578 <__NVIC_SetPriority+0x4c>)
 8004546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454a:	0112      	lsls	r2, r2, #4
 800454c:	b2d2      	uxtb	r2, r2
 800454e:	440b      	add	r3, r1
 8004550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004554:	e00a      	b.n	800456c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4908      	ldr	r1, [pc, #32]	@ (800457c <__NVIC_SetPriority+0x50>)
 800455c:	79fb      	ldrb	r3, [r7, #7]
 800455e:	f003 030f 	and.w	r3, r3, #15
 8004562:	3b04      	subs	r3, #4
 8004564:	0112      	lsls	r2, r2, #4
 8004566:	b2d2      	uxtb	r2, r2
 8004568:	440b      	add	r3, r1
 800456a:	761a      	strb	r2, [r3, #24]
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	e000e100 	.word	0xe000e100
 800457c:	e000ed00 	.word	0xe000ed00

08004580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004580:	b480      	push	{r7}
 8004582:	b089      	sub	sp, #36	@ 0x24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004594:	69fb      	ldr	r3, [r7, #28]
 8004596:	f1c3 0307 	rsb	r3, r3, #7
 800459a:	2b04      	cmp	r3, #4
 800459c:	bf28      	it	cs
 800459e:	2304      	movcs	r3, #4
 80045a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3304      	adds	r3, #4
 80045a6:	2b06      	cmp	r3, #6
 80045a8:	d902      	bls.n	80045b0 <NVIC_EncodePriority+0x30>
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	3b03      	subs	r3, #3
 80045ae:	e000      	b.n	80045b2 <NVIC_EncodePriority+0x32>
 80045b0:	2300      	movs	r3, #0
 80045b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b4:	f04f 32ff 	mov.w	r2, #4294967295
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	fa02 f303 	lsl.w	r3, r2, r3
 80045be:	43da      	mvns	r2, r3
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	401a      	ands	r2, r3
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c8:	f04f 31ff 	mov.w	r1, #4294967295
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	fa01 f303 	lsl.w	r3, r1, r3
 80045d2:	43d9      	mvns	r1, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d8:	4313      	orrs	r3, r2
         );
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3724      	adds	r7, #36	@ 0x24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bc80      	pop	{r7}
 80045e2:	4770      	bx	lr

080045e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3b01      	subs	r3, #1
 80045f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045f4:	d301      	bcc.n	80045fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045f6:	2301      	movs	r3, #1
 80045f8:	e00f      	b.n	800461a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045fa:	4a0a      	ldr	r2, [pc, #40]	@ (8004624 <SysTick_Config+0x40>)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004602:	210f      	movs	r1, #15
 8004604:	f04f 30ff 	mov.w	r0, #4294967295
 8004608:	f7ff ff90 	bl	800452c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800460c:	4b05      	ldr	r3, [pc, #20]	@ (8004624 <SysTick_Config+0x40>)
 800460e:	2200      	movs	r2, #0
 8004610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004612:	4b04      	ldr	r3, [pc, #16]	@ (8004624 <SysTick_Config+0x40>)
 8004614:	2207      	movs	r2, #7
 8004616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	e000e010 	.word	0xe000e010

08004628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b082      	sub	sp, #8
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff2d 	bl	8004490 <__NVIC_SetPriorityGrouping>
}
 8004636:	bf00      	nop
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	4603      	mov	r3, r0
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	607a      	str	r2, [r7, #4]
 800464a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800464c:	2300      	movs	r3, #0
 800464e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004650:	f7ff ff42 	bl	80044d8 <__NVIC_GetPriorityGrouping>
 8004654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	6978      	ldr	r0, [r7, #20]
 800465c:	f7ff ff90 	bl	8004580 <NVIC_EncodePriority>
 8004660:	4602      	mov	r2, r0
 8004662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff ff5f 	bl	800452c <__NVIC_SetPriority>
}
 800466e:	bf00      	nop
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	4603      	mov	r3, r0
 800467e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff ff35 	bl	80044f4 <__NVIC_EnableIRQ>
}
 800468a:	bf00      	nop
 800468c:	3708      	adds	r7, #8
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}

08004692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b082      	sub	sp, #8
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff ffa2 	bl	80045e4 <SysTick_Config>
 80046a0:	4603      	mov	r3, r0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b086      	sub	sp, #24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80046b8:	f7ff fb04 	bl	8003cc4 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e099      	b.n	80047fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f022 0201 	bic.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046e8:	e00f      	b.n	800470a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046ea:	f7ff faeb 	bl	8003cc4 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d908      	bls.n	800470a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2220      	movs	r2, #32
 80046fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2203      	movs	r2, #3
 8004702:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e078      	b.n	80047fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e8      	bne.n	80046ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4b38      	ldr	r3, [pc, #224]	@ (8004804 <HAL_DMA_Init+0x158>)
 8004724:	4013      	ands	r3, r2
 8004726:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004736:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004742:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800474e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004756:	697a      	ldr	r2, [r7, #20]
 8004758:	4313      	orrs	r3, r2
 800475a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	2b04      	cmp	r3, #4
 8004762:	d107      	bne.n	8004774 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	4313      	orrs	r3, r2
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4313      	orrs	r3, r2
 8004772:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	f023 0307 	bic.w	r3, r3, #7
 800478a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479a:	2b04      	cmp	r3, #4
 800479c:	d117      	bne.n	80047ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00e      	beq.n	80047ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fa6d 	bl	8004c90 <DMA_CheckFifoParam>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d008      	beq.n	80047ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2240      	movs	r2, #64	@ 0x40
 80047c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80047ca:	2301      	movs	r3, #1
 80047cc:	e016      	b.n	80047fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	697a      	ldr	r2, [r7, #20]
 80047d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 fa26 	bl	8004c28 <DMA_CalcBaseAndBitshift>
 80047dc:	4603      	mov	r3, r0
 80047de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	223f      	movs	r2, #63	@ 0x3f
 80047e6:	409a      	lsls	r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	f010803f 	.word	0xf010803f

08004808 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	607a      	str	r2, [r7, #4]
 8004814:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004816:	2300      	movs	r3, #0
 8004818:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800481e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004826:	2b01      	cmp	r3, #1
 8004828:	d101      	bne.n	800482e <HAL_DMA_Start_IT+0x26>
 800482a:	2302      	movs	r3, #2
 800482c:	e040      	b.n	80048b0 <HAL_DMA_Start_IT+0xa8>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	d12f      	bne.n	80048a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f000 f9b8 	bl	8004bcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004860:	223f      	movs	r2, #63	@ 0x3f
 8004862:	409a      	lsls	r2, r3
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f042 0216 	orr.w	r2, r2, #22
 8004876:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d007      	beq.n	8004890 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0208 	orr.w	r2, r2, #8
 800488e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f042 0201 	orr.w	r2, r2, #1
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	e005      	b.n	80048ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80048aa:	2302      	movs	r3, #2
 80048ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80048ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048c4:	4b8e      	ldr	r3, [pc, #568]	@ (8004b00 <HAL_DMA_IRQHandler+0x248>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a8e      	ldr	r2, [pc, #568]	@ (8004b04 <HAL_DMA_IRQHandler+0x24c>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	0a9b      	lsrs	r3, r3, #10
 80048d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e2:	2208      	movs	r2, #8
 80048e4:	409a      	lsls	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	4013      	ands	r3, r2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d01a      	beq.n	8004924 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0304 	and.w	r3, r3, #4
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d013      	beq.n	8004924 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0204 	bic.w	r2, r2, #4
 800490a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004910:	2208      	movs	r2, #8
 8004912:	409a      	lsls	r2, r3
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491c:	f043 0201 	orr.w	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004928:	2201      	movs	r2, #1
 800492a:	409a      	lsls	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d012      	beq.n	800495a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	695b      	ldr	r3, [r3, #20]
 800493a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004946:	2201      	movs	r2, #1
 8004948:	409a      	lsls	r2, r3
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004952:	f043 0202 	orr.w	r2, r3, #2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495e:	2204      	movs	r2, #4
 8004960:	409a      	lsls	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4013      	ands	r3, r2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d012      	beq.n	8004990 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00b      	beq.n	8004990 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800497c:	2204      	movs	r2, #4
 800497e:	409a      	lsls	r2, r3
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004988:	f043 0204 	orr.w	r2, r3, #4
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004994:	2210      	movs	r2, #16
 8004996:	409a      	lsls	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d043      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0308 	and.w	r3, r3, #8
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d03c      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b2:	2210      	movs	r2, #16
 80049b4:	409a      	lsls	r2, r3
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d018      	beq.n	80049fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d024      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	4798      	blx	r3
 80049e6:	e01f      	b.n	8004a28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	4798      	blx	r3
 80049f8:	e016      	b.n	8004a28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d107      	bne.n	8004a18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0208 	bic.w	r2, r2, #8
 8004a16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2c:	2220      	movs	r2, #32
 8004a2e:	409a      	lsls	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 808f 	beq.w	8004b58 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0310 	and.w	r3, r3, #16
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8087 	beq.w	8004b58 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4e:	2220      	movs	r2, #32
 8004a50:	409a      	lsls	r2, r3
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b05      	cmp	r3, #5
 8004a60:	d136      	bne.n	8004ad0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0216 	bic.w	r2, r2, #22
 8004a70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695a      	ldr	r2, [r3, #20]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d103      	bne.n	8004a92 <HAL_DMA_IRQHandler+0x1da>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d007      	beq.n	8004aa2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0208 	bic.w	r2, r2, #8
 8004aa0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aa6:	223f      	movs	r2, #63	@ 0x3f
 8004aa8:	409a      	lsls	r2, r3
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d07e      	beq.n	8004bc4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	4798      	blx	r3
        }
        return;
 8004ace:	e079      	b.n	8004bc4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d01d      	beq.n	8004b1a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10d      	bne.n	8004b08 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d031      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	4798      	blx	r3
 8004afc:	e02c      	b.n	8004b58 <HAL_DMA_IRQHandler+0x2a0>
 8004afe:	bf00      	nop
 8004b00:	20000004 	.word	0x20000004
 8004b04:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d023      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	4798      	blx	r3
 8004b18:	e01e      	b.n	8004b58 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10f      	bne.n	8004b48 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f022 0210 	bic.w	r2, r2, #16
 8004b36:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d032      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d022      	beq.n	8004bb2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2205      	movs	r2, #5
 8004b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	3301      	adds	r3, #1
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d307      	bcc.n	8004ba0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f2      	bne.n	8004b84 <HAL_DMA_IRQHandler+0x2cc>
 8004b9e:	e000      	b.n	8004ba2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ba0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
 8004bc2:	e000      	b.n	8004bc6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004bc4:	bf00      	nop
    }
  }
}
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
 8004bd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004be8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b40      	cmp	r3, #64	@ 0x40
 8004bf8:	d108      	bne.n	8004c0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c0a:	e007      	b.n	8004c1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	60da      	str	r2, [r3, #12]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bc80      	pop	{r7}
 8004c24:	4770      	bx	lr
	...

08004c28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	3b10      	subs	r3, #16
 8004c38:	4a13      	ldr	r2, [pc, #76]	@ (8004c88 <DMA_CalcBaseAndBitshift+0x60>)
 8004c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c42:	4a12      	ldr	r2, [pc, #72]	@ (8004c8c <DMA_CalcBaseAndBitshift+0x64>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2b03      	cmp	r3, #3
 8004c54:	d909      	bls.n	8004c6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c5e:	f023 0303 	bic.w	r3, r3, #3
 8004c62:	1d1a      	adds	r2, r3, #4
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c68:	e007      	b.n	8004c7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3714      	adds	r7, #20
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr
 8004c88:	aaaaaaab 	.word	0xaaaaaaab
 8004c8c:	0800803c 	.word	0x0800803c

08004c90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699b      	ldr	r3, [r3, #24]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d11f      	bne.n	8004cea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d856      	bhi.n	8004d5e <DMA_CheckFifoParam+0xce>
 8004cb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb8 <DMA_CheckFifoParam+0x28>)
 8004cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb6:	bf00      	nop
 8004cb8:	08004cc9 	.word	0x08004cc9
 8004cbc:	08004cdb 	.word	0x08004cdb
 8004cc0:	08004cc9 	.word	0x08004cc9
 8004cc4:	08004d5f 	.word	0x08004d5f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ccc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d046      	beq.n	8004d62 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cd8:	e043      	b.n	8004d62 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cde:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ce2:	d140      	bne.n	8004d66 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce8:	e03d      	b.n	8004d66 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf2:	d121      	bne.n	8004d38 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b03      	cmp	r3, #3
 8004cf8:	d837      	bhi.n	8004d6a <DMA_CheckFifoParam+0xda>
 8004cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004d00 <DMA_CheckFifoParam+0x70>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d17 	.word	0x08004d17
 8004d08:	08004d11 	.word	0x08004d11
 8004d0c:	08004d29 	.word	0x08004d29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      break;
 8004d14:	e030      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d025      	beq.n	8004d6e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d26:	e022      	b.n	8004d6e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d30:	d11f      	bne.n	8004d72 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d36:	e01c      	b.n	8004d72 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d903      	bls.n	8004d46 <DMA_CheckFifoParam+0xb6>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d003      	beq.n	8004d4c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d44:	e018      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	73fb      	strb	r3, [r7, #15]
      break;
 8004d4a:	e015      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00e      	beq.n	8004d76 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d5c:	e00b      	b.n	8004d76 <DMA_CheckFifoParam+0xe6>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e00a      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
      break;
 8004d62:	bf00      	nop
 8004d64:	e008      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
      break;
 8004d66:	bf00      	nop
 8004d68:	e006      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
      break;
 8004d6a:	bf00      	nop
 8004d6c:	e004      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
      break;
 8004d6e:	bf00      	nop
 8004d70:	e002      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <DMA_CheckFifoParam+0xe8>
      break;
 8004d76:	bf00      	nop
    }
  } 
  
  return status; 
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bc80      	pop	{r7}
 8004d82:	4770      	bx	lr

08004d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b087      	sub	sp, #28
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d92:	e16f      	b.n	8005074 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	2101      	movs	r1, #1
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8004da0:	4013      	ands	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 8161 	beq.w	800506e <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d005      	beq.n	8004dc4 <HAL_GPIO_Init+0x40>
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f003 0303 	and.w	r3, r3, #3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d130      	bne.n	8004e26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	005b      	lsls	r3, r3, #1
 8004dce:	2203      	movs	r2, #3
 8004dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	fa02 f303 	lsl.w	r3, r2, r3
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4013      	ands	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 0201 	and.w	r2, r3, #1
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	693a      	ldr	r2, [r7, #16]
 8004e24:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d017      	beq.n	8004e62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	005b      	lsls	r3, r3, #1
 8004e3c:	2203      	movs	r2, #3
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4013      	ands	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	fa02 f303 	lsl.w	r3, r2, r3
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	693a      	ldr	r2, [r7, #16]
 8004e60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d123      	bne.n	8004eb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	08da      	lsrs	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3208      	adds	r2, #8
 8004e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	220f      	movs	r2, #15
 8004e86:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8a:	43db      	mvns	r3, r3
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	691a      	ldr	r2, [r3, #16]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	08da      	lsrs	r2, r3, #3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3208      	adds	r2, #8
 8004eb0:	6939      	ldr	r1, [r7, #16]
 8004eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f003 0203 	and.w	r2, r3, #3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	fa02 f303 	lsl.w	r3, r2, r3
 8004ede:	693a      	ldr	r2, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	693a      	ldr	r2, [r7, #16]
 8004ee8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80bb 	beq.w	800506e <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	4b64      	ldr	r3, [pc, #400]	@ (8005090 <HAL_GPIO_Init+0x30c>)
 8004efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f00:	4a63      	ldr	r2, [pc, #396]	@ (8005090 <HAL_GPIO_Init+0x30c>)
 8004f02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f06:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f08:	4b61      	ldr	r3, [pc, #388]	@ (8005090 <HAL_GPIO_Init+0x30c>)
 8004f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f10:	60bb      	str	r3, [r7, #8]
 8004f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f14:	4a5f      	ldr	r2, [pc, #380]	@ (8005094 <HAL_GPIO_Init+0x310>)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	089b      	lsrs	r3, r3, #2
 8004f1a:	3302      	adds	r3, #2
 8004f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	220f      	movs	r2, #15
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	4013      	ands	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a57      	ldr	r2, [pc, #348]	@ (8005098 <HAL_GPIO_Init+0x314>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d031      	beq.n	8004fa4 <HAL_GPIO_Init+0x220>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a56      	ldr	r2, [pc, #344]	@ (800509c <HAL_GPIO_Init+0x318>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d02b      	beq.n	8004fa0 <HAL_GPIO_Init+0x21c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a55      	ldr	r2, [pc, #340]	@ (80050a0 <HAL_GPIO_Init+0x31c>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d025      	beq.n	8004f9c <HAL_GPIO_Init+0x218>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a54      	ldr	r2, [pc, #336]	@ (80050a4 <HAL_GPIO_Init+0x320>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d01f      	beq.n	8004f98 <HAL_GPIO_Init+0x214>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a53      	ldr	r2, [pc, #332]	@ (80050a8 <HAL_GPIO_Init+0x324>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d019      	beq.n	8004f94 <HAL_GPIO_Init+0x210>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a52      	ldr	r2, [pc, #328]	@ (80050ac <HAL_GPIO_Init+0x328>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d013      	beq.n	8004f90 <HAL_GPIO_Init+0x20c>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a51      	ldr	r2, [pc, #324]	@ (80050b0 <HAL_GPIO_Init+0x32c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d00d      	beq.n	8004f8c <HAL_GPIO_Init+0x208>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a50      	ldr	r2, [pc, #320]	@ (80050b4 <HAL_GPIO_Init+0x330>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d007      	beq.n	8004f88 <HAL_GPIO_Init+0x204>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a4f      	ldr	r2, [pc, #316]	@ (80050b8 <HAL_GPIO_Init+0x334>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d101      	bne.n	8004f84 <HAL_GPIO_Init+0x200>
 8004f80:	2308      	movs	r3, #8
 8004f82:	e010      	b.n	8004fa6 <HAL_GPIO_Init+0x222>
 8004f84:	2309      	movs	r3, #9
 8004f86:	e00e      	b.n	8004fa6 <HAL_GPIO_Init+0x222>
 8004f88:	2307      	movs	r3, #7
 8004f8a:	e00c      	b.n	8004fa6 <HAL_GPIO_Init+0x222>
 8004f8c:	2306      	movs	r3, #6
 8004f8e:	e00a      	b.n	8004fa6 <HAL_GPIO_Init+0x222>
 8004f90:	2305      	movs	r3, #5
 8004f92:	e008      	b.n	8004fa6 <HAL_GPIO_Init+0x222>
 8004f94:	2304      	movs	r3, #4
 8004f96:	e006      	b.n	8004fa6 <HAL_GPIO_Init+0x222>
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e004      	b.n	8004fa6 <HAL_GPIO_Init+0x222>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e002      	b.n	8004fa6 <HAL_GPIO_Init+0x222>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_GPIO_Init+0x222>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	f002 0203 	and.w	r2, r2, #3
 8004fac:	0092      	lsls	r2, r2, #2
 8004fae:	4093      	lsls	r3, r2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004fb8:	4936      	ldr	r1, [pc, #216]	@ (8005094 <HAL_GPIO_Init+0x310>)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	3302      	adds	r3, #2
 8004fc0:	693a      	ldr	r2, [r7, #16]
 8004fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fc6:	4b3d      	ldr	r3, [pc, #244]	@ (80050bc <HAL_GPIO_Init+0x338>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	43db      	mvns	r3, r3
 8004fd0:	693a      	ldr	r2, [r7, #16]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004fea:	4a34      	ldr	r2, [pc, #208]	@ (80050bc <HAL_GPIO_Init+0x338>)
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ff0:	4b32      	ldr	r3, [pc, #200]	@ (80050bc <HAL_GPIO_Init+0x338>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d003      	beq.n	8005014 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005014:	4a29      	ldr	r2, [pc, #164]	@ (80050bc <HAL_GPIO_Init+0x338>)
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800501a:	4b28      	ldr	r3, [pc, #160]	@ (80050bc <HAL_GPIO_Init+0x338>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	43db      	mvns	r3, r3
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4013      	ands	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800503e:	4a1f      	ldr	r2, [pc, #124]	@ (80050bc <HAL_GPIO_Init+0x338>)
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005044:	4b1d      	ldr	r3, [pc, #116]	@ (80050bc <HAL_GPIO_Init+0x338>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	43db      	mvns	r3, r3
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4013      	ands	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005068:	4a14      	ldr	r2, [pc, #80]	@ (80050bc <HAL_GPIO_Init+0x338>)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	3301      	adds	r3, #1
 8005072:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	fa22 f303 	lsr.w	r3, r2, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	f47f ae88 	bne.w	8004d94 <HAL_GPIO_Init+0x10>
  }
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	40023800 	.word	0x40023800
 8005094:	40013800 	.word	0x40013800
 8005098:	40020000 	.word	0x40020000
 800509c:	40020400 	.word	0x40020400
 80050a0:	40020800 	.word	0x40020800
 80050a4:	40020c00 	.word	0x40020c00
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40021400 	.word	0x40021400
 80050b0:	40021800 	.word	0x40021800
 80050b4:	40021c00 	.word	0x40021c00
 80050b8:	40022000 	.word	0x40022000
 80050bc:	40013c00 	.word	0x40013c00

080050c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	460b      	mov	r3, r1
 80050ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691a      	ldr	r2, [r3, #16]
 80050d0:	887b      	ldrh	r3, [r7, #2]
 80050d2:	4013      	ands	r3, r2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d002      	beq.n	80050de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80050d8:	2301      	movs	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
 80050dc:	e001      	b.n	80050e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80050de:	2300      	movs	r3, #0
 80050e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80050e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr

080050ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b083      	sub	sp, #12
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	460b      	mov	r3, r1
 80050f8:	807b      	strh	r3, [r7, #2]
 80050fa:	4613      	mov	r3, r2
 80050fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050fe:	787b      	ldrb	r3, [r7, #1]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005104:	887a      	ldrh	r2, [r7, #2]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800510a:	e003      	b.n	8005114 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800510c:	887b      	ldrh	r3, [r7, #2]
 800510e:	041a      	lsls	r2, r3, #16
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	619a      	str	r2, [r3, #24]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
	...

08005120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e12b      	b.n	800538a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fe faaa 	bl	80036a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2224      	movs	r2, #36	@ 0x24
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0201 	bic.w	r2, r2, #1
 8005162:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005172:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005182:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005184:	f001 fd2e 	bl	8006be4 <HAL_RCC_GetPCLK1Freq>
 8005188:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4a81      	ldr	r2, [pc, #516]	@ (8005394 <HAL_I2C_Init+0x274>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d807      	bhi.n	80051a4 <HAL_I2C_Init+0x84>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a80      	ldr	r2, [pc, #512]	@ (8005398 <HAL_I2C_Init+0x278>)
 8005198:	4293      	cmp	r3, r2
 800519a:	bf94      	ite	ls
 800519c:	2301      	movls	r3, #1
 800519e:	2300      	movhi	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	e006      	b.n	80051b2 <HAL_I2C_Init+0x92>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4a7d      	ldr	r2, [pc, #500]	@ (800539c <HAL_I2C_Init+0x27c>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	bf94      	ite	ls
 80051ac:	2301      	movls	r3, #1
 80051ae:	2300      	movhi	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e0e7      	b.n	800538a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4a78      	ldr	r2, [pc, #480]	@ (80053a0 <HAL_I2C_Init+0x280>)
 80051be:	fba2 2303 	umull	r2, r3, r2, r3
 80051c2:	0c9b      	lsrs	r3, r3, #18
 80051c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	430a      	orrs	r2, r1
 80051d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	4a6a      	ldr	r2, [pc, #424]	@ (8005394 <HAL_I2C_Init+0x274>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d802      	bhi.n	80051f4 <HAL_I2C_Init+0xd4>
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	3301      	adds	r3, #1
 80051f2:	e009      	b.n	8005208 <HAL_I2C_Init+0xe8>
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80051fa:	fb02 f303 	mul.w	r3, r2, r3
 80051fe:	4a69      	ldr	r2, [pc, #420]	@ (80053a4 <HAL_I2C_Init+0x284>)
 8005200:	fba2 2303 	umull	r2, r3, r2, r3
 8005204:	099b      	lsrs	r3, r3, #6
 8005206:	3301      	adds	r3, #1
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	430b      	orrs	r3, r1
 800520e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	69db      	ldr	r3, [r3, #28]
 8005216:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800521a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	495c      	ldr	r1, [pc, #368]	@ (8005394 <HAL_I2C_Init+0x274>)
 8005224:	428b      	cmp	r3, r1
 8005226:	d819      	bhi.n	800525c <HAL_I2C_Init+0x13c>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1e59      	subs	r1, r3, #1
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	fbb1 f3f3 	udiv	r3, r1, r3
 8005236:	1c59      	adds	r1, r3, #1
 8005238:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800523c:	400b      	ands	r3, r1
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_I2C_Init+0x138>
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1e59      	subs	r1, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	005b      	lsls	r3, r3, #1
 800524c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005250:	3301      	adds	r3, #1
 8005252:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005256:	e051      	b.n	80052fc <HAL_I2C_Init+0x1dc>
 8005258:	2304      	movs	r3, #4
 800525a:	e04f      	b.n	80052fc <HAL_I2C_Init+0x1dc>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d111      	bne.n	8005288 <HAL_I2C_Init+0x168>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	1e58      	subs	r0, r3, #1
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6859      	ldr	r1, [r3, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	440b      	add	r3, r1
 8005272:	fbb0 f3f3 	udiv	r3, r0, r3
 8005276:	3301      	adds	r3, #1
 8005278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf0c      	ite	eq
 8005280:	2301      	moveq	r3, #1
 8005282:	2300      	movne	r3, #0
 8005284:	b2db      	uxtb	r3, r3
 8005286:	e012      	b.n	80052ae <HAL_I2C_Init+0x18e>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	1e58      	subs	r0, r3, #1
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6859      	ldr	r1, [r3, #4]
 8005290:	460b      	mov	r3, r1
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	0099      	lsls	r1, r3, #2
 8005298:	440b      	add	r3, r1
 800529a:	fbb0 f3f3 	udiv	r3, r0, r3
 800529e:	3301      	adds	r3, #1
 80052a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf0c      	ite	eq
 80052a8:	2301      	moveq	r3, #1
 80052aa:	2300      	movne	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d001      	beq.n	80052b6 <HAL_I2C_Init+0x196>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e022      	b.n	80052fc <HAL_I2C_Init+0x1dc>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10e      	bne.n	80052dc <HAL_I2C_Init+0x1bc>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1e58      	subs	r0, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6859      	ldr	r1, [r3, #4]
 80052c6:	460b      	mov	r3, r1
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	440b      	add	r3, r1
 80052cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80052d0:	3301      	adds	r3, #1
 80052d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80052da:	e00f      	b.n	80052fc <HAL_I2C_Init+0x1dc>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	1e58      	subs	r0, r3, #1
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6859      	ldr	r1, [r3, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	0099      	lsls	r1, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80052f2:	3301      	adds	r3, #1
 80052f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052fc:	6879      	ldr	r1, [r7, #4]
 80052fe:	6809      	ldr	r1, [r1, #0]
 8005300:	4313      	orrs	r3, r2
 8005302:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	69da      	ldr	r2, [r3, #28]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	431a      	orrs	r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800532a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	6911      	ldr	r1, [r2, #16]
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	68d2      	ldr	r2, [r2, #12]
 8005336:	4311      	orrs	r1, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	430b      	orrs	r3, r1
 800533e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695a      	ldr	r2, [r3, #20]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	430a      	orrs	r2, r1
 800535a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f042 0201 	orr.w	r2, r2, #1
 800536a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	000186a0 	.word	0x000186a0
 8005398:	001e847f 	.word	0x001e847f
 800539c:	003d08ff 	.word	0x003d08ff
 80053a0:	431bde83 	.word	0x431bde83
 80053a4:	10624dd3 	.word	0x10624dd3

080053a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b088      	sub	sp, #32
 80053ac:	af02      	add	r7, sp, #8
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	4608      	mov	r0, r1
 80053b2:	4611      	mov	r1, r2
 80053b4:	461a      	mov	r2, r3
 80053b6:	4603      	mov	r3, r0
 80053b8:	817b      	strh	r3, [r7, #10]
 80053ba:	460b      	mov	r3, r1
 80053bc:	813b      	strh	r3, [r7, #8]
 80053be:	4613      	mov	r3, r2
 80053c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053c2:	f7fe fc7f 	bl	8003cc4 <HAL_GetTick>
 80053c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b20      	cmp	r3, #32
 80053d2:	f040 80d9 	bne.w	8005588 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	2319      	movs	r3, #25
 80053dc:	2201      	movs	r2, #1
 80053de:	496d      	ldr	r1, [pc, #436]	@ (8005594 <HAL_I2C_Mem_Write+0x1ec>)
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 fdb9 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80053ec:	2302      	movs	r3, #2
 80053ee:	e0cc      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_I2C_Mem_Write+0x56>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e0c5      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0301 	and.w	r3, r3, #1
 8005410:	2b01      	cmp	r3, #1
 8005412:	d007      	beq.n	8005424 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005432:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2221      	movs	r2, #33	@ 0x21
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2240      	movs	r2, #64	@ 0x40
 8005440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a3a      	ldr	r2, [r7, #32]
 800544e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005454:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a4d      	ldr	r2, [pc, #308]	@ (8005598 <HAL_I2C_Mem_Write+0x1f0>)
 8005464:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005466:	88f8      	ldrh	r0, [r7, #6]
 8005468:	893a      	ldrh	r2, [r7, #8]
 800546a:	8979      	ldrh	r1, [r7, #10]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	4603      	mov	r3, r0
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 fbf0 	bl	8005c5c <I2C_RequestMemoryWrite>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d052      	beq.n	8005528 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e081      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 fe7e 	bl	800618c <I2C_WaitOnTXEFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00d      	beq.n	80054b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	2b04      	cmp	r3, #4
 800549c:	d107      	bne.n	80054ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e06b      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	781a      	ldrb	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c2:	1c5a      	adds	r2, r3, #1
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d11b      	bne.n	8005528 <HAL_I2C_Mem_Write+0x180>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054fc:	781a      	ldrb	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	3b01      	subs	r3, #1
 8005522:	b29a      	uxth	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1aa      	bne.n	8005486 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005530:	697a      	ldr	r2, [r7, #20]
 8005532:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 fe71 	bl	800621c <I2C_WaitOnBTFFlagUntilTimeout>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00d      	beq.n	800555c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005544:	2b04      	cmp	r3, #4
 8005546:	d107      	bne.n	8005558 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005556:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e016      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800556a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2200      	movs	r2, #0
 8005580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005584:	2300      	movs	r3, #0
 8005586:	e000      	b.n	800558a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005588:	2302      	movs	r3, #2
  }
}
 800558a:	4618      	mov	r0, r3
 800558c:	3718      	adds	r7, #24
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	00100002 	.word	0x00100002
 8005598:	ffff0000 	.word	0xffff0000

0800559c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b08c      	sub	sp, #48	@ 0x30
 80055a0:	af02      	add	r7, sp, #8
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	4608      	mov	r0, r1
 80055a6:	4611      	mov	r1, r2
 80055a8:	461a      	mov	r2, r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	817b      	strh	r3, [r7, #10]
 80055ae:	460b      	mov	r3, r1
 80055b0:	813b      	strh	r3, [r7, #8]
 80055b2:	4613      	mov	r3, r2
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055b6:	f7fe fb85 	bl	8003cc4 <HAL_GetTick>
 80055ba:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b20      	cmp	r3, #32
 80055c6:	f040 8214 	bne.w	80059f2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	2319      	movs	r3, #25
 80055d0:	2201      	movs	r2, #1
 80055d2:	497b      	ldr	r1, [pc, #492]	@ (80057c0 <HAL_I2C_Mem_Read+0x224>)
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f000 fcbf 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d001      	beq.n	80055e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80055e0:	2302      	movs	r3, #2
 80055e2:	e207      	b.n	80059f4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_I2C_Mem_Read+0x56>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e200      	b.n	80059f4 <HAL_I2C_Mem_Read+0x458>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d007      	beq.n	8005618 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0201 	orr.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005626:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2222      	movs	r2, #34	@ 0x22
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2240      	movs	r2, #64	@ 0x40
 8005634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005642:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005648:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564e:	b29a      	uxth	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a5b      	ldr	r2, [pc, #364]	@ (80057c4 <HAL_I2C_Mem_Read+0x228>)
 8005658:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800565a:	88f8      	ldrh	r0, [r7, #6]
 800565c:	893a      	ldrh	r2, [r7, #8]
 800565e:	8979      	ldrh	r1, [r7, #10]
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	4603      	mov	r3, r0
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fb8c 	bl	8005d88 <I2C_RequestMemoryRead>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e1bc      	b.n	80059f4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800567e:	2b00      	cmp	r3, #0
 8005680:	d113      	bne.n	80056aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005682:	2300      	movs	r3, #0
 8005684:	623b      	str	r3, [r7, #32]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	623b      	str	r3, [r7, #32]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	623b      	str	r3, [r7, #32]
 8005696:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	e190      	b.n	80059cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d11b      	bne.n	80056ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056c2:	2300      	movs	r3, #0
 80056c4:	61fb      	str	r3, [r7, #28]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	61fb      	str	r3, [r7, #28]
 80056d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e170      	b.n	80059cc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d11b      	bne.n	800572a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005700:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005710:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005712:	2300      	movs	r3, #0
 8005714:	61bb      	str	r3, [r7, #24]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	e150      	b.n	80059cc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572a:	2300      	movs	r3, #0
 800572c:	617b      	str	r3, [r7, #20]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	617b      	str	r3, [r7, #20]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005740:	e144      	b.n	80059cc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005746:	2b03      	cmp	r3, #3
 8005748:	f200 80f1 	bhi.w	800592e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005750:	2b01      	cmp	r3, #1
 8005752:	d123      	bne.n	800579c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005756:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 fda7 	bl	80062ac <I2C_WaitOnRXNEFlagUntilTimeout>
 800575e:	4603      	mov	r3, r0
 8005760:	2b00      	cmp	r3, #0
 8005762:	d001      	beq.n	8005768 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e145      	b.n	80059f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005784:	3b01      	subs	r3, #1
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800579a:	e117      	b.n	80059cc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d14e      	bne.n	8005842 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	2200      	movs	r2, #0
 80057ac:	4906      	ldr	r1, [pc, #24]	@ (80057c8 <HAL_I2C_Mem_Read+0x22c>)
 80057ae:	68f8      	ldr	r0, [r7, #12]
 80057b0:	f000 fbd2 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d008      	beq.n	80057cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e11a      	b.n	80059f4 <HAL_I2C_Mem_Read+0x458>
 80057be:	bf00      	nop
 80057c0:	00100002 	.word	0x00100002
 80057c4:	ffff0000 	.word	0xffff0000
 80057c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	691a      	ldr	r2, [r3, #16]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800582a:	3b01      	subs	r3, #1
 800582c:	b29a      	uxth	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005840:	e0c4      	b.n	80059cc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	2200      	movs	r2, #0
 800584a:	496c      	ldr	r1, [pc, #432]	@ (80059fc <HAL_I2C_Mem_Read+0x460>)
 800584c:	68f8      	ldr	r0, [r7, #12]
 800584e:	f000 fb83 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d001      	beq.n	800585c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e0cb      	b.n	80059f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800586a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691a      	ldr	r2, [r3, #16]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	b2d2      	uxtb	r2, r2
 8005878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	1c5a      	adds	r2, r3, #1
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005888:	3b01      	subs	r3, #1
 800588a:	b29a      	uxth	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800589e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	2200      	movs	r2, #0
 80058a6:	4955      	ldr	r1, [pc, #340]	@ (80059fc <HAL_I2C_Mem_Read+0x460>)
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 fb55 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e09d      	b.n	80059f4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	691a      	ldr	r2, [r3, #16]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	691a      	ldr	r2, [r3, #16]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005904:	b2d2      	uxtb	r2, r2
 8005906:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005916:	3b01      	subs	r3, #1
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005922:	b29b      	uxth	r3, r3
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800592c:	e04e      	b.n	80059cc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800592e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005930:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 fcba 	bl	80062ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e058      	b.n	80059f4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691a      	ldr	r2, [r3, #16]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800594c:	b2d2      	uxtb	r2, r2
 800594e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	1c5a      	adds	r2, r3, #1
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800595e:	3b01      	subs	r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596a:	b29b      	uxth	r3, r3
 800596c:	3b01      	subs	r3, #1
 800596e:	b29a      	uxth	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b04      	cmp	r3, #4
 8005980:	d124      	bne.n	80059cc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005986:	2b03      	cmp	r3, #3
 8005988:	d107      	bne.n	800599a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005998:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	691a      	ldr	r2, [r3, #16]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a4:	b2d2      	uxtb	r2, r2
 80059a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ac:	1c5a      	adds	r2, r3, #1
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059b6:	3b01      	subs	r3, #1
 80059b8:	b29a      	uxth	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f47f aeb6 	bne.w	8005742 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2220      	movs	r2, #32
 80059da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e000      	b.n	80059f4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80059f2:	2302      	movs	r3, #2
  }
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3728      	adds	r7, #40	@ 0x28
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	00010004 	.word	0x00010004

08005a00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	@ 0x28
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	607a      	str	r2, [r7, #4]
 8005a0a:	603b      	str	r3, [r7, #0]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005a10:	f7fe f958 	bl	8003cc4 <HAL_GetTick>
 8005a14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005a16:	2300      	movs	r3, #0
 8005a18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	f040 8111 	bne.w	8005c4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	2319      	movs	r3, #25
 8005a2e:	2201      	movs	r2, #1
 8005a30:	4988      	ldr	r1, [pc, #544]	@ (8005c54 <HAL_I2C_IsDeviceReady+0x254>)
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 fa90 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005a3e:	2302      	movs	r3, #2
 8005a40:	e104      	b.n	8005c4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d101      	bne.n	8005a50 <HAL_I2C_IsDeviceReady+0x50>
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	e0fd      	b.n	8005c4c <HAL_I2C_IsDeviceReady+0x24c>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d007      	beq.n	8005a76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f042 0201 	orr.w	r2, r2, #1
 8005a74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2224      	movs	r2, #36	@ 0x24
 8005a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4a70      	ldr	r2, [pc, #448]	@ (8005c58 <HAL_I2C_IsDeviceReady+0x258>)
 8005a98:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005aa8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f000 fa4e 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005abc:	4603      	mov	r3, r0
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00d      	beq.n	8005ade <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005acc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad0:	d103      	bne.n	8005ada <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ad8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005ada:	2303      	movs	r3, #3
 8005adc:	e0b6      	b.n	8005c4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ade:	897b      	ldrh	r3, [r7, #10]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005aec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005aee:	f7fe f8e9 	bl	8003cc4 <HAL_GetTick>
 8005af2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	bf0c      	ite	eq
 8005b02:	2301      	moveq	r3, #1
 8005b04:	2300      	movne	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b18:	bf0c      	ite	eq
 8005b1a:	2301      	moveq	r3, #1
 8005b1c:	2300      	movne	r3, #0
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b22:	e025      	b.n	8005b70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b24:	f7fe f8ce 	bl	8003cc4 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d302      	bcc.n	8005b3a <HAL_I2C_IsDeviceReady+0x13a>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d103      	bne.n	8005b42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	22a0      	movs	r2, #160	@ 0xa0
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b02      	cmp	r3, #2
 8005b4e:	bf0c      	ite	eq
 8005b50:	2301      	moveq	r3, #1
 8005b52:	2300      	movne	r3, #0
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b66:	bf0c      	ite	eq
 8005b68:	2301      	moveq	r3, #1
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b76:	b2db      	uxtb	r3, r3
 8005b78:	2ba0      	cmp	r3, #160	@ 0xa0
 8005b7a:	d005      	beq.n	8005b88 <HAL_I2C_IsDeviceReady+0x188>
 8005b7c:	7dfb      	ldrb	r3, [r7, #23]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d102      	bne.n	8005b88 <HAL_I2C_IsDeviceReady+0x188>
 8005b82:	7dbb      	ldrb	r3, [r7, #22]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d0cd      	beq.n	8005b24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695b      	ldr	r3, [r3, #20]
 8005b96:	f003 0302 	and.w	r3, r3, #2
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d129      	bne.n	8005bf2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bae:	2300      	movs	r3, #0
 8005bb0:	613b      	str	r3, [r7, #16]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	695b      	ldr	r3, [r3, #20]
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	9300      	str	r3, [sp, #0]
 8005bc8:	2319      	movs	r3, #25
 8005bca:	2201      	movs	r2, #1
 8005bcc:	4921      	ldr	r1, [pc, #132]	@ (8005c54 <HAL_I2C_IsDeviceReady+0x254>)
 8005bce:	68f8      	ldr	r0, [r7, #12]
 8005bd0:	f000 f9c2 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d001      	beq.n	8005bde <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e036      	b.n	8005c4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	e02c      	b.n	8005c4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	2319      	movs	r3, #25
 8005c12:	2201      	movs	r2, #1
 8005c14:	490f      	ldr	r1, [pc, #60]	@ (8005c54 <HAL_I2C_IsDeviceReady+0x254>)
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 f99e 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e012      	b.n	8005c4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	f4ff af32 	bcc.w	8005a9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005c4a:	2302      	movs	r3, #2
  }
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3720      	adds	r7, #32
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	00100002 	.word	0x00100002
 8005c58:	ffff0000 	.word	0xffff0000

08005c5c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b088      	sub	sp, #32
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	4608      	mov	r0, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	817b      	strh	r3, [r7, #10]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	813b      	strh	r3, [r7, #8]
 8005c72:	4613      	mov	r3, r2
 8005c74:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f960 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00d      	beq.n	8005cba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cac:	d103      	bne.n	8005cb6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e05f      	b.n	8005d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005cba:	897b      	ldrh	r3, [r7, #10]
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	492d      	ldr	r1, [pc, #180]	@ (8005d84 <I2C_RequestMemoryWrite+0x128>)
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f9bb 	bl	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e04c      	b.n	8005d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	617b      	str	r3, [r7, #20]
 8005cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf8:	6a39      	ldr	r1, [r7, #32]
 8005cfa:	68f8      	ldr	r0, [r7, #12]
 8005cfc:	f000 fa46 	bl	800618c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d00d      	beq.n	8005d22 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d107      	bne.n	8005d1e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e02b      	b.n	8005d7a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d105      	bne.n	8005d34 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d28:	893b      	ldrh	r3, [r7, #8]
 8005d2a:	b2da      	uxtb	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	611a      	str	r2, [r3, #16]
 8005d32:	e021      	b.n	8005d78 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d34:	893b      	ldrh	r3, [r7, #8]
 8005d36:	0a1b      	lsrs	r3, r3, #8
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d44:	6a39      	ldr	r1, [r7, #32]
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fa20 	bl	800618c <I2C_WaitOnTXEFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00d      	beq.n	8005d6e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d107      	bne.n	8005d6a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e005      	b.n	8005d7a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d6e:	893b      	ldrh	r3, [r7, #8]
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005d78:	2300      	movs	r3, #0
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3718      	adds	r7, #24
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	00010002 	.word	0x00010002

08005d88 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b088      	sub	sp, #32
 8005d8c:	af02      	add	r7, sp, #8
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	4608      	mov	r0, r1
 8005d92:	4611      	mov	r1, r2
 8005d94:	461a      	mov	r2, r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	817b      	strh	r3, [r7, #10]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	813b      	strh	r3, [r7, #8]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005db0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f8c2 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d00d      	beq.n	8005df6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005de8:	d103      	bne.n	8005df2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005df0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e0aa      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005df6:	897b      	ldrh	r3, [r7, #10]
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e08:	6a3a      	ldr	r2, [r7, #32]
 8005e0a:	4952      	ldr	r1, [pc, #328]	@ (8005f54 <I2C_RequestMemoryRead+0x1cc>)
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f000 f91d 	bl	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d001      	beq.n	8005e1c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e097      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	617b      	str	r3, [r7, #20]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	699b      	ldr	r3, [r3, #24]
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e34:	6a39      	ldr	r1, [r7, #32]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f9a8 	bl	800618c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d00d      	beq.n	8005e5e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d107      	bne.n	8005e5a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e076      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005e5e:	88fb      	ldrh	r3, [r7, #6]
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d105      	bne.n	8005e70 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e64:	893b      	ldrh	r3, [r7, #8]
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	611a      	str	r2, [r3, #16]
 8005e6e:	e021      	b.n	8005eb4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005e70:	893b      	ldrh	r3, [r7, #8]
 8005e72:	0a1b      	lsrs	r3, r3, #8
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e80:	6a39      	ldr	r1, [r7, #32]
 8005e82:	68f8      	ldr	r0, [r7, #12]
 8005e84:	f000 f982 	bl	800618c <I2C_WaitOnTXEFlagUntilTimeout>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00d      	beq.n	8005eaa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e92:	2b04      	cmp	r3, #4
 8005e94:	d107      	bne.n	8005ea6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ea4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e050      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005eaa:	893b      	ldrh	r3, [r7, #8]
 8005eac:	b2da      	uxtb	r2, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eb6:	6a39      	ldr	r1, [r7, #32]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f967 	bl	800618c <I2C_WaitOnTXEFlagUntilTimeout>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d00d      	beq.n	8005ee0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d107      	bne.n	8005edc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eda:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e035      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005eee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005efc:	68f8      	ldr	r0, [r7, #12]
 8005efe:	f000 f82b 	bl	8005f58 <I2C_WaitOnFlagUntilTimeout>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00d      	beq.n	8005f24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f16:	d103      	bne.n	8005f20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e013      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005f24:	897b      	ldrh	r3, [r7, #10]
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	f043 0301 	orr.w	r3, r3, #1
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f36:	6a3a      	ldr	r2, [r7, #32]
 8005f38:	4906      	ldr	r1, [pc, #24]	@ (8005f54 <I2C_RequestMemoryRead+0x1cc>)
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f886 	bl	800604c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	00010002 	.word	0x00010002

08005f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b084      	sub	sp, #16
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	603b      	str	r3, [r7, #0]
 8005f64:	4613      	mov	r3, r2
 8005f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f68:	e048      	b.n	8005ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d044      	beq.n	8005ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f72:	f7fd fea7 	bl	8003cc4 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d302      	bcc.n	8005f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d139      	bne.n	8005ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	0c1b      	lsrs	r3, r3, #16
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d10d      	bne.n	8005fae <I2C_WaitOnFlagUntilTimeout+0x56>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	43da      	mvns	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	e00c      	b.n	8005fc8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	43da      	mvns	r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	4013      	ands	r3, r2
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	bf0c      	ite	eq
 8005fc0:	2301      	moveq	r3, #1
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	79fb      	ldrb	r3, [r7, #7]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d116      	bne.n	8005ffc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2220      	movs	r2, #32
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe8:	f043 0220 	orr.w	r2, r3, #32
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e023      	b.n	8006044 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	0c1b      	lsrs	r3, r3, #16
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b01      	cmp	r3, #1
 8006004:	d10d      	bne.n	8006022 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	43da      	mvns	r2, r3
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	4013      	ands	r3, r2
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	bf0c      	ite	eq
 8006018:	2301      	moveq	r3, #1
 800601a:	2300      	movne	r3, #0
 800601c:	b2db      	uxtb	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	e00c      	b.n	800603c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	43da      	mvns	r2, r3
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4013      	ands	r3, r2
 800602e:	b29b      	uxth	r3, r3
 8006030:	2b00      	cmp	r3, #0
 8006032:	bf0c      	ite	eq
 8006034:	2301      	moveq	r3, #1
 8006036:	2300      	movne	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	79fb      	ldrb	r3, [r7, #7]
 800603e:	429a      	cmp	r2, r3
 8006040:	d093      	beq.n	8005f6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800605a:	e071      	b.n	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800606a:	d123      	bne.n	80060b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800607a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006084:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2220      	movs	r2, #32
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a0:	f043 0204 	orr.w	r2, r3, #4
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e067      	b.n	8006184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ba:	d041      	beq.n	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060bc:	f7fd fe02 	bl	8003cc4 <HAL_GetTick>
 80060c0:	4602      	mov	r2, r0
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d302      	bcc.n	80060d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d136      	bne.n	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80060d2:	68bb      	ldr	r3, [r7, #8]
 80060d4:	0c1b      	lsrs	r3, r3, #16
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d10c      	bne.n	80060f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	43da      	mvns	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	4013      	ands	r3, r2
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	bf14      	ite	ne
 80060ee:	2301      	movne	r3, #1
 80060f0:	2300      	moveq	r3, #0
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	e00b      	b.n	800610e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	43da      	mvns	r2, r3
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	4013      	ands	r3, r2
 8006102:	b29b      	uxth	r3, r3
 8006104:	2b00      	cmp	r3, #0
 8006106:	bf14      	ite	ne
 8006108:	2301      	movne	r3, #1
 800610a:	2300      	moveq	r3, #0
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d016      	beq.n	8006140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612c:	f043 0220 	orr.w	r2, r3, #32
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e021      	b.n	8006184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	0c1b      	lsrs	r3, r3, #16
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b01      	cmp	r3, #1
 8006148:	d10c      	bne.n	8006164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	43da      	mvns	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4013      	ands	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e00b      	b.n	800617c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	43da      	mvns	r2, r3
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	4013      	ands	r3, r2
 8006170:	b29b      	uxth	r3, r3
 8006172:	2b00      	cmp	r3, #0
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	f47f af6d 	bne.w	800605c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006198:	e034      	b.n	8006204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f8e3 	bl	8006366 <I2C_IsAcknowledgeFailed>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e034      	b.n	8006214 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d028      	beq.n	8006204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b2:	f7fd fd87 	bl	8003cc4 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d302      	bcc.n	80061c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11d      	bne.n	8006204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061d2:	2b80      	cmp	r3, #128	@ 0x80
 80061d4:	d016      	beq.n	8006204 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f0:	f043 0220 	orr.w	r2, r3, #32
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e007      	b.n	8006214 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800620e:	2b80      	cmp	r3, #128	@ 0x80
 8006210:	d1c3      	bne.n	800619a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006228:	e034      	b.n	8006294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f000 f89b 	bl	8006366 <I2C_IsAcknowledgeFailed>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e034      	b.n	80062a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006240:	d028      	beq.n	8006294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006242:	f7fd fd3f 	bl	8003cc4 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	68ba      	ldr	r2, [r7, #8]
 800624e:	429a      	cmp	r2, r3
 8006250:	d302      	bcc.n	8006258 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d11d      	bne.n	8006294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b04      	cmp	r3, #4
 8006264:	d016      	beq.n	8006294 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006280:	f043 0220 	orr.w	r2, r3, #32
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e007      	b.n	80062a4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	f003 0304 	and.w	r3, r3, #4
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d1c3      	bne.n	800622a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3710      	adds	r7, #16
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062b8:	e049      	b.n	800634e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f003 0310 	and.w	r3, r3, #16
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d119      	bne.n	80062fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f06f 0210 	mvn.w	r2, #16
 80062d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e030      	b.n	800635e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fc:	f7fd fce2 	bl	8003cc4 <HAL_GetTick>
 8006300:	4602      	mov	r2, r0
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	429a      	cmp	r2, r3
 800630a:	d302      	bcc.n	8006312 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d11d      	bne.n	800634e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	695b      	ldr	r3, [r3, #20]
 8006318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800631c:	2b40      	cmp	r3, #64	@ 0x40
 800631e:	d016      	beq.n	800634e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2220      	movs	r2, #32
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800633a:	f043 0220 	orr.w	r2, r3, #32
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e007      	b.n	800635e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006358:	2b40      	cmp	r3, #64	@ 0x40
 800635a:	d1ae      	bne.n	80062ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800635c:	2300      	movs	r3, #0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006378:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800637c:	d11b      	bne.n	80063b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006386:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	f043 0204 	orr.w	r2, r3, #4
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	bc80      	pop	{r7}
 80063c0:	4770      	bx	lr
	...

080063c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08a      	sub	sp, #40	@ 0x28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d101      	bne.n	80063d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e23b      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d050      	beq.n	8006484 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063e2:	4b9e      	ldr	r3, [pc, #632]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f003 030c 	and.w	r3, r3, #12
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d00c      	beq.n	8006408 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063ee:	4b9b      	ldr	r3, [pc, #620]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80063f6:	2b08      	cmp	r3, #8
 80063f8:	d112      	bne.n	8006420 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80063fa:	4b98      	ldr	r3, [pc, #608]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006402:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006406:	d10b      	bne.n	8006420 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006408:	4b94      	ldr	r3, [pc, #592]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d036      	beq.n	8006482 <HAL_RCC_OscConfig+0xbe>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d132      	bne.n	8006482 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e216      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	4b8e      	ldr	r3, [pc, #568]	@ (8006660 <HAL_RCC_OscConfig+0x29c>)
 8006426:	b2d2      	uxtb	r2, r2
 8006428:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d013      	beq.n	800645a <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006432:	f7fd fc47 	bl	8003cc4 <HAL_GetTick>
 8006436:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006438:	e008      	b.n	800644c <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800643a:	f7fd fc43 	bl	8003cc4 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	2b64      	cmp	r3, #100	@ 0x64
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e200      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800644c:	4b83      	ldr	r3, [pc, #524]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d0f0      	beq.n	800643a <HAL_RCC_OscConfig+0x76>
 8006458:	e014      	b.n	8006484 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800645a:	f7fd fc33 	bl	8003cc4 <HAL_GetTick>
 800645e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006460:	e008      	b.n	8006474 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006462:	f7fd fc2f 	bl	8003cc4 <HAL_GetTick>
 8006466:	4602      	mov	r2, r0
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	1ad3      	subs	r3, r2, r3
 800646c:	2b64      	cmp	r3, #100	@ 0x64
 800646e:	d901      	bls.n	8006474 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e1ec      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006474:	4b79      	ldr	r3, [pc, #484]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1f0      	bne.n	8006462 <HAL_RCC_OscConfig+0x9e>
 8006480:	e000      	b.n	8006484 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006482:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d077      	beq.n	8006580 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006490:	4b72      	ldr	r3, [pc, #456]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 030c 	and.w	r3, r3, #12
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800649c:	4b6f      	ldr	r3, [pc, #444]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d126      	bne.n	80064f6 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80064a8:	4b6c      	ldr	r3, [pc, #432]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d120      	bne.n	80064f6 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064b4:	4b69      	ldr	r3, [pc, #420]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f003 0302 	and.w	r3, r3, #2
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d005      	beq.n	80064cc <HAL_RCC_OscConfig+0x108>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d001      	beq.n	80064cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e1c0      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064cc:	4b63      	ldr	r3, [pc, #396]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	691b      	ldr	r3, [r3, #16]
 80064d8:	21f8      	movs	r1, #248	@ 0xf8
 80064da:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064dc:	69b9      	ldr	r1, [r7, #24]
 80064de:	fa91 f1a1 	rbit	r1, r1
 80064e2:	6179      	str	r1, [r7, #20]
  return result;
 80064e4:	6979      	ldr	r1, [r7, #20]
 80064e6:	fab1 f181 	clz	r1, r1
 80064ea:	b2c9      	uxtb	r1, r1
 80064ec:	408b      	lsls	r3, r1
 80064ee:	495b      	ldr	r1, [pc, #364]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80064f4:	e044      	b.n	8006580 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d02a      	beq.n	8006554 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064fe:	4b59      	ldr	r3, [pc, #356]	@ (8006664 <HAL_RCC_OscConfig+0x2a0>)
 8006500:	2201      	movs	r2, #1
 8006502:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006504:	f7fd fbde 	bl	8003cc4 <HAL_GetTick>
 8006508:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800650c:	f7fd fbda 	bl	8003cc4 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e197      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800651e:	4b4f      	ldr	r3, [pc, #316]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0f0      	beq.n	800650c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800652a:	4b4c      	ldr	r3, [pc, #304]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	21f8      	movs	r1, #248	@ 0xf8
 8006538:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653a:	6939      	ldr	r1, [r7, #16]
 800653c:	fa91 f1a1 	rbit	r1, r1
 8006540:	60f9      	str	r1, [r7, #12]
  return result;
 8006542:	68f9      	ldr	r1, [r7, #12]
 8006544:	fab1 f181 	clz	r1, r1
 8006548:	b2c9      	uxtb	r1, r1
 800654a:	408b      	lsls	r3, r1
 800654c:	4943      	ldr	r1, [pc, #268]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 800654e:	4313      	orrs	r3, r2
 8006550:	600b      	str	r3, [r1, #0]
 8006552:	e015      	b.n	8006580 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006554:	4b43      	ldr	r3, [pc, #268]	@ (8006664 <HAL_RCC_OscConfig+0x2a0>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800655a:	f7fd fbb3 	bl	8003cc4 <HAL_GetTick>
 800655e:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006560:	e008      	b.n	8006574 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006562:	f7fd fbaf 	bl	8003cc4 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d901      	bls.n	8006574 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e16c      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006574:	4b39      	ldr	r3, [pc, #228]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1f0      	bne.n	8006562 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b00      	cmp	r3, #0
 800658a:	d030      	beq.n	80065ee <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	695b      	ldr	r3, [r3, #20]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d016      	beq.n	80065c2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006594:	4b34      	ldr	r3, [pc, #208]	@ (8006668 <HAL_RCC_OscConfig+0x2a4>)
 8006596:	2201      	movs	r2, #1
 8006598:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800659a:	f7fd fb93 	bl	8003cc4 <HAL_GetTick>
 800659e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065a0:	e008      	b.n	80065b4 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065a2:	f7fd fb8f 	bl	8003cc4 <HAL_GetTick>
 80065a6:	4602      	mov	r2, r0
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	1ad3      	subs	r3, r2, r3
 80065ac:	2b02      	cmp	r3, #2
 80065ae:	d901      	bls.n	80065b4 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80065b0:	2303      	movs	r3, #3
 80065b2:	e14c      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065b4:	4b29      	ldr	r3, [pc, #164]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 80065b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d0f0      	beq.n	80065a2 <HAL_RCC_OscConfig+0x1de>
 80065c0:	e015      	b.n	80065ee <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80065c2:	4b29      	ldr	r3, [pc, #164]	@ (8006668 <HAL_RCC_OscConfig+0x2a4>)
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065c8:	f7fd fb7c 	bl	8003cc4 <HAL_GetTick>
 80065cc:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065ce:	e008      	b.n	80065e2 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80065d0:	f7fd fb78 	bl	8003cc4 <HAL_GetTick>
 80065d4:	4602      	mov	r2, r0
 80065d6:	6a3b      	ldr	r3, [r7, #32]
 80065d8:	1ad3      	subs	r3, r2, r3
 80065da:	2b02      	cmp	r3, #2
 80065dc:	d901      	bls.n	80065e2 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80065de:	2303      	movs	r3, #3
 80065e0:	e135      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80065e2:	4b1e      	ldr	r3, [pc, #120]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 80065e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1f0      	bne.n	80065d0 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f003 0304 	and.w	r3, r3, #4
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 8087 	beq.w	800670a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065fc:	2300      	movs	r3, #0
 80065fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006602:	4b16      	ldr	r3, [pc, #88]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 8006604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d110      	bne.n	8006630 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800660e:	2300      	movs	r3, #0
 8006610:	60bb      	str	r3, [r7, #8]
 8006612:	4b12      	ldr	r3, [pc, #72]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	4a11      	ldr	r2, [pc, #68]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 8006618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800661c:	6413      	str	r3, [r2, #64]	@ 0x40
 800661e:	4b0f      	ldr	r3, [pc, #60]	@ (800665c <HAL_RCC_OscConfig+0x298>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006626:	60bb      	str	r3, [r7, #8]
 8006628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006630:	4b0e      	ldr	r3, [pc, #56]	@ (800666c <HAL_RCC_OscConfig+0x2a8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a0d      	ldr	r2, [pc, #52]	@ (800666c <HAL_RCC_OscConfig+0x2a8>)
 8006636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800663a:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800663c:	4b0b      	ldr	r3, [pc, #44]	@ (800666c <HAL_RCC_OscConfig+0x2a8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006644:	2b00      	cmp	r3, #0
 8006646:	d122      	bne.n	800668e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006648:	4b08      	ldr	r3, [pc, #32]	@ (800666c <HAL_RCC_OscConfig+0x2a8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a07      	ldr	r2, [pc, #28]	@ (800666c <HAL_RCC_OscConfig+0x2a8>)
 800664e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006652:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006654:	f7fd fb36 	bl	8003cc4 <HAL_GetTick>
 8006658:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800665a:	e012      	b.n	8006682 <HAL_RCC_OscConfig+0x2be>
 800665c:	40023800 	.word	0x40023800
 8006660:	40023802 	.word	0x40023802
 8006664:	42470000 	.word	0x42470000
 8006668:	42470e80 	.word	0x42470e80
 800666c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006670:	f7fd fb28 	bl	8003cc4 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b02      	cmp	r3, #2
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e0e5      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006682:	4b75      	ldr	r3, [pc, #468]	@ (8006858 <HAL_RCC_OscConfig+0x494>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689a      	ldr	r2, [r3, #8]
 8006692:	4b72      	ldr	r3, [pc, #456]	@ (800685c <HAL_RCC_OscConfig+0x498>)
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d015      	beq.n	80066cc <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066a0:	f7fd fb10 	bl	8003cc4 <HAL_GetTick>
 80066a4:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066a6:	e00a      	b.n	80066be <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066a8:	f7fd fb0c 	bl	8003cc4 <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d901      	bls.n	80066be <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e0c7      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066be:	4b68      	ldr	r3, [pc, #416]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 80066c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d0ee      	beq.n	80066a8 <HAL_RCC_OscConfig+0x2e4>
 80066ca:	e014      	b.n	80066f6 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066cc:	f7fd fafa 	bl	8003cc4 <HAL_GetTick>
 80066d0:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066d2:	e00a      	b.n	80066ea <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80066d4:	f7fd faf6 	bl	8003cc4 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e0b1      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 80066ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d1ee      	bne.n	80066d4 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d105      	bne.n	800670a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066fe:	4b58      	ldr	r3, [pc, #352]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	4a57      	ldr	r2, [pc, #348]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 8006704:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006708:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 809c 	beq.w	800684c <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006714:	4b52      	ldr	r3, [pc, #328]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 030c 	and.w	r3, r3, #12
 800671c:	2b08      	cmp	r3, #8
 800671e:	d061      	beq.n	80067e4 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	2b02      	cmp	r3, #2
 8006726:	d146      	bne.n	80067b6 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006728:	4b4e      	ldr	r3, [pc, #312]	@ (8006864 <HAL_RCC_OscConfig+0x4a0>)
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672e:	f7fd fac9 	bl	8003cc4 <HAL_GetTick>
 8006732:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006734:	e008      	b.n	8006748 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006736:	f7fd fac5 	bl	8003cc4 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b64      	cmp	r3, #100	@ 0x64
 8006742:	d901      	bls.n	8006748 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e082      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006748:	4b45      	ldr	r3, [pc, #276]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1f0      	bne.n	8006736 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006754:	4b42      	ldr	r3, [pc, #264]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	4b43      	ldr	r3, [pc, #268]	@ (8006868 <HAL_RCC_OscConfig+0x4a4>)
 800675a:	4013      	ands	r3, r2
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	69d1      	ldr	r1, [r2, #28]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6a12      	ldr	r2, [r2, #32]
 8006764:	4311      	orrs	r1, r2
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800676a:	0192      	lsls	r2, r2, #6
 800676c:	4311      	orrs	r1, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006772:	0612      	lsls	r2, r2, #24
 8006774:	4311      	orrs	r1, r2
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800677a:	0852      	lsrs	r2, r2, #1
 800677c:	3a01      	subs	r2, #1
 800677e:	0412      	lsls	r2, r2, #16
 8006780:	430a      	orrs	r2, r1
 8006782:	4937      	ldr	r1, [pc, #220]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 8006784:	4313      	orrs	r3, r2
 8006786:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006788:	4b36      	ldr	r3, [pc, #216]	@ (8006864 <HAL_RCC_OscConfig+0x4a0>)
 800678a:	2201      	movs	r2, #1
 800678c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800678e:	f7fd fa99 	bl	8003cc4 <HAL_GetTick>
 8006792:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006796:	f7fd fa95 	bl	8003cc4 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b64      	cmp	r3, #100	@ 0x64
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e052      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0f0      	beq.n	8006796 <HAL_RCC_OscConfig+0x3d2>
 80067b4:	e04a      	b.n	800684c <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b6:	4b2b      	ldr	r3, [pc, #172]	@ (8006864 <HAL_RCC_OscConfig+0x4a0>)
 80067b8:	2200      	movs	r2, #0
 80067ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067bc:	f7fd fa82 	bl	8003cc4 <HAL_GetTick>
 80067c0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067c2:	e008      	b.n	80067d6 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80067c4:	f7fd fa7e 	bl	8003cc4 <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	2b64      	cmp	r3, #100	@ 0x64
 80067d0:	d901      	bls.n	80067d6 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e03b      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80067d6:	4b22      	ldr	r3, [pc, #136]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d1f0      	bne.n	80067c4 <HAL_RCC_OscConfig+0x400>
 80067e2:	e033      	b.n	800684c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d101      	bne.n	80067f0 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e02e      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 80067f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006860 <HAL_RCC_OscConfig+0x49c>)
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	429a      	cmp	r2, r3
 8006802:	d121      	bne.n	8006848 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800680e:	429a      	cmp	r2, r3
 8006810:	d11a      	bne.n	8006848 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006812:	69fa      	ldr	r2, [r7, #28]
 8006814:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006818:	4013      	ands	r3, r2
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800681e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006820:	4293      	cmp	r3, r2
 8006822:	d111      	bne.n	8006848 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682e:	085b      	lsrs	r3, r3, #1
 8006830:	3b01      	subs	r3, #1
 8006832:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006834:	429a      	cmp	r2, r3
 8006836:	d107      	bne.n	8006848 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006842:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006844:	429a      	cmp	r2, r3
 8006846:	d001      	beq.n	800684c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e000      	b.n	800684e <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3728      	adds	r7, #40	@ 0x28
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40007000 	.word	0x40007000
 800685c:	40023870 	.word	0x40023870
 8006860:	40023800 	.word	0x40023800
 8006864:	42470060 	.word	0x42470060
 8006868:	f0bc8000 	.word	0xf0bc8000

0800686c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b086      	sub	sp, #24
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d101      	bne.n	8006880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e0d2      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006880:	4b6b      	ldr	r3, [pc, #428]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d90c      	bls.n	80068a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800688e:	4b68      	ldr	r3, [pc, #416]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	b2d2      	uxtb	r2, r2
 8006894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006896:	4b66      	ldr	r3, [pc, #408]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c4>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 030f 	and.w	r3, r3, #15
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d001      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e0be      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d020      	beq.n	80068f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d005      	beq.n	80068cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80068c0:	4b5c      	ldr	r3, [pc, #368]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	4a5b      	ldr	r2, [pc, #364]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80068c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80068ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0308 	and.w	r3, r3, #8
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d005      	beq.n	80068e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80068d8:	4b56      	ldr	r3, [pc, #344]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	4a55      	ldr	r2, [pc, #340]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80068de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80068e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80068e4:	4b53      	ldr	r3, [pc, #332]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	4950      	ldr	r1, [pc, #320]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d040      	beq.n	8006984 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d107      	bne.n	800691a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800690a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d115      	bne.n	8006942 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e085      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b02      	cmp	r3, #2
 8006920:	d107      	bne.n	8006932 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006922:	4b44      	ldr	r3, [pc, #272]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e079      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006932:	4b40      	ldr	r3, [pc, #256]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0302 	and.w	r3, r3, #2
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e071      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006942:	4b3c      	ldr	r3, [pc, #240]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f023 0203 	bic.w	r2, r3, #3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	4939      	ldr	r1, [pc, #228]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 8006950:	4313      	orrs	r3, r2
 8006952:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006954:	f7fd f9b6 	bl	8003cc4 <HAL_GetTick>
 8006958:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800695a:	e00a      	b.n	8006972 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800695c:	f7fd f9b2 	bl	8003cc4 <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800696a:	4293      	cmp	r3, r2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e059      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006972:	4b30      	ldr	r3, [pc, #192]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f003 020c 	and.w	r2, r3, #12
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	429a      	cmp	r2, r3
 8006982:	d1eb      	bne.n	800695c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006984:	4b2a      	ldr	r3, [pc, #168]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c4>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 030f 	and.w	r3, r3, #15
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	d20c      	bcs.n	80069ac <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006992:	4b27      	ldr	r3, [pc, #156]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c4>)
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800699a:	4b25      	ldr	r3, [pc, #148]	@ (8006a30 <HAL_RCC_ClockConfig+0x1c4>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d001      	beq.n	80069ac <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e03c      	b.n	8006a26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d008      	beq.n	80069ca <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80069b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	491b      	ldr	r1, [pc, #108]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80069c6:	4313      	orrs	r3, r2
 80069c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0308 	and.w	r3, r3, #8
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d009      	beq.n	80069ea <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80069d6:	4b17      	ldr	r3, [pc, #92]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	691b      	ldr	r3, [r3, #16]
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4913      	ldr	r1, [pc, #76]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80069ea:	f000 f82b 	bl	8006a44 <HAL_RCC_GetSysClockFreq>
 80069ee:	4601      	mov	r1, r0
 80069f0:	4b10      	ldr	r3, [pc, #64]	@ (8006a34 <HAL_RCC_ClockConfig+0x1c8>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069f8:	22f0      	movs	r2, #240	@ 0xf0
 80069fa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	fa92 f2a2 	rbit	r2, r2
 8006a02:	60fa      	str	r2, [r7, #12]
  return result;
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	fab2 f282 	clz	r2, r2
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	40d3      	lsrs	r3, r2
 8006a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8006a38 <HAL_RCC_ClockConfig+0x1cc>)
 8006a10:	5cd3      	ldrb	r3, [r2, r3]
 8006a12:	fa21 f303 	lsr.w	r3, r1, r3
 8006a16:	4a09      	ldr	r2, [pc, #36]	@ (8006a3c <HAL_RCC_ClockConfig+0x1d0>)
 8006a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006a1a:	4b09      	ldr	r3, [pc, #36]	@ (8006a40 <HAL_RCC_ClockConfig+0x1d4>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fd f90e 	bl	8003c40 <HAL_InitTick>

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40023c00 	.word	0x40023c00
 8006a34:	40023800 	.word	0x40023800
 8006a38:	08008024 	.word	0x08008024
 8006a3c:	20000004 	.word	0x20000004
 8006a40:	20000010 	.word	0x20000010

08006a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a48:	b090      	sub	sp, #64	@ 0x40
 8006a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a50:	2300      	movs	r3, #0
 8006a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a54:	2300      	movs	r3, #0
 8006a56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a5c:	4b59      	ldr	r3, [pc, #356]	@ (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f003 030c 	and.w	r3, r3, #12
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d00d      	beq.n	8006a84 <HAL_RCC_GetSysClockFreq+0x40>
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	f200 80a2 	bhi.w	8006bb2 <HAL_RCC_GetSysClockFreq+0x16e>
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d002      	beq.n	8006a78 <HAL_RCC_GetSysClockFreq+0x34>
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	d003      	beq.n	8006a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8006a76:	e09c      	b.n	8006bb2 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a78:	4b53      	ldr	r3, [pc, #332]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a7a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006a7c:	e09c      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a7e:	4b53      	ldr	r3, [pc, #332]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8006a80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a82:	e099      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a84:	4b4f      	ldr	r3, [pc, #316]	@ (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a8e:	4b4d      	ldr	r3, [pc, #308]	@ (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d027      	beq.n	8006aea <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	099b      	lsrs	r3, r3, #6
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	623b      	str	r3, [r7, #32]
 8006aa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006aac:	2100      	movs	r1, #0
 8006aae:	4b47      	ldr	r3, [pc, #284]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8006ab0:	fb03 f201 	mul.w	r2, r3, r1
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	fb00 f303 	mul.w	r3, r0, r3
 8006aba:	4413      	add	r3, r2
 8006abc:	4a43      	ldr	r2, [pc, #268]	@ (8006bcc <HAL_RCC_GetSysClockFreq+0x188>)
 8006abe:	fba0 2102 	umull	r2, r1, r0, r2
 8006ac2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006ac4:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ac8:	4413      	add	r3, r2
 8006aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ace:	2200      	movs	r2, #0
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	61fa      	str	r2, [r7, #28]
 8006ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ad8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006adc:	f7fa fb34 	bl	8001148 <__aeabi_uldivmod>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ae8:	e055      	b.n	8006b96 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aea:	4b36      	ldr	r3, [pc, #216]	@ (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	099b      	lsrs	r3, r3, #6
 8006af0:	2200      	movs	r2, #0
 8006af2:	613b      	str	r3, [r7, #16]
 8006af4:	617a      	str	r2, [r7, #20]
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006afc:	f04f 0b00 	mov.w	fp, #0
 8006b00:	4652      	mov	r2, sl
 8006b02:	465b      	mov	r3, fp
 8006b04:	f04f 0000 	mov.w	r0, #0
 8006b08:	f04f 0100 	mov.w	r1, #0
 8006b0c:	0159      	lsls	r1, r3, #5
 8006b0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b12:	0150      	lsls	r0, r2, #5
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	ebb2 080a 	subs.w	r8, r2, sl
 8006b1c:	eb63 090b 	sbc.w	r9, r3, fp
 8006b20:	f04f 0200 	mov.w	r2, #0
 8006b24:	f04f 0300 	mov.w	r3, #0
 8006b28:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006b2c:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006b30:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006b34:	ebb2 0408 	subs.w	r4, r2, r8
 8006b38:	eb63 0509 	sbc.w	r5, r3, r9
 8006b3c:	f04f 0200 	mov.w	r2, #0
 8006b40:	f04f 0300 	mov.w	r3, #0
 8006b44:	00eb      	lsls	r3, r5, #3
 8006b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b4a:	00e2      	lsls	r2, r4, #3
 8006b4c:	4614      	mov	r4, r2
 8006b4e:	461d      	mov	r5, r3
 8006b50:	eb14 030a 	adds.w	r3, r4, sl
 8006b54:	603b      	str	r3, [r7, #0]
 8006b56:	eb45 030b 	adc.w	r3, r5, fp
 8006b5a:	607b      	str	r3, [r7, #4]
 8006b5c:	f04f 0200 	mov.w	r2, #0
 8006b60:	f04f 0300 	mov.w	r3, #0
 8006b64:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b68:	4629      	mov	r1, r5
 8006b6a:	028b      	lsls	r3, r1, #10
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4604      	mov	r4, r0
 8006b72:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8006b76:	4601      	mov	r1, r0
 8006b78:	028a      	lsls	r2, r1, #10
 8006b7a:	4610      	mov	r0, r2
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b80:	2200      	movs	r2, #0
 8006b82:	60bb      	str	r3, [r7, #8]
 8006b84:	60fa      	str	r2, [r7, #12]
 8006b86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b8a:	f7fa fadd 	bl	8001148 <__aeabi_uldivmod>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4613      	mov	r3, r2
 8006b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b96:	4b0b      	ldr	r3, [pc, #44]	@ (8006bc4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	0c1b      	lsrs	r3, r3, #16
 8006b9c:	f003 0303 	and.w	r3, r3, #3
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8006ba6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006bb0:	e002      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bb2:	4b05      	ldr	r3, [pc, #20]	@ (8006bc8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006bb6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3740      	adds	r7, #64	@ 0x40
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	00f42400 	.word	0x00f42400
 8006bcc:	017d7840 	.word	0x017d7840

08006bd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bd4:	4b02      	ldr	r3, [pc, #8]	@ (8006be0 <HAL_RCC_GetHCLKFreq+0x10>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr
 8006be0:	20000004 	.word	0x20000004

08006be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8006bea:	f7ff fff1 	bl	8006bd0 <HAL_RCC_GetHCLKFreq>
 8006bee:	4601      	mov	r1, r0
 8006bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8006c20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8006bf8:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8006bfc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	fa92 f2a2 	rbit	r2, r2
 8006c04:	603a      	str	r2, [r7, #0]
  return result;
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	fab2 f282 	clz	r2, r2
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	40d3      	lsrs	r3, r2
 8006c10:	4a04      	ldr	r2, [pc, #16]	@ (8006c24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8006c12:	5cd3      	ldrb	r3, [r2, r3]
 8006c14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40023800 	.word	0x40023800
 8006c24:	08008034 	.word	0x08008034

08006c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e041      	b.n	8006cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fc fe14 	bl	800387c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2202      	movs	r2, #2
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3304      	adds	r3, #4
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	f000 fd2e 	bl	80076c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
	...

08006cc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d001      	beq.n	8006ce0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e046      	b.n	8006d6e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a22      	ldr	r2, [pc, #136]	@ (8006d78 <HAL_TIM_Base_Start+0xb0>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d022      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfa:	d01d      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1e      	ldr	r2, [pc, #120]	@ (8006d7c <HAL_TIM_Base_Start+0xb4>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d018      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a1d      	ldr	r2, [pc, #116]	@ (8006d80 <HAL_TIM_Base_Start+0xb8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d013      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a1b      	ldr	r2, [pc, #108]	@ (8006d84 <HAL_TIM_Base_Start+0xbc>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d00e      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a1a      	ldr	r2, [pc, #104]	@ (8006d88 <HAL_TIM_Base_Start+0xc0>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d009      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a18      	ldr	r2, [pc, #96]	@ (8006d8c <HAL_TIM_Base_Start+0xc4>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d004      	beq.n	8006d38 <HAL_TIM_Base_Start+0x70>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a17      	ldr	r2, [pc, #92]	@ (8006d90 <HAL_TIM_Base_Start+0xc8>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d111      	bne.n	8006d5c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d010      	beq.n	8006d6c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f042 0201 	orr.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5a:	e007      	b.n	8006d6c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f042 0201 	orr.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bc80      	pop	{r7}
 8006d76:	4770      	bx	lr
 8006d78:	40010000 	.word	0x40010000
 8006d7c:	40000400 	.word	0x40000400
 8006d80:	40000800 	.word	0x40000800
 8006d84:	40000c00 	.word	0x40000c00
 8006d88:	40010400 	.word	0x40010400
 8006d8c:	40014000 	.word	0x40014000
 8006d90:	40001800 	.word	0x40001800

08006d94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d001      	beq.n	8006dac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e04e      	b.n	8006e4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68da      	ldr	r2, [r3, #12]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f042 0201 	orr.w	r2, r2, #1
 8006dc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a22      	ldr	r2, [pc, #136]	@ (8006e54 <HAL_TIM_Base_Start_IT+0xc0>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d022      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd6:	d01d      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a1e      	ldr	r2, [pc, #120]	@ (8006e58 <HAL_TIM_Base_Start_IT+0xc4>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d018      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a1d      	ldr	r2, [pc, #116]	@ (8006e5c <HAL_TIM_Base_Start_IT+0xc8>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d013      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e60 <HAL_TIM_Base_Start_IT+0xcc>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d00e      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a1a      	ldr	r2, [pc, #104]	@ (8006e64 <HAL_TIM_Base_Start_IT+0xd0>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d009      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a18      	ldr	r2, [pc, #96]	@ (8006e68 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d004      	beq.n	8006e14 <HAL_TIM_Base_Start_IT+0x80>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a17      	ldr	r2, [pc, #92]	@ (8006e6c <HAL_TIM_Base_Start_IT+0xd8>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d111      	bne.n	8006e38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2b06      	cmp	r3, #6
 8006e24:	d010      	beq.n	8006e48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f042 0201 	orr.w	r2, r2, #1
 8006e34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e36:	e007      	b.n	8006e48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0201 	orr.w	r2, r2, #1
 8006e46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bc80      	pop	{r7}
 8006e52:	4770      	bx	lr
 8006e54:	40010000 	.word	0x40010000
 8006e58:	40000400 	.word	0x40000400
 8006e5c:	40000800 	.word	0x40000800
 8006e60:	40000c00 	.word	0x40000c00
 8006e64:	40010400 	.word	0x40010400
 8006e68:	40014000 	.word	0x40014000
 8006e6c:	40001800 	.word	0x40001800

08006e70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d101      	bne.n	8006e82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e041      	b.n	8006f06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d106      	bne.n	8006e9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7fc fc4a 	bl	8003730 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3304      	adds	r3, #4
 8006eac:	4619      	mov	r1, r3
 8006eae:	4610      	mov	r0, r2
 8006eb0:	f000 fc0a 	bl	80076c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3708      	adds	r7, #8
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}
	...

08006f10 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d109      	bne.n	8006f34 <HAL_TIM_PWM_Start+0x24>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	bf14      	ite	ne
 8006f2c:	2301      	movne	r3, #1
 8006f2e:	2300      	moveq	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	e022      	b.n	8006f7a <HAL_TIM_PWM_Start+0x6a>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d109      	bne.n	8006f4e <HAL_TIM_PWM_Start+0x3e>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	bf14      	ite	ne
 8006f46:	2301      	movne	r3, #1
 8006f48:	2300      	moveq	r3, #0
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	e015      	b.n	8006f7a <HAL_TIM_PWM_Start+0x6a>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b08      	cmp	r3, #8
 8006f52:	d109      	bne.n	8006f68 <HAL_TIM_PWM_Start+0x58>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	bf14      	ite	ne
 8006f60:	2301      	movne	r3, #1
 8006f62:	2300      	moveq	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	e008      	b.n	8006f7a <HAL_TIM_PWM_Start+0x6a>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	bf14      	ite	ne
 8006f74:	2301      	movne	r3, #1
 8006f76:	2300      	moveq	r3, #0
 8006f78:	b2db      	uxtb	r3, r3
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e07c      	b.n	800707c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d104      	bne.n	8006f92 <HAL_TIM_PWM_Start+0x82>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f90:	e013      	b.n	8006fba <HAL_TIM_PWM_Start+0xaa>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b04      	cmp	r3, #4
 8006f96:	d104      	bne.n	8006fa2 <HAL_TIM_PWM_Start+0x92>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fa0:	e00b      	b.n	8006fba <HAL_TIM_PWM_Start+0xaa>
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	2b08      	cmp	r3, #8
 8006fa6:	d104      	bne.n	8006fb2 <HAL_TIM_PWM_Start+0xa2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2202      	movs	r2, #2
 8006fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006fb0:	e003      	b.n	8006fba <HAL_TIM_PWM_Start+0xaa>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fdd6 	bl	8007b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a2d      	ldr	r2, [pc, #180]	@ (8007084 <HAL_TIM_PWM_Start+0x174>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <HAL_TIM_PWM_Start+0xcc>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007088 <HAL_TIM_PWM_Start+0x178>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d101      	bne.n	8006fe0 <HAL_TIM_PWM_Start+0xd0>
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e000      	b.n	8006fe2 <HAL_TIM_PWM_Start+0xd2>
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d007      	beq.n	8006ff6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ff4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a22      	ldr	r2, [pc, #136]	@ (8007084 <HAL_TIM_PWM_Start+0x174>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d022      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007008:	d01d      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1f      	ldr	r2, [pc, #124]	@ (800708c <HAL_TIM_PWM_Start+0x17c>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d018      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1d      	ldr	r2, [pc, #116]	@ (8007090 <HAL_TIM_PWM_Start+0x180>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d013      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a1c      	ldr	r2, [pc, #112]	@ (8007094 <HAL_TIM_PWM_Start+0x184>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d00e      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a16      	ldr	r2, [pc, #88]	@ (8007088 <HAL_TIM_PWM_Start+0x178>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d009      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a18      	ldr	r2, [pc, #96]	@ (8007098 <HAL_TIM_PWM_Start+0x188>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d004      	beq.n	8007046 <HAL_TIM_PWM_Start+0x136>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a16      	ldr	r2, [pc, #88]	@ (800709c <HAL_TIM_PWM_Start+0x18c>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d111      	bne.n	800706a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0307 	and.w	r3, r3, #7
 8007050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2b06      	cmp	r3, #6
 8007056:	d010      	beq.n	800707a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f042 0201 	orr.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007068:	e007      	b.n	800707a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f042 0201 	orr.w	r2, r2, #1
 8007078:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	40010000 	.word	0x40010000
 8007088:	40010400 	.word	0x40010400
 800708c:	40000400 	.word	0x40000400
 8007090:	40000800 	.word	0x40000800
 8007094:	40000c00 	.word	0x40000c00
 8007098:	40014000 	.word	0x40014000
 800709c:	40001800 	.word	0x40001800

080070a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e097      	b.n	80071e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d106      	bne.n	80070ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7fc fb59 	bl	8003780 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6812      	ldr	r2, [r2, #0]
 80070e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80070e4:	f023 0307 	bic.w	r3, r3, #7
 80070e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681a      	ldr	r2, [r3, #0]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f000 fae7 	bl	80076c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	4313      	orrs	r3, r2
 800711a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007122:	f023 0303 	bic.w	r3, r3, #3
 8007126:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	689a      	ldr	r2, [r3, #8]
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	4313      	orrs	r3, r2
 8007134:	693a      	ldr	r2, [r7, #16]
 8007136:	4313      	orrs	r3, r2
 8007138:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8007140:	f023 030c 	bic.w	r3, r3, #12
 8007144:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800714c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68da      	ldr	r2, [r3, #12]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	021b      	lsls	r3, r3, #8
 800715c:	4313      	orrs	r3, r2
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	011a      	lsls	r2, r3, #4
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	031b      	lsls	r3, r3, #12
 8007170:	4313      	orrs	r3, r2
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4313      	orrs	r3, r2
 8007176:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800717e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007186:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	695b      	ldr	r3, [r3, #20]
 8007190:	011b      	lsls	r3, r3, #4
 8007192:	4313      	orrs	r3, r2
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	697a      	ldr	r2, [r7, #20]
 80071a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2201      	movs	r2, #1
 80071de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3718      	adds	r7, #24
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80071fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007204:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800720c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007214:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d110      	bne.n	800723e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800721c:	7bfb      	ldrb	r3, [r7, #15]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d102      	bne.n	8007228 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007222:	7b7b      	ldrb	r3, [r7, #13]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d001      	beq.n	800722c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e069      	b.n	8007300 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2202      	movs	r2, #2
 8007230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800723c:	e031      	b.n	80072a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	2b04      	cmp	r3, #4
 8007242:	d110      	bne.n	8007266 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007244:	7bbb      	ldrb	r3, [r7, #14]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d102      	bne.n	8007250 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800724a:	7b3b      	ldrb	r3, [r7, #12]
 800724c:	2b01      	cmp	r3, #1
 800724e:	d001      	beq.n	8007254 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e055      	b.n	8007300 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007264:	e01d      	b.n	80072a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007266:	7bfb      	ldrb	r3, [r7, #15]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d108      	bne.n	800727e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800726c:	7bbb      	ldrb	r3, [r7, #14]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d105      	bne.n	800727e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007272:	7b7b      	ldrb	r3, [r7, #13]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d102      	bne.n	800727e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007278:	7b3b      	ldrb	r3, [r7, #12]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d001      	beq.n	8007282 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e03e      	b.n	8007300 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2202      	movs	r2, #2
 8007286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2202      	movs	r2, #2
 8007296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2202      	movs	r2, #2
 800729e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <HAL_TIM_Encoder_Start+0xc4>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d008      	beq.n	80072c0 <HAL_TIM_Encoder_Start+0xd4>
 80072ae:	e00f      	b.n	80072d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2201      	movs	r2, #1
 80072b6:	2100      	movs	r1, #0
 80072b8:	4618      	mov	r0, r3
 80072ba:	f000 fc5b 	bl	8007b74 <TIM_CCxChannelCmd>
      break;
 80072be:	e016      	b.n	80072ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2201      	movs	r2, #1
 80072c6:	2104      	movs	r1, #4
 80072c8:	4618      	mov	r0, r3
 80072ca:	f000 fc53 	bl	8007b74 <TIM_CCxChannelCmd>
      break;
 80072ce:	e00e      	b.n	80072ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2201      	movs	r2, #1
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fc4b 	bl	8007b74 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2201      	movs	r2, #1
 80072e4:	2104      	movs	r1, #4
 80072e6:	4618      	mov	r0, r3
 80072e8:	f000 fc44 	bl	8007b74 <TIM_CCxChannelCmd>
      break;
 80072ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0201 	orr.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d020      	beq.n	800736c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01b      	beq.n	800736c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0202 	mvn.w	r2, #2
 800733c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	f003 0303 	and.w	r3, r3, #3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f99c 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 8007358:	e005      	b.n	8007366 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f98f 	bl	800767e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f99e 	bl	80076a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2200      	movs	r2, #0
 800736a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	f003 0304 	and.w	r3, r3, #4
 8007372:	2b00      	cmp	r3, #0
 8007374:	d020      	beq.n	80073b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f003 0304 	and.w	r3, r3, #4
 800737c:	2b00      	cmp	r3, #0
 800737e:	d01b      	beq.n	80073b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f06f 0204 	mvn.w	r2, #4
 8007388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2202      	movs	r2, #2
 800738e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f976 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 80073a4:	e005      	b.n	80073b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 f969 	bl	800767e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f978 	bl	80076a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	f003 0308 	and.w	r3, r3, #8
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d020      	beq.n	8007404 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f003 0308 	and.w	r3, r3, #8
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01b      	beq.n	8007404 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f06f 0208 	mvn.w	r2, #8
 80073d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2204      	movs	r2, #4
 80073da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69db      	ldr	r3, [r3, #28]
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f950 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 80073f0:	e005      	b.n	80073fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f943 	bl	800767e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f952 	bl	80076a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f003 0310 	and.w	r3, r3, #16
 800740a:	2b00      	cmp	r3, #0
 800740c:	d020      	beq.n	8007450 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f003 0310 	and.w	r3, r3, #16
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01b      	beq.n	8007450 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0210 	mvn.w	r2, #16
 8007420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2208      	movs	r2, #8
 8007426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	69db      	ldr	r3, [r3, #28]
 800742e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f92a 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 800743c:	e005      	b.n	800744a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 f91d 	bl	800767e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f92c 	bl	80076a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	f003 0301 	and.w	r3, r3, #1
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00c      	beq.n	8007474 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d007      	beq.n	8007474 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f06f 0201 	mvn.w	r2, #1
 800746c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f8fc 	bl	800766c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00c      	beq.n	8007498 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007484:	2b00      	cmp	r3, #0
 8007486:	d007      	beq.n	8007498 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fc66 	bl	8007d64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00c      	beq.n	80074bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d007      	beq.n	80074bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80074b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f8fc 	bl	80076b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 0320 	and.w	r3, r3, #32
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00c      	beq.n	80074e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f003 0320 	and.w	r3, r3, #32
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f06f 0220 	mvn.w	r2, #32
 80074d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fc39 	bl	8007d52 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074e0:	bf00      	nop
 80074e2:	3710      	adds	r7, #16
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}

080074e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b086      	sub	sp, #24
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007502:	2302      	movs	r3, #2
 8007504:	e0ae      	b.n	8007664 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2b0c      	cmp	r3, #12
 8007512:	f200 809f 	bhi.w	8007654 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007516:	a201      	add	r2, pc, #4	@ (adr r2, 800751c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	08007551 	.word	0x08007551
 8007520:	08007655 	.word	0x08007655
 8007524:	08007655 	.word	0x08007655
 8007528:	08007655 	.word	0x08007655
 800752c:	08007591 	.word	0x08007591
 8007530:	08007655 	.word	0x08007655
 8007534:	08007655 	.word	0x08007655
 8007538:	08007655 	.word	0x08007655
 800753c:	080075d3 	.word	0x080075d3
 8007540:	08007655 	.word	0x08007655
 8007544:	08007655 	.word	0x08007655
 8007548:	08007655 	.word	0x08007655
 800754c:	08007613 	.word	0x08007613
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68b9      	ldr	r1, [r7, #8]
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f960 	bl	800781c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f042 0208 	orr.w	r2, r2, #8
 800756a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 0204 	bic.w	r2, r2, #4
 800757a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6999      	ldr	r1, [r3, #24]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	691a      	ldr	r2, [r3, #16]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	619a      	str	r2, [r3, #24]
      break;
 800758e:	e064      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	68b9      	ldr	r1, [r7, #8]
 8007596:	4618      	mov	r0, r3
 8007598:	f000 f9b0 	bl	80078fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699a      	ldr	r2, [r3, #24]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80075aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80075ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6999      	ldr	r1, [r3, #24]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	021a      	lsls	r2, r3, #8
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	619a      	str	r2, [r3, #24]
      break;
 80075d0:	e043      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68b9      	ldr	r1, [r7, #8]
 80075d8:	4618      	mov	r0, r3
 80075da:	f000 fa03 	bl	80079e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f042 0208 	orr.w	r2, r2, #8
 80075ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f022 0204 	bic.w	r2, r2, #4
 80075fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69d9      	ldr	r1, [r3, #28]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	61da      	str	r2, [r3, #28]
      break;
 8007610:	e023      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fa57 	bl	8007acc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69da      	ldr	r2, [r3, #28]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800762c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800763c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69d9      	ldr	r1, [r3, #28]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	021a      	lsls	r2, r3, #8
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	61da      	str	r2, [r3, #28]
      break;
 8007652:	e002      	b.n	800765a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007654:	2301      	movs	r3, #1
 8007656:	75fb      	strb	r3, [r7, #23]
      break;
 8007658:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007662:	7dfb      	ldrb	r3, [r7, #23]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	bc80      	pop	{r7}
 800767c:	4770      	bx	lr

0800767e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800767e:	b480      	push	{r7}
 8007680:	b083      	sub	sp, #12
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	bc80      	pop	{r7}
 800768e:	4770      	bx	lr

08007690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	bc80      	pop	{r7}
 80076a0:	4770      	bx	lr

080076a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b083      	sub	sp, #12
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076aa:	bf00      	nop
 80076ac:	370c      	adds	r7, #12
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bc80      	pop	{r7}
 80076b2:	4770      	bx	lr

080076b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076bc:	bf00      	nop
 80076be:	370c      	adds	r7, #12
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bc80      	pop	{r7}
 80076c4:	4770      	bx	lr
	...

080076c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a45      	ldr	r2, [pc, #276]	@ (80077f0 <TIM_Base_SetConfig+0x128>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d013      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076e6:	d00f      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a42      	ldr	r2, [pc, #264]	@ (80077f4 <TIM_Base_SetConfig+0x12c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a41      	ldr	r2, [pc, #260]	@ (80077f8 <TIM_Base_SetConfig+0x130>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a40      	ldr	r2, [pc, #256]	@ (80077fc <TIM_Base_SetConfig+0x134>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0x40>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a3f      	ldr	r2, [pc, #252]	@ (8007800 <TIM_Base_SetConfig+0x138>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d108      	bne.n	800771a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800770e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a34      	ldr	r2, [pc, #208]	@ (80077f0 <TIM_Base_SetConfig+0x128>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d02b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007728:	d027      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a31      	ldr	r2, [pc, #196]	@ (80077f4 <TIM_Base_SetConfig+0x12c>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d023      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a30      	ldr	r2, [pc, #192]	@ (80077f8 <TIM_Base_SetConfig+0x130>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d01f      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a2f      	ldr	r2, [pc, #188]	@ (80077fc <TIM_Base_SetConfig+0x134>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a2e      	ldr	r2, [pc, #184]	@ (8007800 <TIM_Base_SetConfig+0x138>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d017      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a2d      	ldr	r2, [pc, #180]	@ (8007804 <TIM_Base_SetConfig+0x13c>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a2c      	ldr	r2, [pc, #176]	@ (8007808 <TIM_Base_SetConfig+0x140>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d00f      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a2b      	ldr	r2, [pc, #172]	@ (800780c <TIM_Base_SetConfig+0x144>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00b      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a2a      	ldr	r2, [pc, #168]	@ (8007810 <TIM_Base_SetConfig+0x148>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d007      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4a29      	ldr	r2, [pc, #164]	@ (8007814 <TIM_Base_SetConfig+0x14c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d003      	beq.n	800777a <TIM_Base_SetConfig+0xb2>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4a28      	ldr	r2, [pc, #160]	@ (8007818 <TIM_Base_SetConfig+0x150>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d108      	bne.n	800778c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	4313      	orrs	r3, r2
 800778a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	4313      	orrs	r3, r2
 8007798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68fa      	ldr	r2, [r7, #12]
 800779e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	689a      	ldr	r2, [r3, #8]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a0f      	ldr	r2, [pc, #60]	@ (80077f0 <TIM_Base_SetConfig+0x128>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_Base_SetConfig+0xf8>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a11      	ldr	r2, [pc, #68]	@ (8007800 <TIM_Base_SetConfig+0x138>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d103      	bne.n	80077c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d105      	bne.n	80077e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f023 0201 	bic.w	r2, r3, #1
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	611a      	str	r2, [r3, #16]
  }
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bc80      	pop	{r7}
 80077ee:	4770      	bx	lr
 80077f0:	40010000 	.word	0x40010000
 80077f4:	40000400 	.word	0x40000400
 80077f8:	40000800 	.word	0x40000800
 80077fc:	40000c00 	.word	0x40000c00
 8007800:	40010400 	.word	0x40010400
 8007804:	40014000 	.word	0x40014000
 8007808:	40014400 	.word	0x40014400
 800780c:	40014800 	.word	0x40014800
 8007810:	40001800 	.word	0x40001800
 8007814:	40001c00 	.word	0x40001c00
 8007818:	40002000 	.word	0x40002000

0800781c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800781c:	b480      	push	{r7}
 800781e:	b087      	sub	sp, #28
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6a1b      	ldr	r3, [r3, #32]
 8007830:	f023 0201 	bic.w	r2, r3, #1
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800784a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0303 	bic.w	r3, r3, #3
 8007852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f023 0302 	bic.w	r3, r3, #2
 8007864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	697a      	ldr	r2, [r7, #20]
 800786c:	4313      	orrs	r3, r2
 800786e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a20      	ldr	r2, [pc, #128]	@ (80078f4 <TIM_OC1_SetConfig+0xd8>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d003      	beq.n	8007880 <TIM_OC1_SetConfig+0x64>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a1f      	ldr	r2, [pc, #124]	@ (80078f8 <TIM_OC1_SetConfig+0xdc>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d10c      	bne.n	800789a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007880:	697b      	ldr	r3, [r7, #20]
 8007882:	f023 0308 	bic.w	r3, r3, #8
 8007886:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	697a      	ldr	r2, [r7, #20]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f023 0304 	bic.w	r3, r3, #4
 8007898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a15      	ldr	r2, [pc, #84]	@ (80078f4 <TIM_OC1_SetConfig+0xd8>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d003      	beq.n	80078aa <TIM_OC1_SetConfig+0x8e>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a14      	ldr	r2, [pc, #80]	@ (80078f8 <TIM_OC1_SetConfig+0xdc>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d111      	bne.n	80078ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	693a      	ldr	r2, [r7, #16]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	621a      	str	r2, [r3, #32]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bc80      	pop	{r7}
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40010000 	.word	0x40010000
 80078f8:	40010400 	.word	0x40010400

080078fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b087      	sub	sp, #28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a1b      	ldr	r3, [r3, #32]
 800790a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6a1b      	ldr	r3, [r3, #32]
 8007910:	f023 0210 	bic.w	r2, r3, #16
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	699b      	ldr	r3, [r3, #24]
 8007922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800792a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007932:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4313      	orrs	r3, r2
 800793e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f023 0320 	bic.w	r3, r3, #32
 8007946:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	011b      	lsls	r3, r3, #4
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a21      	ldr	r2, [pc, #132]	@ (80079dc <TIM_OC2_SetConfig+0xe0>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d003      	beq.n	8007964 <TIM_OC2_SetConfig+0x68>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a20      	ldr	r2, [pc, #128]	@ (80079e0 <TIM_OC2_SetConfig+0xe4>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d10d      	bne.n	8007980 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800796a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	68db      	ldr	r3, [r3, #12]
 8007970:	011b      	lsls	r3, r3, #4
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	4313      	orrs	r3, r2
 8007976:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800797e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a16      	ldr	r2, [pc, #88]	@ (80079dc <TIM_OC2_SetConfig+0xe0>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d003      	beq.n	8007990 <TIM_OC2_SetConfig+0x94>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a15      	ldr	r2, [pc, #84]	@ (80079e0 <TIM_OC2_SetConfig+0xe4>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d113      	bne.n	80079b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007996:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800799e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	695b      	ldr	r3, [r3, #20]
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	693a      	ldr	r2, [r7, #16]
 80079a8:	4313      	orrs	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	699b      	ldr	r3, [r3, #24]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	693a      	ldr	r2, [r7, #16]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	693a      	ldr	r2, [r7, #16]
 80079bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	697a      	ldr	r2, [r7, #20]
 80079d0:	621a      	str	r2, [r3, #32]
}
 80079d2:	bf00      	nop
 80079d4:	371c      	adds	r7, #28
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr
 80079dc:	40010000 	.word	0x40010000
 80079e0:	40010400 	.word	0x40010400

080079e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6a1b      	ldr	r3, [r3, #32]
 80079f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	021b      	lsls	r3, r3, #8
 8007a34:	697a      	ldr	r2, [r7, #20]
 8007a36:	4313      	orrs	r3, r2
 8007a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a21      	ldr	r2, [pc, #132]	@ (8007ac4 <TIM_OC3_SetConfig+0xe0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d003      	beq.n	8007a4a <TIM_OC3_SetConfig+0x66>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	4a20      	ldr	r2, [pc, #128]	@ (8007ac8 <TIM_OC3_SetConfig+0xe4>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d10d      	bne.n	8007a66 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	021b      	lsls	r3, r3, #8
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4a16      	ldr	r2, [pc, #88]	@ (8007ac4 <TIM_OC3_SetConfig+0xe0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d003      	beq.n	8007a76 <TIM_OC3_SetConfig+0x92>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	4a15      	ldr	r2, [pc, #84]	@ (8007ac8 <TIM_OC3_SetConfig+0xe4>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d113      	bne.n	8007a9e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	693a      	ldr	r2, [r7, #16]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	685a      	ldr	r2, [r3, #4]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	621a      	str	r2, [r3, #32]
}
 8007ab8:	bf00      	nop
 8007aba:	371c      	adds	r7, #28
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	40010000 	.word	0x40010000
 8007ac8:	40010400 	.word	0x40010400

08007acc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b087      	sub	sp, #28
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69db      	ldr	r3, [r3, #28]
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	021b      	lsls	r3, r3, #8
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	031b      	lsls	r3, r3, #12
 8007b1e:	693a      	ldr	r2, [r7, #16]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a11      	ldr	r2, [pc, #68]	@ (8007b6c <TIM_OC4_SetConfig+0xa0>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d003      	beq.n	8007b34 <TIM_OC4_SetConfig+0x68>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	4a10      	ldr	r2, [pc, #64]	@ (8007b70 <TIM_OC4_SetConfig+0xa4>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d109      	bne.n	8007b48 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	019b      	lsls	r3, r3, #6
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	697a      	ldr	r2, [r7, #20]
 8007b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	685a      	ldr	r2, [r3, #4]
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	621a      	str	r2, [r3, #32]
}
 8007b62:	bf00      	nop
 8007b64:	371c      	adds	r7, #28
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr
 8007b6c:	40010000 	.word	0x40010000
 8007b70:	40010400 	.word	0x40010400

08007b74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f003 031f 	and.w	r3, r3, #31
 8007b86:	2201      	movs	r2, #1
 8007b88:	fa02 f303 	lsl.w	r3, r2, r3
 8007b8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6a1a      	ldr	r2, [r3, #32]
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	43db      	mvns	r3, r3
 8007b96:	401a      	ands	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	6a1a      	ldr	r2, [r3, #32]
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f003 031f 	and.w	r3, r3, #31
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bac:	431a      	orrs	r2, r3
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	621a      	str	r2, [r3, #32]
}
 8007bb2:	bf00      	nop
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bc80      	pop	{r7}
 8007bba:	4770      	bx	lr

08007bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b085      	sub	sp, #20
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d101      	bne.n	8007bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	e05a      	b.n	8007c8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2202      	movs	r2, #2
 8007be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	689b      	ldr	r3, [r3, #8]
 8007bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68fa      	ldr	r2, [r7, #12]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a20      	ldr	r2, [pc, #128]	@ (8007c94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d022      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c20:	d01d      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a1c      	ldr	r2, [pc, #112]	@ (8007c98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d018      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a1a      	ldr	r2, [pc, #104]	@ (8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d013      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a19      	ldr	r2, [pc, #100]	@ (8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d00e      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a17      	ldr	r2, [pc, #92]	@ (8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d009      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a16      	ldr	r2, [pc, #88]	@ (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d004      	beq.n	8007c5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a14      	ldr	r2, [pc, #80]	@ (8007cac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d10c      	bne.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	bc80      	pop	{r7}
 8007c92:	4770      	bx	lr
 8007c94:	40010000 	.word	0x40010000
 8007c98:	40000400 	.word	0x40000400
 8007c9c:	40000800 	.word	0x40000800
 8007ca0:	40000c00 	.word	0x40000c00
 8007ca4:	40010400 	.word	0x40010400
 8007ca8:	40014000 	.word	0x40014000
 8007cac:	40001800 	.word	0x40001800

08007cb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d101      	bne.n	8007ccc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e03d      	b.n	8007d48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	4313      	orrs	r3, r2
 8007d34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3714      	adds	r7, #20
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr

08007d52 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bc80      	pop	{r7}
 8007d74:	4770      	bx	lr
	...

08007d78 <malloc>:
 8007d78:	4b02      	ldr	r3, [pc, #8]	@ (8007d84 <malloc+0xc>)
 8007d7a:	4601      	mov	r1, r0
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	f000 b82d 	b.w	8007ddc <_malloc_r>
 8007d82:	bf00      	nop
 8007d84:	20000018 	.word	0x20000018

08007d88 <free>:
 8007d88:	4b02      	ldr	r3, [pc, #8]	@ (8007d94 <free+0xc>)
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	6818      	ldr	r0, [r3, #0]
 8007d8e:	f000 b8f5 	b.w	8007f7c <_free_r>
 8007d92:	bf00      	nop
 8007d94:	20000018 	.word	0x20000018

08007d98 <sbrk_aligned>:
 8007d98:	b570      	push	{r4, r5, r6, lr}
 8007d9a:	4e0f      	ldr	r6, [pc, #60]	@ (8007dd8 <sbrk_aligned+0x40>)
 8007d9c:	460c      	mov	r4, r1
 8007d9e:	6831      	ldr	r1, [r6, #0]
 8007da0:	4605      	mov	r5, r0
 8007da2:	b911      	cbnz	r1, 8007daa <sbrk_aligned+0x12>
 8007da4:	f000 f8ae 	bl	8007f04 <_sbrk_r>
 8007da8:	6030      	str	r0, [r6, #0]
 8007daa:	4621      	mov	r1, r4
 8007dac:	4628      	mov	r0, r5
 8007dae:	f000 f8a9 	bl	8007f04 <_sbrk_r>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d103      	bne.n	8007dbe <sbrk_aligned+0x26>
 8007db6:	f04f 34ff 	mov.w	r4, #4294967295
 8007dba:	4620      	mov	r0, r4
 8007dbc:	bd70      	pop	{r4, r5, r6, pc}
 8007dbe:	1cc4      	adds	r4, r0, #3
 8007dc0:	f024 0403 	bic.w	r4, r4, #3
 8007dc4:	42a0      	cmp	r0, r4
 8007dc6:	d0f8      	beq.n	8007dba <sbrk_aligned+0x22>
 8007dc8:	1a21      	subs	r1, r4, r0
 8007dca:	4628      	mov	r0, r5
 8007dcc:	f000 f89a 	bl	8007f04 <_sbrk_r>
 8007dd0:	3001      	adds	r0, #1
 8007dd2:	d1f2      	bne.n	8007dba <sbrk_aligned+0x22>
 8007dd4:	e7ef      	b.n	8007db6 <sbrk_aligned+0x1e>
 8007dd6:	bf00      	nop
 8007dd8:	2000241c 	.word	0x2000241c

08007ddc <_malloc_r>:
 8007ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de0:	1ccd      	adds	r5, r1, #3
 8007de2:	f025 0503 	bic.w	r5, r5, #3
 8007de6:	3508      	adds	r5, #8
 8007de8:	2d0c      	cmp	r5, #12
 8007dea:	bf38      	it	cc
 8007dec:	250c      	movcc	r5, #12
 8007dee:	2d00      	cmp	r5, #0
 8007df0:	4606      	mov	r6, r0
 8007df2:	db01      	blt.n	8007df8 <_malloc_r+0x1c>
 8007df4:	42a9      	cmp	r1, r5
 8007df6:	d904      	bls.n	8007e02 <_malloc_r+0x26>
 8007df8:	230c      	movs	r3, #12
 8007dfa:	6033      	str	r3, [r6, #0]
 8007dfc:	2000      	movs	r0, #0
 8007dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ed8 <_malloc_r+0xfc>
 8007e06:	f000 f869 	bl	8007edc <__malloc_lock>
 8007e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e0e:	461c      	mov	r4, r3
 8007e10:	bb44      	cbnz	r4, 8007e64 <_malloc_r+0x88>
 8007e12:	4629      	mov	r1, r5
 8007e14:	4630      	mov	r0, r6
 8007e16:	f7ff ffbf 	bl	8007d98 <sbrk_aligned>
 8007e1a:	1c43      	adds	r3, r0, #1
 8007e1c:	4604      	mov	r4, r0
 8007e1e:	d158      	bne.n	8007ed2 <_malloc_r+0xf6>
 8007e20:	f8d8 4000 	ldr.w	r4, [r8]
 8007e24:	4627      	mov	r7, r4
 8007e26:	2f00      	cmp	r7, #0
 8007e28:	d143      	bne.n	8007eb2 <_malloc_r+0xd6>
 8007e2a:	2c00      	cmp	r4, #0
 8007e2c:	d04b      	beq.n	8007ec6 <_malloc_r+0xea>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	4639      	mov	r1, r7
 8007e32:	4630      	mov	r0, r6
 8007e34:	eb04 0903 	add.w	r9, r4, r3
 8007e38:	f000 f864 	bl	8007f04 <_sbrk_r>
 8007e3c:	4581      	cmp	r9, r0
 8007e3e:	d142      	bne.n	8007ec6 <_malloc_r+0xea>
 8007e40:	6821      	ldr	r1, [r4, #0]
 8007e42:	4630      	mov	r0, r6
 8007e44:	1a6d      	subs	r5, r5, r1
 8007e46:	4629      	mov	r1, r5
 8007e48:	f7ff ffa6 	bl	8007d98 <sbrk_aligned>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d03a      	beq.n	8007ec6 <_malloc_r+0xea>
 8007e50:	6823      	ldr	r3, [r4, #0]
 8007e52:	442b      	add	r3, r5
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	f8d8 3000 	ldr.w	r3, [r8]
 8007e5a:	685a      	ldr	r2, [r3, #4]
 8007e5c:	bb62      	cbnz	r2, 8007eb8 <_malloc_r+0xdc>
 8007e5e:	f8c8 7000 	str.w	r7, [r8]
 8007e62:	e00f      	b.n	8007e84 <_malloc_r+0xa8>
 8007e64:	6822      	ldr	r2, [r4, #0]
 8007e66:	1b52      	subs	r2, r2, r5
 8007e68:	d420      	bmi.n	8007eac <_malloc_r+0xd0>
 8007e6a:	2a0b      	cmp	r2, #11
 8007e6c:	d917      	bls.n	8007e9e <_malloc_r+0xc2>
 8007e6e:	1961      	adds	r1, r4, r5
 8007e70:	42a3      	cmp	r3, r4
 8007e72:	6025      	str	r5, [r4, #0]
 8007e74:	bf18      	it	ne
 8007e76:	6059      	strne	r1, [r3, #4]
 8007e78:	6863      	ldr	r3, [r4, #4]
 8007e7a:	bf08      	it	eq
 8007e7c:	f8c8 1000 	streq.w	r1, [r8]
 8007e80:	5162      	str	r2, [r4, r5]
 8007e82:	604b      	str	r3, [r1, #4]
 8007e84:	4630      	mov	r0, r6
 8007e86:	f000 f82f 	bl	8007ee8 <__malloc_unlock>
 8007e8a:	f104 000b 	add.w	r0, r4, #11
 8007e8e:	1d23      	adds	r3, r4, #4
 8007e90:	f020 0007 	bic.w	r0, r0, #7
 8007e94:	1ac2      	subs	r2, r0, r3
 8007e96:	bf1c      	itt	ne
 8007e98:	1a1b      	subne	r3, r3, r0
 8007e9a:	50a3      	strne	r3, [r4, r2]
 8007e9c:	e7af      	b.n	8007dfe <_malloc_r+0x22>
 8007e9e:	6862      	ldr	r2, [r4, #4]
 8007ea0:	42a3      	cmp	r3, r4
 8007ea2:	bf0c      	ite	eq
 8007ea4:	f8c8 2000 	streq.w	r2, [r8]
 8007ea8:	605a      	strne	r2, [r3, #4]
 8007eaa:	e7eb      	b.n	8007e84 <_malloc_r+0xa8>
 8007eac:	4623      	mov	r3, r4
 8007eae:	6864      	ldr	r4, [r4, #4]
 8007eb0:	e7ae      	b.n	8007e10 <_malloc_r+0x34>
 8007eb2:	463c      	mov	r4, r7
 8007eb4:	687f      	ldr	r7, [r7, #4]
 8007eb6:	e7b6      	b.n	8007e26 <_malloc_r+0x4a>
 8007eb8:	461a      	mov	r2, r3
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	42a3      	cmp	r3, r4
 8007ebe:	d1fb      	bne.n	8007eb8 <_malloc_r+0xdc>
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	6053      	str	r3, [r2, #4]
 8007ec4:	e7de      	b.n	8007e84 <_malloc_r+0xa8>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	4630      	mov	r0, r6
 8007eca:	6033      	str	r3, [r6, #0]
 8007ecc:	f000 f80c 	bl	8007ee8 <__malloc_unlock>
 8007ed0:	e794      	b.n	8007dfc <_malloc_r+0x20>
 8007ed2:	6005      	str	r5, [r0, #0]
 8007ed4:	e7d6      	b.n	8007e84 <_malloc_r+0xa8>
 8007ed6:	bf00      	nop
 8007ed8:	20002420 	.word	0x20002420

08007edc <__malloc_lock>:
 8007edc:	4801      	ldr	r0, [pc, #4]	@ (8007ee4 <__malloc_lock+0x8>)
 8007ede:	f000 b84b 	b.w	8007f78 <__retarget_lock_acquire_recursive>
 8007ee2:	bf00      	nop
 8007ee4:	20002560 	.word	0x20002560

08007ee8 <__malloc_unlock>:
 8007ee8:	4801      	ldr	r0, [pc, #4]	@ (8007ef0 <__malloc_unlock+0x8>)
 8007eea:	f000 b846 	b.w	8007f7a <__retarget_lock_release_recursive>
 8007eee:	bf00      	nop
 8007ef0:	20002560 	.word	0x20002560

08007ef4 <memset>:
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	4402      	add	r2, r0
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d100      	bne.n	8007efe <memset+0xa>
 8007efc:	4770      	bx	lr
 8007efe:	f803 1b01 	strb.w	r1, [r3], #1
 8007f02:	e7f9      	b.n	8007ef8 <memset+0x4>

08007f04 <_sbrk_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	2300      	movs	r3, #0
 8007f08:	4d05      	ldr	r5, [pc, #20]	@ (8007f20 <_sbrk_r+0x1c>)
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	4608      	mov	r0, r1
 8007f0e:	602b      	str	r3, [r5, #0]
 8007f10:	f7fb fd84 	bl	8003a1c <_sbrk>
 8007f14:	1c43      	adds	r3, r0, #1
 8007f16:	d102      	bne.n	8007f1e <_sbrk_r+0x1a>
 8007f18:	682b      	ldr	r3, [r5, #0]
 8007f1a:	b103      	cbz	r3, 8007f1e <_sbrk_r+0x1a>
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	bd38      	pop	{r3, r4, r5, pc}
 8007f20:	2000255c 	.word	0x2000255c

08007f24 <__errno>:
 8007f24:	4b01      	ldr	r3, [pc, #4]	@ (8007f2c <__errno+0x8>)
 8007f26:	6818      	ldr	r0, [r3, #0]
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	20000018 	.word	0x20000018

08007f30 <__libc_init_array>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	2600      	movs	r6, #0
 8007f34:	4d0c      	ldr	r5, [pc, #48]	@ (8007f68 <__libc_init_array+0x38>)
 8007f36:	4c0d      	ldr	r4, [pc, #52]	@ (8007f6c <__libc_init_array+0x3c>)
 8007f38:	1b64      	subs	r4, r4, r5
 8007f3a:	10a4      	asrs	r4, r4, #2
 8007f3c:	42a6      	cmp	r6, r4
 8007f3e:	d109      	bne.n	8007f54 <__libc_init_array+0x24>
 8007f40:	f000 f864 	bl	800800c <_init>
 8007f44:	2600      	movs	r6, #0
 8007f46:	4d0a      	ldr	r5, [pc, #40]	@ (8007f70 <__libc_init_array+0x40>)
 8007f48:	4c0a      	ldr	r4, [pc, #40]	@ (8007f74 <__libc_init_array+0x44>)
 8007f4a:	1b64      	subs	r4, r4, r5
 8007f4c:	10a4      	asrs	r4, r4, #2
 8007f4e:	42a6      	cmp	r6, r4
 8007f50:	d105      	bne.n	8007f5e <__libc_init_array+0x2e>
 8007f52:	bd70      	pop	{r4, r5, r6, pc}
 8007f54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f58:	4798      	blx	r3
 8007f5a:	3601      	adds	r6, #1
 8007f5c:	e7ee      	b.n	8007f3c <__libc_init_array+0xc>
 8007f5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f62:	4798      	blx	r3
 8007f64:	3601      	adds	r6, #1
 8007f66:	e7f2      	b.n	8007f4e <__libc_init_array+0x1e>
 8007f68:	0800804c 	.word	0x0800804c
 8007f6c:	0800804c 	.word	0x0800804c
 8007f70:	0800804c 	.word	0x0800804c
 8007f74:	08008050 	.word	0x08008050

08007f78 <__retarget_lock_acquire_recursive>:
 8007f78:	4770      	bx	lr

08007f7a <__retarget_lock_release_recursive>:
 8007f7a:	4770      	bx	lr

08007f7c <_free_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4605      	mov	r5, r0
 8007f80:	2900      	cmp	r1, #0
 8007f82:	d040      	beq.n	8008006 <_free_r+0x8a>
 8007f84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f88:	1f0c      	subs	r4, r1, #4
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	bfb8      	it	lt
 8007f8e:	18e4      	addlt	r4, r4, r3
 8007f90:	f7ff ffa4 	bl	8007edc <__malloc_lock>
 8007f94:	4a1c      	ldr	r2, [pc, #112]	@ (8008008 <_free_r+0x8c>)
 8007f96:	6813      	ldr	r3, [r2, #0]
 8007f98:	b933      	cbnz	r3, 8007fa8 <_free_r+0x2c>
 8007f9a:	6063      	str	r3, [r4, #4]
 8007f9c:	6014      	str	r4, [r2, #0]
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fa4:	f7ff bfa0 	b.w	8007ee8 <__malloc_unlock>
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	d908      	bls.n	8007fbe <_free_r+0x42>
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	1821      	adds	r1, r4, r0
 8007fb0:	428b      	cmp	r3, r1
 8007fb2:	bf01      	itttt	eq
 8007fb4:	6819      	ldreq	r1, [r3, #0]
 8007fb6:	685b      	ldreq	r3, [r3, #4]
 8007fb8:	1809      	addeq	r1, r1, r0
 8007fba:	6021      	streq	r1, [r4, #0]
 8007fbc:	e7ed      	b.n	8007f9a <_free_r+0x1e>
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	b10b      	cbz	r3, 8007fc8 <_free_r+0x4c>
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	d9fa      	bls.n	8007fbe <_free_r+0x42>
 8007fc8:	6811      	ldr	r1, [r2, #0]
 8007fca:	1850      	adds	r0, r2, r1
 8007fcc:	42a0      	cmp	r0, r4
 8007fce:	d10b      	bne.n	8007fe8 <_free_r+0x6c>
 8007fd0:	6820      	ldr	r0, [r4, #0]
 8007fd2:	4401      	add	r1, r0
 8007fd4:	1850      	adds	r0, r2, r1
 8007fd6:	4283      	cmp	r3, r0
 8007fd8:	6011      	str	r1, [r2, #0]
 8007fda:	d1e0      	bne.n	8007f9e <_free_r+0x22>
 8007fdc:	6818      	ldr	r0, [r3, #0]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	4408      	add	r0, r1
 8007fe2:	6010      	str	r0, [r2, #0]
 8007fe4:	6053      	str	r3, [r2, #4]
 8007fe6:	e7da      	b.n	8007f9e <_free_r+0x22>
 8007fe8:	d902      	bls.n	8007ff0 <_free_r+0x74>
 8007fea:	230c      	movs	r3, #12
 8007fec:	602b      	str	r3, [r5, #0]
 8007fee:	e7d6      	b.n	8007f9e <_free_r+0x22>
 8007ff0:	6820      	ldr	r0, [r4, #0]
 8007ff2:	1821      	adds	r1, r4, r0
 8007ff4:	428b      	cmp	r3, r1
 8007ff6:	bf01      	itttt	eq
 8007ff8:	6819      	ldreq	r1, [r3, #0]
 8007ffa:	685b      	ldreq	r3, [r3, #4]
 8007ffc:	1809      	addeq	r1, r1, r0
 8007ffe:	6021      	streq	r1, [r4, #0]
 8008000:	6063      	str	r3, [r4, #4]
 8008002:	6054      	str	r4, [r2, #4]
 8008004:	e7cb      	b.n	8007f9e <_free_r+0x22>
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20002420 	.word	0x20002420

0800800c <_init>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	bf00      	nop
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr

08008018 <_fini>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr
