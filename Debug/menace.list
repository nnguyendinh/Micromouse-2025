
menace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008350  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080084d8  080084d8  000094d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f8  080084f8  0000a08c  2**0
                  CONTENTS
  4 .ARM          00000008  080084f8  080084f8  000094f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008500  08008500  0000a08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008500  08008500  00009500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008504  08008504  00009504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  08008508  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002508  2000008c  08008594  0000a08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002594  08008594  0000a594  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fd36  00000000  00000000  0000a0b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3c  00000000  00000000  00019deb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001058  00000000  00000000  0001ca28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cb8  00000000  00000000  0001da80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff7c  00000000  00000000  0001e738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b02  00000000  00000000  0003e6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be0dd  00000000  00000000  000541b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112293  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a58  00000000  00000000  001122d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00116d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000008c 	.word	0x2000008c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080084c0 	.word	0x080084c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000090 	.word	0x20000090
 80001c4:	080084c0 	.word	0x080084c0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_frsub>:
 8000b64:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b68:	e002      	b.n	8000b70 <__addsf3>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_fsub>:
 8000b6c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b70 <__addsf3>:
 8000b70:	0042      	lsls	r2, r0, #1
 8000b72:	bf1f      	itttt	ne
 8000b74:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b78:	ea92 0f03 	teqne	r2, r3
 8000b7c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b80:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b84:	d06a      	beq.n	8000c5c <__addsf3+0xec>
 8000b86:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8e:	bfc1      	itttt	gt
 8000b90:	18d2      	addgt	r2, r2, r3
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	4048      	eorgt	r0, r1
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	bfb8      	it	lt
 8000b9a:	425b      	neglt	r3, r3
 8000b9c:	2b19      	cmp	r3, #25
 8000b9e:	bf88      	it	hi
 8000ba0:	4770      	bxhi	lr
 8000ba2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ba6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000baa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bae:	bf18      	it	ne
 8000bb0:	4240      	negne	r0, r0
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bb6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bba:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bbe:	bf18      	it	ne
 8000bc0:	4249      	negne	r1, r1
 8000bc2:	ea92 0f03 	teq	r2, r3
 8000bc6:	d03f      	beq.n	8000c48 <__addsf3+0xd8>
 8000bc8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bcc:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd0:	eb10 000c 	adds.w	r0, r0, ip
 8000bd4:	f1c3 0320 	rsb	r3, r3, #32
 8000bd8:	fa01 f103 	lsl.w	r1, r1, r3
 8000bdc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be0:	d502      	bpl.n	8000be8 <__addsf3+0x78>
 8000be2:	4249      	negs	r1, r1
 8000be4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bec:	d313      	bcc.n	8000c16 <__addsf3+0xa6>
 8000bee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf2:	d306      	bcc.n	8000c02 <__addsf3+0x92>
 8000bf4:	0840      	lsrs	r0, r0, #1
 8000bf6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfa:	f102 0201 	add.w	r2, r2, #1
 8000bfe:	2afe      	cmp	r2, #254	@ 0xfe
 8000c00:	d251      	bcs.n	8000ca6 <__addsf3+0x136>
 8000c02:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c06:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0a:	bf08      	it	eq
 8000c0c:	f020 0001 	biceq.w	r0, r0, #1
 8000c10:	ea40 0003 	orr.w	r0, r0, r3
 8000c14:	4770      	bx	lr
 8000c16:	0049      	lsls	r1, r1, #1
 8000c18:	eb40 0000 	adc.w	r0, r0, r0
 8000c1c:	3a01      	subs	r2, #1
 8000c1e:	bf28      	it	cs
 8000c20:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c24:	d2ed      	bcs.n	8000c02 <__addsf3+0x92>
 8000c26:	fab0 fc80 	clz	ip, r0
 8000c2a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2e:	ebb2 020c 	subs.w	r2, r2, ip
 8000c32:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c36:	bfaa      	itet	ge
 8000c38:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c3c:	4252      	neglt	r2, r2
 8000c3e:	4318      	orrge	r0, r3
 8000c40:	bfbc      	itt	lt
 8000c42:	40d0      	lsrlt	r0, r2
 8000c44:	4318      	orrlt	r0, r3
 8000c46:	4770      	bx	lr
 8000c48:	f092 0f00 	teq	r2, #0
 8000c4c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c50:	bf06      	itte	eq
 8000c52:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c56:	3201      	addeq	r2, #1
 8000c58:	3b01      	subne	r3, #1
 8000c5a:	e7b5      	b.n	8000bc8 <__addsf3+0x58>
 8000c5c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c60:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c64:	bf18      	it	ne
 8000c66:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6a:	d021      	beq.n	8000cb0 <__addsf3+0x140>
 8000c6c:	ea92 0f03 	teq	r2, r3
 8000c70:	d004      	beq.n	8000c7c <__addsf3+0x10c>
 8000c72:	f092 0f00 	teq	r2, #0
 8000c76:	bf08      	it	eq
 8000c78:	4608      	moveq	r0, r1
 8000c7a:	4770      	bx	lr
 8000c7c:	ea90 0f01 	teq	r0, r1
 8000c80:	bf1c      	itt	ne
 8000c82:	2000      	movne	r0, #0
 8000c84:	4770      	bxne	lr
 8000c86:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8a:	d104      	bne.n	8000c96 <__addsf3+0x126>
 8000c8c:	0040      	lsls	r0, r0, #1
 8000c8e:	bf28      	it	cs
 8000c90:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c94:	4770      	bx	lr
 8000c96:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9a:	bf3c      	itt	cc
 8000c9c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca0:	4770      	bxcc	lr
 8000ca2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ca6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000caa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cae:	4770      	bx	lr
 8000cb0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb4:	bf16      	itet	ne
 8000cb6:	4608      	movne	r0, r1
 8000cb8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cbc:	4601      	movne	r1, r0
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	bf06      	itte	eq
 8000cc2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc6:	ea90 0f01 	teqeq	r0, r1
 8000cca:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_ui2f>:
 8000cd0:	f04f 0300 	mov.w	r3, #0
 8000cd4:	e004      	b.n	8000ce0 <__aeabi_i2f+0x8>
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_i2f>:
 8000cd8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cdc:	bf48      	it	mi
 8000cde:	4240      	negmi	r0, r0
 8000ce0:	ea5f 0c00 	movs.w	ip, r0
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cec:	4601      	mov	r1, r0
 8000cee:	f04f 0000 	mov.w	r0, #0
 8000cf2:	e01c      	b.n	8000d2e <__aeabi_l2f+0x2a>

08000cf4 <__aeabi_ul2f>:
 8000cf4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf8:	bf08      	it	eq
 8000cfa:	4770      	bxeq	lr
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e00a      	b.n	8000d18 <__aeabi_l2f+0x14>
 8000d02:	bf00      	nop

08000d04 <__aeabi_l2f>:
 8000d04:	ea50 0201 	orrs.w	r2, r0, r1
 8000d08:	bf08      	it	eq
 8000d0a:	4770      	bxeq	lr
 8000d0c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d10:	d502      	bpl.n	8000d18 <__aeabi_l2f+0x14>
 8000d12:	4240      	negs	r0, r0
 8000d14:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d18:	ea5f 0c01 	movs.w	ip, r1
 8000d1c:	bf02      	ittt	eq
 8000d1e:	4684      	moveq	ip, r0
 8000d20:	4601      	moveq	r1, r0
 8000d22:	2000      	moveq	r0, #0
 8000d24:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d28:	bf08      	it	eq
 8000d2a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d2e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d32:	fabc f28c 	clz	r2, ip
 8000d36:	3a08      	subs	r2, #8
 8000d38:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d3c:	db10      	blt.n	8000d60 <__aeabi_l2f+0x5c>
 8000d3e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d42:	4463      	add	r3, ip
 8000d44:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d48:	f1c2 0220 	rsb	r2, r2, #32
 8000d4c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d50:	fa20 f202 	lsr.w	r2, r0, r2
 8000d54:	eb43 0002 	adc.w	r0, r3, r2
 8000d58:	bf08      	it	eq
 8000d5a:	f020 0001 	biceq.w	r0, r0, #1
 8000d5e:	4770      	bx	lr
 8000d60:	f102 0220 	add.w	r2, r2, #32
 8000d64:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d68:	f1c2 0220 	rsb	r2, r2, #32
 8000d6c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d70:	fa21 f202 	lsr.w	r2, r1, r2
 8000d74:	eb43 0002 	adc.w	r0, r3, r2
 8000d78:	bf08      	it	eq
 8000d7a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7e:	4770      	bx	lr

08000d80 <__aeabi_fmul>:
 8000d80:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d84:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d88:	bf1e      	ittt	ne
 8000d8a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8e:	ea92 0f0c 	teqne	r2, ip
 8000d92:	ea93 0f0c 	teqne	r3, ip
 8000d96:	d06f      	beq.n	8000e78 <__aeabi_fmul+0xf8>
 8000d98:	441a      	add	r2, r3
 8000d9a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9e:	0240      	lsls	r0, r0, #9
 8000da0:	bf18      	it	ne
 8000da2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da6:	d01e      	beq.n	8000de6 <__aeabi_fmul+0x66>
 8000da8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dac:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db4:	fba0 3101 	umull	r3, r1, r0, r1
 8000db8:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dbc:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc0:	bf3e      	ittt	cc
 8000dc2:	0049      	lslcc	r1, r1, #1
 8000dc4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc8:	005b      	lslcc	r3, r3, #1
 8000dca:	ea40 0001 	orr.w	r0, r0, r1
 8000dce:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd2:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd4:	d81d      	bhi.n	8000e12 <__aeabi_fmul+0x92>
 8000dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dde:	bf08      	it	eq
 8000de0:	f020 0001 	biceq.w	r0, r0, #1
 8000de4:	4770      	bx	lr
 8000de6:	f090 0f00 	teq	r0, #0
 8000dea:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dee:	bf08      	it	eq
 8000df0:	0249      	lsleq	r1, r1, #9
 8000df2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfa:	3a7f      	subs	r2, #127	@ 0x7f
 8000dfc:	bfc2      	ittt	gt
 8000dfe:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e02:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e06:	4770      	bxgt	lr
 8000e08:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e0c:	f04f 0300 	mov.w	r3, #0
 8000e10:	3a01      	subs	r2, #1
 8000e12:	dc5d      	bgt.n	8000ed0 <__aeabi_fmul+0x150>
 8000e14:	f112 0f19 	cmn.w	r2, #25
 8000e18:	bfdc      	itt	le
 8000e1a:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e1e:	4770      	bxle	lr
 8000e20:	f1c2 0200 	rsb	r2, r2, #0
 8000e24:	0041      	lsls	r1, r0, #1
 8000e26:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2a:	f1c2 0220 	rsb	r2, r2, #32
 8000e2e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e32:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e36:	f140 0000 	adc.w	r0, r0, #0
 8000e3a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3e:	bf08      	it	eq
 8000e40:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e44:	4770      	bx	lr
 8000e46:	f092 0f00 	teq	r2, #0
 8000e4a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e4e:	bf02      	ittt	eq
 8000e50:	0040      	lsleq	r0, r0, #1
 8000e52:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e56:	3a01      	subeq	r2, #1
 8000e58:	d0f9      	beq.n	8000e4e <__aeabi_fmul+0xce>
 8000e5a:	ea40 000c 	orr.w	r0, r0, ip
 8000e5e:	f093 0f00 	teq	r3, #0
 8000e62:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0049      	lsleq	r1, r1, #1
 8000e6a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e6e:	3b01      	subeq	r3, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xe6>
 8000e72:	ea41 010c 	orr.w	r1, r1, ip
 8000e76:	e78f      	b.n	8000d98 <__aeabi_fmul+0x18>
 8000e78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e7c:	ea92 0f0c 	teq	r2, ip
 8000e80:	bf18      	it	ne
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d00a      	beq.n	8000e9e <__aeabi_fmul+0x11e>
 8000e88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e8c:	bf18      	it	ne
 8000e8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e92:	d1d8      	bne.n	8000e46 <__aeabi_fmul+0xc6>
 8000e94:	ea80 0001 	eor.w	r0, r0, r1
 8000e98:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f090 0f00 	teq	r0, #0
 8000ea2:	bf17      	itett	ne
 8000ea4:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ea8:	4608      	moveq	r0, r1
 8000eaa:	f091 0f00 	teqne	r1, #0
 8000eae:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb2:	d014      	beq.n	8000ede <__aeabi_fmul+0x15e>
 8000eb4:	ea92 0f0c 	teq	r2, ip
 8000eb8:	d101      	bne.n	8000ebe <__aeabi_fmul+0x13e>
 8000eba:	0242      	lsls	r2, r0, #9
 8000ebc:	d10f      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ebe:	ea93 0f0c 	teq	r3, ip
 8000ec2:	d103      	bne.n	8000ecc <__aeabi_fmul+0x14c>
 8000ec4:	024b      	lsls	r3, r1, #9
 8000ec6:	bf18      	it	ne
 8000ec8:	4608      	movne	r0, r1
 8000eca:	d108      	bne.n	8000ede <__aeabi_fmul+0x15e>
 8000ecc:	ea80 0001 	eor.w	r0, r0, r1
 8000ed0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ed8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000edc:	4770      	bx	lr
 8000ede:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ee6:	4770      	bx	lr

08000ee8 <__aeabi_fdiv>:
 8000ee8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef0:	bf1e      	ittt	ne
 8000ef2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef6:	ea92 0f0c 	teqne	r2, ip
 8000efa:	ea93 0f0c 	teqne	r3, ip
 8000efe:	d069      	beq.n	8000fd4 <__aeabi_fdiv+0xec>
 8000f00:	eba2 0203 	sub.w	r2, r2, r3
 8000f04:	ea80 0c01 	eor.w	ip, r0, r1
 8000f08:	0249      	lsls	r1, r1, #9
 8000f0a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0e:	d037      	beq.n	8000f80 <__aeabi_fdiv+0x98>
 8000f10:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f14:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f18:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f1c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f20:	428b      	cmp	r3, r1
 8000f22:	bf38      	it	cc
 8000f24:	005b      	lslcc	r3, r3, #1
 8000f26:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2a:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	bf24      	itt	cs
 8000f32:	1a5b      	subcs	r3, r3, r1
 8000f34:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f38:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f3c:	bf24      	itt	cs
 8000f3e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f42:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f46:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4a:	bf24      	itt	cs
 8000f4c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f50:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f58:	bf24      	itt	cs
 8000f5a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	bf18      	it	ne
 8000f66:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6a:	d1e0      	bne.n	8000f2e <__aeabi_fdiv+0x46>
 8000f6c:	2afd      	cmp	r2, #253	@ 0xfd
 8000f6e:	f63f af50 	bhi.w	8000e12 <__aeabi_fmul+0x92>
 8000f72:	428b      	cmp	r3, r1
 8000f74:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f78:	bf08      	it	eq
 8000f7a:	f020 0001 	biceq.w	r0, r0, #1
 8000f7e:	4770      	bx	lr
 8000f80:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f84:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f88:	327f      	adds	r2, #127	@ 0x7f
 8000f8a:	bfc2      	ittt	gt
 8000f8c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f90:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f94:	4770      	bxgt	lr
 8000f96:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9a:	f04f 0300 	mov.w	r3, #0
 8000f9e:	3a01      	subs	r2, #1
 8000fa0:	e737      	b.n	8000e12 <__aeabi_fmul+0x92>
 8000fa2:	f092 0f00 	teq	r2, #0
 8000fa6:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000faa:	bf02      	ittt	eq
 8000fac:	0040      	lsleq	r0, r0, #1
 8000fae:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb2:	3a01      	subeq	r2, #1
 8000fb4:	d0f9      	beq.n	8000faa <__aeabi_fdiv+0xc2>
 8000fb6:	ea40 000c 	orr.w	r0, r0, ip
 8000fba:	f093 0f00 	teq	r3, #0
 8000fbe:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0049      	lsleq	r1, r1, #1
 8000fc6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fca:	3b01      	subeq	r3, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xda>
 8000fce:	ea41 010c 	orr.w	r1, r1, ip
 8000fd2:	e795      	b.n	8000f00 <__aeabi_fdiv+0x18>
 8000fd4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd8:	ea92 0f0c 	teq	r2, ip
 8000fdc:	d108      	bne.n	8000ff0 <__aeabi_fdiv+0x108>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	f47f af7d 	bne.w	8000ede <__aeabi_fmul+0x15e>
 8000fe4:	ea93 0f0c 	teq	r3, ip
 8000fe8:	f47f af70 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8000fec:	4608      	mov	r0, r1
 8000fee:	e776      	b.n	8000ede <__aeabi_fmul+0x15e>
 8000ff0:	ea93 0f0c 	teq	r3, ip
 8000ff4:	d104      	bne.n	8001000 <__aeabi_fdiv+0x118>
 8000ff6:	024b      	lsls	r3, r1, #9
 8000ff8:	f43f af4c 	beq.w	8000e94 <__aeabi_fmul+0x114>
 8000ffc:	4608      	mov	r0, r1
 8000ffe:	e76e      	b.n	8000ede <__aeabi_fmul+0x15e>
 8001000:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001004:	bf18      	it	ne
 8001006:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100a:	d1ca      	bne.n	8000fa2 <__aeabi_fdiv+0xba>
 800100c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001010:	f47f af5c 	bne.w	8000ecc <__aeabi_fmul+0x14c>
 8001014:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001018:	f47f af3c 	bne.w	8000e94 <__aeabi_fmul+0x114>
 800101c:	e75f      	b.n	8000ede <__aeabi_fmul+0x15e>
 800101e:	bf00      	nop

08001020 <__gesf2>:
 8001020:	f04f 3cff 	mov.w	ip, #4294967295
 8001024:	e006      	b.n	8001034 <__cmpsf2+0x4>
 8001026:	bf00      	nop

08001028 <__lesf2>:
 8001028:	f04f 0c01 	mov.w	ip, #1
 800102c:	e002      	b.n	8001034 <__cmpsf2+0x4>
 800102e:	bf00      	nop

08001030 <__cmpsf2>:
 8001030:	f04f 0c01 	mov.w	ip, #1
 8001034:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001038:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800103c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001040:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001044:	bf18      	it	ne
 8001046:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104a:	d011      	beq.n	8001070 <__cmpsf2+0x40>
 800104c:	b001      	add	sp, #4
 800104e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001052:	bf18      	it	ne
 8001054:	ea90 0f01 	teqne	r0, r1
 8001058:	bf58      	it	pl
 800105a:	ebb2 0003 	subspl.w	r0, r2, r3
 800105e:	bf88      	it	hi
 8001060:	17c8      	asrhi	r0, r1, #31
 8001062:	bf38      	it	cc
 8001064:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001068:	bf18      	it	ne
 800106a:	f040 0001 	orrne.w	r0, r0, #1
 800106e:	4770      	bx	lr
 8001070:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001074:	d102      	bne.n	800107c <__cmpsf2+0x4c>
 8001076:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107a:	d105      	bne.n	8001088 <__cmpsf2+0x58>
 800107c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001080:	d1e4      	bne.n	800104c <__cmpsf2+0x1c>
 8001082:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001086:	d0e1      	beq.n	800104c <__cmpsf2+0x1c>
 8001088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <__aeabi_cfrcmple>:
 8001090:	4684      	mov	ip, r0
 8001092:	4608      	mov	r0, r1
 8001094:	4661      	mov	r1, ip
 8001096:	e7ff      	b.n	8001098 <__aeabi_cfcmpeq>

08001098 <__aeabi_cfcmpeq>:
 8001098:	b50f      	push	{r0, r1, r2, r3, lr}
 800109a:	f7ff ffc9 	bl	8001030 <__cmpsf2>
 800109e:	2800      	cmp	r0, #0
 80010a0:	bf48      	it	mi
 80010a2:	f110 0f00 	cmnmi.w	r0, #0
 80010a6:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a8 <__aeabi_fcmpeq>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff fff4 	bl	8001098 <__aeabi_cfcmpeq>
 80010b0:	bf0c      	ite	eq
 80010b2:	2001      	moveq	r0, #1
 80010b4:	2000      	movne	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmplt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffea 	bl	8001098 <__aeabi_cfcmpeq>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmple>:
 80010d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d4:	f7ff ffe0 	bl	8001098 <__aeabi_cfcmpeq>
 80010d8:	bf94      	ite	ls
 80010da:	2001      	movls	r0, #1
 80010dc:	2000      	movhi	r0, #0
 80010de:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e2:	bf00      	nop

080010e4 <__aeabi_fcmpge>:
 80010e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e8:	f7ff ffd2 	bl	8001090 <__aeabi_cfrcmple>
 80010ec:	bf94      	ite	ls
 80010ee:	2001      	movls	r0, #1
 80010f0:	2000      	movhi	r0, #0
 80010f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f6:	bf00      	nop

080010f8 <__aeabi_fcmpgt>:
 80010f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010fc:	f7ff ffc8 	bl	8001090 <__aeabi_cfrcmple>
 8001100:	bf34      	ite	cc
 8001102:	2001      	movcc	r0, #1
 8001104:	2000      	movcs	r0, #0
 8001106:	f85d fb08 	ldr.w	pc, [sp], #8
 800110a:	bf00      	nop

0800110c <__aeabi_f2iz>:
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001114:	d30f      	bcc.n	8001136 <__aeabi_f2iz+0x2a>
 8001116:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111e:	d90d      	bls.n	800113c <__aeabi_f2iz+0x30>
 8001120:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001124:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001128:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800112c:	fa23 f002 	lsr.w	r0, r3, r2
 8001130:	bf18      	it	ne
 8001132:	4240      	negne	r0, r0
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr
 800113c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001140:	d101      	bne.n	8001146 <__aeabi_f2iz+0x3a>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	d105      	bne.n	8001152 <__aeabi_f2iz+0x46>
 8001146:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114a:	bf08      	it	eq
 800114c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001150:	4770      	bx	lr
 8001152:	f04f 0000 	mov.w	r0, #0
 8001156:	4770      	bx	lr

08001158 <__aeabi_f2uiz>:
 8001158:	0042      	lsls	r2, r0, #1
 800115a:	d20e      	bcs.n	800117a <__aeabi_f2uiz+0x22>
 800115c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001160:	d30b      	bcc.n	800117a <__aeabi_f2uiz+0x22>
 8001162:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001166:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800116a:	d409      	bmi.n	8001180 <__aeabi_f2uiz+0x28>
 800116c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001170:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001174:	fa23 f002 	lsr.w	r0, r3, r2
 8001178:	4770      	bx	lr
 800117a:	f04f 0000 	mov.w	r0, #0
 800117e:	4770      	bx	lr
 8001180:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001184:	d101      	bne.n	800118a <__aeabi_f2uiz+0x32>
 8001186:	0242      	lsls	r2, r0, #9
 8001188:	d102      	bne.n	8001190 <__aeabi_f2uiz+0x38>
 800118a:	f04f 30ff 	mov.w	r0, #4294967295
 800118e:	4770      	bx	lr
 8001190:	f04f 0000 	mov.w	r0, #0
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop

08001198 <__aeabi_uldivmod>:
 8001198:	b953      	cbnz	r3, 80011b0 <__aeabi_uldivmod+0x18>
 800119a:	b94a      	cbnz	r2, 80011b0 <__aeabi_uldivmod+0x18>
 800119c:	2900      	cmp	r1, #0
 800119e:	bf08      	it	eq
 80011a0:	2800      	cmpeq	r0, #0
 80011a2:	bf1c      	itt	ne
 80011a4:	f04f 31ff 	movne.w	r1, #4294967295
 80011a8:	f04f 30ff 	movne.w	r0, #4294967295
 80011ac:	f000 b968 	b.w	8001480 <__aeabi_idiv0>
 80011b0:	f1ad 0c08 	sub.w	ip, sp, #8
 80011b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011b8:	f000 f806 	bl	80011c8 <__udivmoddi4>
 80011bc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011c4:	b004      	add	sp, #16
 80011c6:	4770      	bx	lr

080011c8 <__udivmoddi4>:
 80011c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011cc:	9d08      	ldr	r5, [sp, #32]
 80011ce:	460c      	mov	r4, r1
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d14e      	bne.n	8001272 <__udivmoddi4+0xaa>
 80011d4:	4694      	mov	ip, r2
 80011d6:	458c      	cmp	ip, r1
 80011d8:	4686      	mov	lr, r0
 80011da:	fab2 f282 	clz	r2, r2
 80011de:	d962      	bls.n	80012a6 <__udivmoddi4+0xde>
 80011e0:	b14a      	cbz	r2, 80011f6 <__udivmoddi4+0x2e>
 80011e2:	f1c2 0320 	rsb	r3, r2, #32
 80011e6:	4091      	lsls	r1, r2
 80011e8:	fa20 f303 	lsr.w	r3, r0, r3
 80011ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80011f0:	4319      	orrs	r1, r3
 80011f2:	fa00 fe02 	lsl.w	lr, r0, r2
 80011f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80011fa:	fbb1 f4f7 	udiv	r4, r1, r7
 80011fe:	fb07 1114 	mls	r1, r7, r4, r1
 8001202:	fa1f f68c 	uxth.w	r6, ip
 8001206:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800120a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800120e:	fb04 f106 	mul.w	r1, r4, r6
 8001212:	4299      	cmp	r1, r3
 8001214:	d90a      	bls.n	800122c <__udivmoddi4+0x64>
 8001216:	eb1c 0303 	adds.w	r3, ip, r3
 800121a:	f104 30ff 	add.w	r0, r4, #4294967295
 800121e:	f080 8110 	bcs.w	8001442 <__udivmoddi4+0x27a>
 8001222:	4299      	cmp	r1, r3
 8001224:	f240 810d 	bls.w	8001442 <__udivmoddi4+0x27a>
 8001228:	3c02      	subs	r4, #2
 800122a:	4463      	add	r3, ip
 800122c:	1a59      	subs	r1, r3, r1
 800122e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001232:	fb07 1110 	mls	r1, r7, r0, r1
 8001236:	fb00 f606 	mul.w	r6, r0, r6
 800123a:	fa1f f38e 	uxth.w	r3, lr
 800123e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001242:	429e      	cmp	r6, r3
 8001244:	d90a      	bls.n	800125c <__udivmoddi4+0x94>
 8001246:	eb1c 0303 	adds.w	r3, ip, r3
 800124a:	f100 31ff 	add.w	r1, r0, #4294967295
 800124e:	f080 80fa 	bcs.w	8001446 <__udivmoddi4+0x27e>
 8001252:	429e      	cmp	r6, r3
 8001254:	f240 80f7 	bls.w	8001446 <__udivmoddi4+0x27e>
 8001258:	4463      	add	r3, ip
 800125a:	3802      	subs	r0, #2
 800125c:	2100      	movs	r1, #0
 800125e:	1b9b      	subs	r3, r3, r6
 8001260:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8001264:	b11d      	cbz	r5, 800126e <__udivmoddi4+0xa6>
 8001266:	40d3      	lsrs	r3, r2
 8001268:	2200      	movs	r2, #0
 800126a:	e9c5 3200 	strd	r3, r2, [r5]
 800126e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001272:	428b      	cmp	r3, r1
 8001274:	d905      	bls.n	8001282 <__udivmoddi4+0xba>
 8001276:	b10d      	cbz	r5, 800127c <__udivmoddi4+0xb4>
 8001278:	e9c5 0100 	strd	r0, r1, [r5]
 800127c:	2100      	movs	r1, #0
 800127e:	4608      	mov	r0, r1
 8001280:	e7f5      	b.n	800126e <__udivmoddi4+0xa6>
 8001282:	fab3 f183 	clz	r1, r3
 8001286:	2900      	cmp	r1, #0
 8001288:	d146      	bne.n	8001318 <__udivmoddi4+0x150>
 800128a:	42a3      	cmp	r3, r4
 800128c:	d302      	bcc.n	8001294 <__udivmoddi4+0xcc>
 800128e:	4290      	cmp	r0, r2
 8001290:	f0c0 80ee 	bcc.w	8001470 <__udivmoddi4+0x2a8>
 8001294:	1a86      	subs	r6, r0, r2
 8001296:	eb64 0303 	sbc.w	r3, r4, r3
 800129a:	2001      	movs	r0, #1
 800129c:	2d00      	cmp	r5, #0
 800129e:	d0e6      	beq.n	800126e <__udivmoddi4+0xa6>
 80012a0:	e9c5 6300 	strd	r6, r3, [r5]
 80012a4:	e7e3      	b.n	800126e <__udivmoddi4+0xa6>
 80012a6:	2a00      	cmp	r2, #0
 80012a8:	f040 808f 	bne.w	80013ca <__udivmoddi4+0x202>
 80012ac:	eba1 040c 	sub.w	r4, r1, ip
 80012b0:	2101      	movs	r1, #1
 80012b2:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80012b6:	fa1f f78c 	uxth.w	r7, ip
 80012ba:	fbb4 f6f8 	udiv	r6, r4, r8
 80012be:	fb08 4416 	mls	r4, r8, r6, r4
 80012c2:	fb07 f006 	mul.w	r0, r7, r6
 80012c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80012ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012ce:	4298      	cmp	r0, r3
 80012d0:	d908      	bls.n	80012e4 <__udivmoddi4+0x11c>
 80012d2:	eb1c 0303 	adds.w	r3, ip, r3
 80012d6:	f106 34ff 	add.w	r4, r6, #4294967295
 80012da:	d202      	bcs.n	80012e2 <__udivmoddi4+0x11a>
 80012dc:	4298      	cmp	r0, r3
 80012de:	f200 80cb 	bhi.w	8001478 <__udivmoddi4+0x2b0>
 80012e2:	4626      	mov	r6, r4
 80012e4:	1a1c      	subs	r4, r3, r0
 80012e6:	fbb4 f0f8 	udiv	r0, r4, r8
 80012ea:	fb08 4410 	mls	r4, r8, r0, r4
 80012ee:	fb00 f707 	mul.w	r7, r0, r7
 80012f2:	fa1f f38e 	uxth.w	r3, lr
 80012f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80012fa:	429f      	cmp	r7, r3
 80012fc:	d908      	bls.n	8001310 <__udivmoddi4+0x148>
 80012fe:	eb1c 0303 	adds.w	r3, ip, r3
 8001302:	f100 34ff 	add.w	r4, r0, #4294967295
 8001306:	d202      	bcs.n	800130e <__udivmoddi4+0x146>
 8001308:	429f      	cmp	r7, r3
 800130a:	f200 80ae 	bhi.w	800146a <__udivmoddi4+0x2a2>
 800130e:	4620      	mov	r0, r4
 8001310:	1bdb      	subs	r3, r3, r7
 8001312:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001316:	e7a5      	b.n	8001264 <__udivmoddi4+0x9c>
 8001318:	f1c1 0720 	rsb	r7, r1, #32
 800131c:	408b      	lsls	r3, r1
 800131e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001322:	ea4c 0c03 	orr.w	ip, ip, r3
 8001326:	fa24 f607 	lsr.w	r6, r4, r7
 800132a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800132e:	fbb6 f8f9 	udiv	r8, r6, r9
 8001332:	fa1f fe8c 	uxth.w	lr, ip
 8001336:	fb09 6618 	mls	r6, r9, r8, r6
 800133a:	fa20 f307 	lsr.w	r3, r0, r7
 800133e:	408c      	lsls	r4, r1
 8001340:	fa00 fa01 	lsl.w	sl, r0, r1
 8001344:	fb08 f00e 	mul.w	r0, r8, lr
 8001348:	431c      	orrs	r4, r3
 800134a:	0c23      	lsrs	r3, r4, #16
 800134c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001350:	4298      	cmp	r0, r3
 8001352:	fa02 f201 	lsl.w	r2, r2, r1
 8001356:	d90a      	bls.n	800136e <__udivmoddi4+0x1a6>
 8001358:	eb1c 0303 	adds.w	r3, ip, r3
 800135c:	f108 36ff 	add.w	r6, r8, #4294967295
 8001360:	f080 8081 	bcs.w	8001466 <__udivmoddi4+0x29e>
 8001364:	4298      	cmp	r0, r3
 8001366:	d97e      	bls.n	8001466 <__udivmoddi4+0x29e>
 8001368:	f1a8 0802 	sub.w	r8, r8, #2
 800136c:	4463      	add	r3, ip
 800136e:	1a1e      	subs	r6, r3, r0
 8001370:	fbb6 f3f9 	udiv	r3, r6, r9
 8001374:	fb09 6613 	mls	r6, r9, r3, r6
 8001378:	fb03 fe0e 	mul.w	lr, r3, lr
 800137c:	b2a4      	uxth	r4, r4
 800137e:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8001382:	45a6      	cmp	lr, r4
 8001384:	d908      	bls.n	8001398 <__udivmoddi4+0x1d0>
 8001386:	eb1c 0404 	adds.w	r4, ip, r4
 800138a:	f103 30ff 	add.w	r0, r3, #4294967295
 800138e:	d266      	bcs.n	800145e <__udivmoddi4+0x296>
 8001390:	45a6      	cmp	lr, r4
 8001392:	d964      	bls.n	800145e <__udivmoddi4+0x296>
 8001394:	3b02      	subs	r3, #2
 8001396:	4464      	add	r4, ip
 8001398:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800139c:	fba0 8302 	umull	r8, r3, r0, r2
 80013a0:	eba4 040e 	sub.w	r4, r4, lr
 80013a4:	429c      	cmp	r4, r3
 80013a6:	46c6      	mov	lr, r8
 80013a8:	461e      	mov	r6, r3
 80013aa:	d350      	bcc.n	800144e <__udivmoddi4+0x286>
 80013ac:	d04d      	beq.n	800144a <__udivmoddi4+0x282>
 80013ae:	b155      	cbz	r5, 80013c6 <__udivmoddi4+0x1fe>
 80013b0:	ebba 030e 	subs.w	r3, sl, lr
 80013b4:	eb64 0406 	sbc.w	r4, r4, r6
 80013b8:	fa04 f707 	lsl.w	r7, r4, r7
 80013bc:	40cb      	lsrs	r3, r1
 80013be:	431f      	orrs	r7, r3
 80013c0:	40cc      	lsrs	r4, r1
 80013c2:	e9c5 7400 	strd	r7, r4, [r5]
 80013c6:	2100      	movs	r1, #0
 80013c8:	e751      	b.n	800126e <__udivmoddi4+0xa6>
 80013ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80013ce:	f1c2 0320 	rsb	r3, r2, #32
 80013d2:	40d9      	lsrs	r1, r3
 80013d4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80013d8:	fa20 f303 	lsr.w	r3, r0, r3
 80013dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80013e0:	fbb1 f0f8 	udiv	r0, r1, r8
 80013e4:	fb08 1110 	mls	r1, r8, r0, r1
 80013e8:	4094      	lsls	r4, r2
 80013ea:	431c      	orrs	r4, r3
 80013ec:	fa1f f78c 	uxth.w	r7, ip
 80013f0:	0c23      	lsrs	r3, r4, #16
 80013f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80013f6:	fb00 f107 	mul.w	r1, r0, r7
 80013fa:	4299      	cmp	r1, r3
 80013fc:	d908      	bls.n	8001410 <__udivmoddi4+0x248>
 80013fe:	eb1c 0303 	adds.w	r3, ip, r3
 8001402:	f100 36ff 	add.w	r6, r0, #4294967295
 8001406:	d22c      	bcs.n	8001462 <__udivmoddi4+0x29a>
 8001408:	4299      	cmp	r1, r3
 800140a:	d92a      	bls.n	8001462 <__udivmoddi4+0x29a>
 800140c:	3802      	subs	r0, #2
 800140e:	4463      	add	r3, ip
 8001410:	1a5b      	subs	r3, r3, r1
 8001412:	fbb3 f1f8 	udiv	r1, r3, r8
 8001416:	fb08 3311 	mls	r3, r8, r1, r3
 800141a:	b2a4      	uxth	r4, r4
 800141c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001420:	fb01 f307 	mul.w	r3, r1, r7
 8001424:	42a3      	cmp	r3, r4
 8001426:	d908      	bls.n	800143a <__udivmoddi4+0x272>
 8001428:	eb1c 0404 	adds.w	r4, ip, r4
 800142c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001430:	d213      	bcs.n	800145a <__udivmoddi4+0x292>
 8001432:	42a3      	cmp	r3, r4
 8001434:	d911      	bls.n	800145a <__udivmoddi4+0x292>
 8001436:	3902      	subs	r1, #2
 8001438:	4464      	add	r4, ip
 800143a:	1ae4      	subs	r4, r4, r3
 800143c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001440:	e73b      	b.n	80012ba <__udivmoddi4+0xf2>
 8001442:	4604      	mov	r4, r0
 8001444:	e6f2      	b.n	800122c <__udivmoddi4+0x64>
 8001446:	4608      	mov	r0, r1
 8001448:	e708      	b.n	800125c <__udivmoddi4+0x94>
 800144a:	45c2      	cmp	sl, r8
 800144c:	d2af      	bcs.n	80013ae <__udivmoddi4+0x1e6>
 800144e:	ebb8 0e02 	subs.w	lr, r8, r2
 8001452:	eb63 060c 	sbc.w	r6, r3, ip
 8001456:	3801      	subs	r0, #1
 8001458:	e7a9      	b.n	80013ae <__udivmoddi4+0x1e6>
 800145a:	4631      	mov	r1, r6
 800145c:	e7ed      	b.n	800143a <__udivmoddi4+0x272>
 800145e:	4603      	mov	r3, r0
 8001460:	e79a      	b.n	8001398 <__udivmoddi4+0x1d0>
 8001462:	4630      	mov	r0, r6
 8001464:	e7d4      	b.n	8001410 <__udivmoddi4+0x248>
 8001466:	46b0      	mov	r8, r6
 8001468:	e781      	b.n	800136e <__udivmoddi4+0x1a6>
 800146a:	4463      	add	r3, ip
 800146c:	3802      	subs	r0, #2
 800146e:	e74f      	b.n	8001310 <__udivmoddi4+0x148>
 8001470:	4606      	mov	r6, r0
 8001472:	4623      	mov	r3, r4
 8001474:	4608      	mov	r0, r1
 8001476:	e711      	b.n	800129c <__udivmoddi4+0xd4>
 8001478:	3e02      	subs	r6, #2
 800147a:	4463      	add	r3, ip
 800147c:	e732      	b.n	80012e4 <__udivmoddi4+0x11c>
 800147e:	bf00      	nop

08001480 <__aeabi_idiv0>:
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop

08001484 <move>:

float constant = 1.01;
float constant2 = 50000;


void move(int16_t mm) {	// Make n 90 degree turns (no acceleration)
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]


	resetPID();
 800148e:	f001 fc99 	bl	8002dc4 <resetPID>
	setPIDGoalD(mm * constant + (mm * mm / constant2));
 8001492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fc1e 	bl	8000cd8 <__aeabi_i2f>
 800149c:	4602      	mov	r2, r0
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <move+0x8c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4619      	mov	r1, r3
 80014a4:	4610      	mov	r0, r2
 80014a6:	f7ff fc6b 	bl	8000d80 <__aeabi_fmul>
 80014aa:	4603      	mov	r3, r0
 80014ac:	461c      	mov	r4, r3
 80014ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014b6:	fb02 f303 	mul.w	r3, r2, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fc0c 	bl	8000cd8 <__aeabi_i2f>
 80014c0:	4602      	mov	r2, r0
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <move+0x90>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	4610      	mov	r0, r2
 80014ca:	f7ff fd0d 	bl	8000ee8 <__aeabi_fdiv>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4619      	mov	r1, r3
 80014d2:	4620      	mov	r0, r4
 80014d4:	f7ff fb4c 	bl	8000b70 <__addsf3>
 80014d8:	4603      	mov	r3, r0
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe16 	bl	800110c <__aeabi_f2iz>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4618      	mov	r0, r3
 80014e6:	f001 f883 	bl	80025f0 <setPIDGoalD>
	setPIDGoalA(0);
 80014ea:	2000      	movs	r0, #0
 80014ec:	f001 f89c 	bl	8002628 <setPIDGoalA>

	setState(MOVING);
 80014f0:	2001      	movs	r0, #1
 80014f2:	f001 f8b5 	bl	8002660 <setState>

	while(!PIDdone())
 80014f6:	bf00      	nop
 80014f8:	f001 fc54 	bl	8002da4 <PIDdone>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d0fa      	beq.n	80014f8 <move+0x74>
	{

	}

	resetPID();
 8001502:	f001 fc5f 	bl	8002dc4 <resetPID>

}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
 800150e:	bf00      	nop
 8001510:	20000000 	.word	0x20000000
 8001514:	20000004 	.word	0x20000004

08001518 <turn>:


void turn(int16_t degrees) {	// Make n 90 degree turns (no acceleration)
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]


	resetPID();
 8001522:	f001 fc4f 	bl	8002dc4 <resetPID>

	setState(TURNING);
 8001526:	2002      	movs	r0, #2
 8001528:	f001 f89a 	bl	8002660 <setState>

	setPIDGoalD(0);
 800152c:	2000      	movs	r0, #0
 800152e:	f001 f85f 	bl	80025f0 <setPIDGoalD>
	setPIDGoalA(0.99 * degrees);
 8001532:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001536:	4618      	mov	r0, r3
 8001538:	f7fe ff98 	bl	800046c <__aeabi_i2d>
 800153c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001578 <turn+0x60>)
 800153e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001542:	f7fe fffd 	bl	8000540 <__aeabi_dmul>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	4610      	mov	r0, r2
 800154c:	4619      	mov	r1, r3
 800154e:	f7ff fa91 	bl	8000a74 <__aeabi_d2iz>
 8001552:	4603      	mov	r3, r0
 8001554:	b21b      	sxth	r3, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f001 f866 	bl	8002628 <setPIDGoalA>

	while(!PIDdone())
 800155c:	bf00      	nop
 800155e:	f001 fc21 	bl	8002da4 <PIDdone>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0fa      	beq.n	800155e <turn+0x46>
	{

	}

	resetPID();
 8001568:	f001 fc2c 	bl	8002dc4 <resetPID>

}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	f3af 8000 	nop.w
 8001578:	7ae147ae 	.word	0x7ae147ae
 800157c:	3fefae14 	.word	0x3fefae14

08001580 <frontCorrection>:


void frontCorrection() {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

	int16_t left_temp = TIM3->CNT;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <frontCorrection+0x40>)
 8001588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158a:	80fb      	strh	r3, [r7, #6]
	int16_t right_temp = TIM8->CNT;
 800158c:	4b0d      	ldr	r3, [pc, #52]	@ (80015c4 <frontCorrection+0x44>)
 800158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001590:	80bb      	strh	r3, [r7, #4]

	setState(FRONTING);
 8001592:	2003      	movs	r0, #3
 8001594:	f001 f864 	bl	8002660 <setState>

	while(!PIDdone())
 8001598:	bf00      	nop
 800159a:	f001 fc03 	bl	8002da4 <PIDdone>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0fa      	beq.n	800159a <frontCorrection+0x1a>
	{

	}

	TIM3->CNT = left_temp;
 80015a4:	4a06      	ldr	r2, [pc, #24]	@ (80015c0 <frontCorrection+0x40>)
 80015a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015aa:	6253      	str	r3, [r2, #36]	@ 0x24
	TIM8->CNT = right_temp;
 80015ac:	4a05      	ldr	r2, [pc, #20]	@ (80015c4 <frontCorrection+0x44>)
 80015ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80015b2:	6253      	str	r3, [r2, #36]	@ 0x24

	resetPID();
 80015b4:	f001 fc06 	bl	8002dc4 <resetPID>



}
 80015b8:	bf00      	nop
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40000400 	.word	0x40000400
 80015c4:	40010400 	.word	0x40010400

080015c8 <delayMicroseconds>:
#include "main.h"
#include "delay.h"

// Delays for us microseconds
void delayMicroseconds(uint16_t us)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]

    TIM10->CNT = 0;
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <delayMicroseconds+0x40>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	625a      	str	r2, [r3, #36]	@ 0x24
    uint16_t start = (uint16_t) TIM10->CNT;
 80015d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001608 <delayMicroseconds+0x40>)
 80015da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015dc:	81fb      	strh	r3, [r7, #14]

    uint32_t duration = us * 60;	// Our MCU runs at 60 MHz, so each microsecond lasts 60 clock ticks
 80015de:	88fa      	ldrh	r2, [r7, #6]
 80015e0:	4613      	mov	r3, r2
 80015e2:	011b      	lsls	r3, r3, #4
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	60bb      	str	r3, [r7, #8]
    while (TIM10->CNT - start < duration);
 80015ea:	bf00      	nop
 80015ec:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <delayMicroseconds+0x40>)
 80015ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015f0:	89fb      	ldrh	r3, [r7, #14]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	68ba      	ldr	r2, [r7, #8]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d8f8      	bhi.n	80015ec <delayMicroseconds+0x24>

}
 80015fa:	bf00      	nop
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40014400 	.word	0x40014400

0800160c <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <getRightEncoderCounts+0x18>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	b29b      	uxth	r3, r3
 8001616:	425b      	negs	r3, r3
 8001618:	b29b      	uxth	r3, r3
 800161a:	b21b      	sxth	r3, r3
}
 800161c:	4618      	mov	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	40000400 	.word	0x40000400

08001628 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 800162c:	4b04      	ldr	r3, [pc, #16]	@ (8001640 <getLeftEncoderCounts+0x18>)
 800162e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001630:	b29b      	uxth	r3, r3
 8001632:	425b      	negs	r3, r3
 8001634:	b29b      	uxth	r3, r3
 8001636:	b21b      	sxth	r3, r3
}
 8001638:	4618      	mov	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr
 8001640:	40010400 	.word	0x40010400

08001644 <resetEncoders>:

void resetEncoders() {
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 8001648:	4b04      	ldr	r3, [pc, #16]	@ (800165c <resetEncoders+0x18>)
 800164a:	2200      	movs	r2, #0
 800164c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM8->CNT = (int16_t) 0;
 800164e:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <resetEncoders+0x1c>)
 8001650:	2200      	movs	r2, #0
 8001652:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr
 800165c:	40000400 	.word	0x40000400
 8001660:	40010400 	.word	0x40010400
 8001664:	00000000 	.word	0x00000000

08001668 <gyroInit>:
int gyro_initialized = 0;
float Gx_offset = 0;
float Gy_offset = 0;
float Gz_offset = 0;

uint8_t gyroInit(void) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b0ee      	sub	sp, #440	@ 0x1b8
 800166c:	af04      	add	r7, sp, #16
    if (gyro_initialized) return 1;
 800166e:	4b90      	ldr	r3, [pc, #576]	@ (80018b0 <gyroInit+0x248>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <gyroInit+0x12>
 8001676:	2301      	movs	r3, #1
 8001678:	e10c      	b.n	8001894 <gyroInit+0x22c>

    I2C_HandleTypeDef *hi2c1_ptr = Get_I2C1_Ptr();
 800167a:	f000 fe71 	bl	8002360 <Get_I2C1_Ptr>
 800167e:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

    HAL_StatusTypeDef ret;
    uint8_t temp;

    // establishing connection with the device
    ret = HAL_I2C_IsDeviceReady(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, 1, 1000);
 8001682:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001686:	2201      	movs	r2, #1
 8001688:	21d0      	movs	r1, #208	@ 0xd0
 800168a:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 800168e:	f004 fc11 	bl	8005eb4 <HAL_I2C_IsDeviceReady>
 8001692:	4603      	mov	r3, r0
 8001694:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 8001698:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 800169c:	2b00      	cmp	r3, #0
 800169e:	d002      	beq.n	80016a6 <gyroInit+0x3e>
 80016a0:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80016a4:	e0f6      	b.n	8001894 <gyroInit+0x22c>

    // configuring power management
    temp = 0b00001000;
 80016a6:	2308      	movs	r3, #8
 80016a8:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_USER_CTRL, 1, &temp, 1, 100);
 80016ac:	2364      	movs	r3, #100	@ 0x64
 80016ae:	9302      	str	r3, [sp, #8]
 80016b0:	2301      	movs	r3, #1
 80016b2:	9301      	str	r3, [sp, #4]
 80016b4:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	2301      	movs	r3, #1
 80016bc:	226b      	movs	r2, #107	@ 0x6b
 80016be:	21d0      	movs	r1, #208	@ 0xd0
 80016c0:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80016c4:	f004 f8ca 	bl	800585c <HAL_I2C_Mem_Write>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 80016ce:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d002      	beq.n	80016dc <gyroInit+0x74>
 80016d6:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80016da:	e0db      	b.n	8001894 <gyroInit+0x22c>

    // configuring gyroscope
    temp = FS_GYRO_500;
 80016dc:	2308      	movs	r3, #8
 80016de:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &temp, 1, 100);
 80016e2:	2364      	movs	r3, #100	@ 0x64
 80016e4:	9302      	str	r3, [sp, #8]
 80016e6:	2301      	movs	r3, #1
 80016e8:	9301      	str	r3, [sp, #4]
 80016ea:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	2301      	movs	r3, #1
 80016f2:	221b      	movs	r2, #27
 80016f4:	21d0      	movs	r1, #208	@ 0xd0
 80016f6:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80016fa:	f004 f8af 	bl	800585c <HAL_I2C_Mem_Write>
 80016fe:	4603      	mov	r3, r0
 8001700:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 8001704:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001708:	2b00      	cmp	r3, #0
 800170a:	d002      	beq.n	8001712 <gyroInit+0xaa>
 800170c:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001710:	e0c0      	b.n	8001894 <gyroInit+0x22c>

    // configuring accelerometer
    temp = FS_ACC_2G;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &temp, 1, 100);
 8001718:	2364      	movs	r3, #100	@ 0x64
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	2301      	movs	r3, #1
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2301      	movs	r3, #1
 8001728:	221c      	movs	r2, #28
 800172a:	21d0      	movs	r1, #208	@ 0xd0
 800172c:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8001730:	f004 f894 	bl	800585c <HAL_I2C_Mem_Write>
 8001734:	4603      	mov	r3, r0
 8001736:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 800173a:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <gyroInit+0xe0>
 8001742:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001746:	e0a5      	b.n	8001894 <gyroInit+0x22c>

    gyro_initialized = 1;
 8001748:	4b59      	ldr	r3, [pc, #356]	@ (80018b0 <gyroInit+0x248>)
 800174a:	2201      	movs	r2, #1
 800174c:	601a      	str	r2, [r3, #0]

    // calculating offsets
//    float Gx_readings[10] = { 0.0 };
//    float Gy_readings[10] = { 0.0 };
    float Gz_readings[100] = { 0.0 };
 800174e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001752:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001756:	4618      	mov	r0, r3
 8001758:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800175c:	461a      	mov	r2, r3
 800175e:	2100      	movs	r1, #0
 8001760:	f006 fe22 	bl	80083a8 <memset>
//    float Gx_sum = 0.0;
//    float Gy_sum = 0.0;
    float Gz_sum = 0.0;
 8001764:	f04f 0300 	mov.w	r3, #0
 8001768:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    while(1) {
    	Gz_offset = 0;
 800176c:	4b51      	ldr	r3, [pc, #324]	@ (80018b4 <gyroInit+0x24c>)
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
    	Gz_sum = 0;
 8001774:	f04f 0300 	mov.w	r3, #0
 8001778:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    	for (int i = 0; i < 100; ++i) {
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001782:	e020      	b.n	80017c6 <gyroInit+0x15e>
			readGyro(&Gz_readings[i]);
 8001784:	1d3a      	adds	r2, r7, #4
 8001786:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f000 f896 	bl	80018c0 <readGyro>
	//        Gx_sum += Gx_readings[i];
	//        Gy_sum += Gy_readings[i];
			Gz_sum += Gz_readings[i];
 8001794:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001798:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800179c:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 80017aa:	f7ff f9e1 	bl	8000b70 <__addsf3>
 80017ae:	4603      	mov	r3, r0
 80017b0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
			delayMicroseconds(10000);
 80017b4:	f242 7010 	movw	r0, #10000	@ 0x2710
 80017b8:	f7ff ff06 	bl	80015c8 <delayMicroseconds>
    	for (int i = 0; i < 100; ++i) {
 80017bc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80017c0:	3301      	adds	r3, #1
 80017c2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80017c6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80017ca:	2b63      	cmp	r3, #99	@ 0x63
 80017cc:	ddda      	ble.n	8001784 <gyroInit+0x11c>
		}

	//    Gx_offset = Gx_sum / 10.0;
	//    Gy_offset = Gy_sum / 10.0;
		Gz_offset = Gz_sum / 100.0;
 80017ce:	493a      	ldr	r1, [pc, #232]	@ (80018b8 <gyroInit+0x250>)
 80017d0:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 80017d4:	f7ff fb88 	bl	8000ee8 <__aeabi_fdiv>
 80017d8:	4603      	mov	r3, r0
 80017da:	461a      	mov	r2, r3
 80017dc:	4b35      	ldr	r3, [pc, #212]	@ (80018b4 <gyroInit+0x24c>)
 80017de:	601a      	str	r2, [r3, #0]

		Gz_sum = 0;
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
		for (int i = 0; i < 100; ++i) {
 80017e8:	2300      	movs	r3, #0
 80017ea:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80017ee:	e020      	b.n	8001832 <gyroInit+0x1ca>
			readGyro(&Gz_readings[i]);
 80017f0:	1d3a      	adds	r2, r7, #4
 80017f2:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f860 	bl	80018c0 <readGyro>
			Gz_sum += Gz_readings[i];
 8001800:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001804:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001808:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800180c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001810:	4619      	mov	r1, r3
 8001812:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8001816:	f7ff f9ab 	bl	8000b70 <__addsf3>
 800181a:	4603      	mov	r3, r0
 800181c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
			delayMicroseconds(10000);
 8001820:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001824:	f7ff fed0 	bl	80015c8 <delayMicroseconds>
		for (int i = 0; i < 100; ++i) {
 8001828:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800182c:	3301      	adds	r3, #1
 800182e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001832:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001836:	2b63      	cmp	r3, #99	@ 0x63
 8001838:	ddda      	ble.n	80017f0 <gyroInit+0x188>
		}
		if (Gz_sum / 100.0 < 0.1 && Gz_sum / 100.0 > -0.1) {
 800183a:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 800183e:	f7fe fe27 	bl	8000490 <__aeabi_f2d>
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	4b1d      	ldr	r3, [pc, #116]	@ (80018bc <gyroInit+0x254>)
 8001848:	f7fe ffa4 	bl	8000794 <__aeabi_ddiv>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4610      	mov	r0, r2
 8001852:	4619      	mov	r1, r3
 8001854:	a312      	add	r3, pc, #72	@ (adr r3, 80018a0 <gyroInit+0x238>)
 8001856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185a:	f7ff f8e3 	bl	8000a24 <__aeabi_dcmplt>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d014      	beq.n	800188e <gyroInit+0x226>
 8001864:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8001868:	f7fe fe12 	bl	8000490 <__aeabi_f2d>
 800186c:	f04f 0200 	mov.w	r2, #0
 8001870:	4b12      	ldr	r3, [pc, #72]	@ (80018bc <gyroInit+0x254>)
 8001872:	f7fe ff8f 	bl	8000794 <__aeabi_ddiv>
 8001876:	4602      	mov	r2, r0
 8001878:	460b      	mov	r3, r1
 800187a:	4610      	mov	r0, r2
 800187c:	4619      	mov	r1, r3
 800187e:	a30a      	add	r3, pc, #40	@ (adr r3, 80018a8 <gyroInit+0x240>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7ff f8ec 	bl	8000a60 <__aeabi_dcmpgt>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d100      	bne.n	8001890 <gyroInit+0x228>
    	Gz_offset = 0;
 800188e:	e76d      	b.n	800176c <gyroInit+0x104>
			break;
 8001890:	bf00      	nop
		}
    }



    return 1;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	9999999a 	.word	0x9999999a
 80018a4:	3fb99999 	.word	0x3fb99999
 80018a8:	9999999a 	.word	0x9999999a
 80018ac:	bfb99999 	.word	0xbfb99999
 80018b0:	200000a8 	.word	0x200000a8
 80018b4:	200000ac 	.word	0x200000ac
 80018b8:	42c80000 	.word	0x42c80000
 80018bc:	40590000 	.word	0x40590000

080018c0 <readGyro>:

void readGyro(/*float* Gx , float* Gy, */float* Gz) {
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af04      	add	r7, sp, #16
 80018c6:	6078      	str	r0, [r7, #4]
    if (!gyro_initialized) {
 80018c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001934 <readGyro+0x74>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d02d      	beq.n	800192c <readGyro+0x6c>
        return;
    }

    I2C_HandleTypeDef *hi2c1_ptr = Get_I2C1_Ptr();
 80018d0:	f000 fd46 	bl	8002360 <Get_I2C1_Ptr>
 80018d4:	60f8      	str	r0, [r7, #12]

//    uint8_t data[6];
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_GYRO_DATA, 1, data, 2, 100);
 80018d6:	2364      	movs	r3, #100	@ 0x64
 80018d8:	9302      	str	r3, [sp, #8]
 80018da:	2302      	movs	r3, #2
 80018dc:	9301      	str	r3, [sp, #4]
 80018de:	f107 0308 	add.w	r3, r7, #8
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	2301      	movs	r3, #1
 80018e6:	2247      	movs	r2, #71	@ 0x47
 80018e8:	21d0      	movs	r1, #208	@ 0xd0
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f004 f8b0 	bl	8005a50 <HAL_I2C_Mem_Read>

//    int16_t Gyro_X_RAW = ((int16_t)(data[0] << 8)) | data [1];
//    int16_t Gyro_Y_RAW = ((int16_t)(data[2] << 8)) | data [3];
//    int16_t Gyro_Z_RAW = ((int16_t)(data[4] << 8)) | data [5];
    int16_t Gyro_Z_RAW = ((int16_t)(data[0] << 8)) | data [1];
 80018f0:	7a3b      	ldrb	r3, [r7, #8]
 80018f2:	021b      	lsls	r3, r3, #8
 80018f4:	b21a      	sxth	r2, r3
 80018f6:	7a7b      	ldrb	r3, [r7, #9]
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	4313      	orrs	r3, r2
 80018fc:	817b      	strh	r3, [r7, #10]
         for more details check GYRO_CONFIG Register              ****/

//    *Gx = Gyro_X_RAW/131.0 - Gx_offset;
//    *Gy = Gyro_Y_RAW/131.0 - Gy_offset;
//    *Gz = Gyro_Z_RAW/65.5f - Gz_offset;
    *Gz = Gyro_Z_RAW/65.8f - Gz_offset;
 80018fe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff f9e8 	bl	8000cd8 <__aeabi_i2f>
 8001908:	4603      	mov	r3, r0
 800190a:	490b      	ldr	r1, [pc, #44]	@ (8001938 <readGyro+0x78>)
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff faeb 	bl	8000ee8 <__aeabi_fdiv>
 8001912:	4603      	mov	r3, r0
 8001914:	461a      	mov	r2, r3
 8001916:	4b09      	ldr	r3, [pc, #36]	@ (800193c <readGyro+0x7c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4619      	mov	r1, r3
 800191c:	4610      	mov	r0, r2
 800191e:	f7ff f925 	bl	8000b6c <__aeabi_fsub>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	601a      	str	r2, [r3, #0]

    return;
 800192a:	e000      	b.n	800192e <readGyro+0x6e>
        return;
 800192c:	bf00      	nop
}
 800192e:	3710      	adds	r7, #16
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	200000a8 	.word	0x200000a8
 8001938:	4283999a 	.word	0x4283999a
 800193c:	200000ac 	.word	0x200000ac

08001940 <interruptRoutine>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void interruptRoutine() {
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
//	delayMicroseconds(100);

	temp_tick++;
 8001944:	4b0c      	ldr	r3, [pc, #48]	@ (8001978 <interruptRoutine+0x38>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a0b      	ldr	r2, [pc, #44]	@ (8001978 <interruptRoutine+0x38>)
 800194c:	6013      	str	r3, [r2, #0]
	left_counts = getLeftEncoderCounts();
 800194e:	f7ff fe6b 	bl	8001628 <getLeftEncoderCounts>
 8001952:	4603      	mov	r3, r0
 8001954:	461a      	mov	r2, r3
 8001956:	4b09      	ldr	r3, [pc, #36]	@ (800197c <interruptRoutine+0x3c>)
 8001958:	801a      	strh	r2, [r3, #0]
	right_counts = getRightEncoderCounts();
 800195a:	f7ff fe57 	bl	800160c <getRightEncoderCounts>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	4b07      	ldr	r3, [pc, #28]	@ (8001980 <interruptRoutine+0x40>)
 8001964:	801a      	strh	r2, [r3, #0]

	if (gyro_inited) {
 8001966:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <interruptRoutine+0x44>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <interruptRoutine+0x32>
		updatePID();
 800196e:	f001 f903 	bl	8002b78 <updatePID>
	}
}
 8001972:	bf00      	nop
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	20001334 	.word	0x20001334
 800197c:	2000031a 	.word	0x2000031a
 8001980:	2000031c 	.word	0x2000031c
 8001984:	20001330 	.word	0x20001330

08001988 <solve>:

void solve(Algorithm alg) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	4603      	mov	r3, r0
 8001990:	71fb      	strb	r3, [r7, #7]
	Action nextMove = solver(alg);
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f001 fdb1 	bl	80034fc <solver>
 800199a:	4603      	mov	r3, r0
 800199c:	73fb      	strb	r3, [r7, #15]
	switch(nextMove) {
 800199e:	7bfb      	ldrb	r3, [r7, #15]
 80019a0:	2b03      	cmp	r3, #3
 80019a2:	d844      	bhi.n	8001a2e <solve+0xa6>
 80019a4:	a201      	add	r2, pc, #4	@ (adr r2, 80019ac <solve+0x24>)
 80019a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019aa:	bf00      	nop
 80019ac:	08001a1d 	.word	0x08001a1d
 80019b0:	080019bd 	.word	0x080019bd
 80019b4:	08001a27 	.word	0x08001a27
 80019b8:	08001a2f 	.word	0x08001a2f
		case FORWARD:
//			move(0);
//			move(1);
			if (alg == FLOODFILL)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d128      	bne.n	8001a14 <solve+0x8c>
			{
//				TODO
				int extra_moves = foresight(); // Already has curr position and heading
 80019c2:	f001 ff1d 	bl	8003800 <foresight>
 80019c6:	6178      	str	r0, [r7, #20]
				if (extra_moves > max_forward) {
 80019c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a74 <solve+0xec>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	4293      	cmp	r3, r2
 80019d2:	dd02      	ble.n	80019da <solve+0x52>
					extra_moves = max_forward;
 80019d4:	4b27      	ldr	r3, [pc, #156]	@ (8001a74 <solve+0xec>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	617b      	str	r3, [r7, #20]
				}
				for (int i = 0; i < extra_moves; i++)
 80019da:	2300      	movs	r3, #0
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	e005      	b.n	80019ec <solve+0x64>
				{
					solver(FLOODFILL);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f001 fd8b 	bl	80034fc <solver>
				for (int i = 0; i < extra_moves; i++)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	3301      	adds	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	dbf5      	blt.n	80019e0 <solve+0x58>
				}
				move(180 + 180 * extra_moves);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	461a      	mov	r2, r3
 80019fc:	0052      	lsls	r2, r2, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	0112      	lsls	r2, r2, #4
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	b21b      	sxth	r3, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fd39 	bl	8001484 <move>
			}
			else
				move(180);
			break;
 8001a12:	e00c      	b.n	8001a2e <solve+0xa6>
				move(180);
 8001a14:	20b4      	movs	r0, #180	@ 0xb4
 8001a16:	f7ff fd35 	bl	8001484 <move>
			break;
 8001a1a:	e008      	b.n	8001a2e <solve+0xa6>
		case LEFT:
//			displayFace(goodright);
//			move(0);
			turn(-90);
 8001a1c:	f06f 0059 	mvn.w	r0, #89	@ 0x59
 8001a20:	f7ff fd7a 	bl	8001518 <turn>
			break;
 8001a24:	e003      	b.n	8001a2e <solve+0xa6>
		case RIGHT:
//			displayFace(goodleft);
//			move(0);
			turn(90);
 8001a26:	205a      	movs	r0, #90	@ 0x5a
 8001a28:	f7ff fd76 	bl	8001518 <turn>
			break;
 8001a2c:	bf00      	nop
		case IDLE:
			break;
	}
	if (ir_front_left > 1200 && ir_front_right > 1200) {
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <solve+0xf0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4912      	ldr	r1, [pc, #72]	@ (8001a7c <solve+0xf4>)
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7ff fb5f 	bl	80010f8 <__aeabi_fcmpgt>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d100      	bne.n	8001a42 <solve+0xba>
		delayMicroseconds(10000);
		frontCorrection();
		delayMicroseconds(10000);
	}
}
 8001a40:	e013      	b.n	8001a6a <solve+0xe2>
	if (ir_front_left > 1200 && ir_front_right > 1200) {
 8001a42:	4b0f      	ldr	r3, [pc, #60]	@ (8001a80 <solve+0xf8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	490d      	ldr	r1, [pc, #52]	@ (8001a7c <solve+0xf4>)
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fb55 	bl	80010f8 <__aeabi_fcmpgt>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d100      	bne.n	8001a56 <solve+0xce>
}
 8001a54:	e009      	b.n	8001a6a <solve+0xe2>
		delayMicroseconds(10000);
 8001a56:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001a5a:	f7ff fdb5 	bl	80015c8 <delayMicroseconds>
		frontCorrection();
 8001a5e:	f7ff fd8f 	bl	8001580 <frontCorrection>
		delayMicroseconds(10000);
 8001a62:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001a66:	f7ff fdaf 	bl	80015c8 <delayMicroseconds>
}
 8001a6a:	bf00      	nop
 8001a6c:	3718      	adds	r7, #24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000008 	.word	0x20000008
 8001a78:	20000324 	.word	0x20000324
 8001a7c:	44960000 	.word	0x44960000
 8001a80:	20000328 	.word	0x20000328

08001a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a88:	f002 fb12 	bl	80040b0 <HAL_Init>
  /* USER CODE BEGIN Init */
//  Delay_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a8c:	f000 f8ec 	bl	8001c68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a90:	f000 fbaa 	bl	80021e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a94:	f000 fb88 	bl	80021a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001a98:	f000 f92e 	bl	8001cf8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001a9c:	f000 f9d6 	bl	8001e4c <MX_TIM1_Init>
  MX_TIM3_Init();
 8001aa0:	f000 fa7c 	bl	8001f9c <MX_TIM3_Init>
  MX_TIM8_Init();
 8001aa4:	f000 fb04 	bl	80020b0 <MX_TIM8_Init>
  MX_TIM7_Init();
 8001aa8:	f000 facc 	bl	8002044 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001aac:	f000 f9a0 	bl	8001df0 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001ab0:	f000 fb56 	bl	8002160 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Encoder Timers
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001ab4:	213c      	movs	r1, #60	@ 0x3c
 8001ab6:	4856      	ldr	r0, [pc, #344]	@ (8001c10 <main+0x18c>)
 8001ab8:	f005 fdf2 	bl	80076a0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001abc:	213c      	movs	r1, #60	@ 0x3c
 8001abe:	4855      	ldr	r0, [pc, #340]	@ (8001c14 <main+0x190>)
 8001ac0:	f005 fdee 	bl	80076a0 <HAL_TIM_Encoder_Start>

  // Motor Timers
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4854      	ldr	r0, [pc, #336]	@ (8001c18 <main+0x194>)
 8001ac8:	f005 fc7c 	bl	80073c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001acc:	2104      	movs	r1, #4
 8001ace:	4852      	ldr	r0, [pc, #328]	@ (8001c18 <main+0x194>)
 8001ad0:	f005 fc78 	bl	80073c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	4850      	ldr	r0, [pc, #320]	@ (8001c18 <main+0x194>)
 8001ad8:	f005 fc74 	bl	80073c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001adc:	210c      	movs	r1, #12
 8001ade:	484e      	ldr	r0, [pc, #312]	@ (8001c18 <main+0x194>)
 8001ae0:	f005 fc70 	bl	80073c4 <HAL_TIM_PWM_Start>

  // Delay us timer (MUST START BEFORE INTERRUPT TIMER)
  HAL_TIM_Base_Start(&htim10);
 8001ae4:	484d      	ldr	r0, [pc, #308]	@ (8001c1c <main+0x198>)
 8001ae6:	f005 fb49 	bl	800717c <HAL_TIM_Base_Start>

  // Interrupt Timer
  HAL_TIM_Base_Start_IT(&htim7);
 8001aea:	484d      	ldr	r0, [pc, #308]	@ (8001c20 <main+0x19c>)
 8001aec:	f005 fbac 	bl	8007248 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, IR_SAMPLES * 4);
 8001af0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af4:	494b      	ldr	r1, [pc, #300]	@ (8001c24 <main+0x1a0>)
 8001af6:	484c      	ldr	r0, [pc, #304]	@ (8001c28 <main+0x1a4>)
 8001af8:	f002 fb8c 	bl	8004214 <HAL_ADC_Start_DMA>

  HAL_GPIO_WritePin(ForwardLeftEmitter_GPIO_Port, ForwardLeftEmitter_Pin, GPIO_PIN_SET);
 8001afc:	2201      	movs	r2, #1
 8001afe:	2180      	movs	r1, #128	@ 0x80
 8001b00:	484a      	ldr	r0, [pc, #296]	@ (8001c2c <main+0x1a8>)
 8001b02:	f003 fd4e 	bl	80055a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LeftEmitter_GPIO_Port, LeftEmitter_Pin, GPIO_PIN_SET);
 8001b06:	2201      	movs	r2, #1
 8001b08:	2110      	movs	r1, #16
 8001b0a:	4848      	ldr	r0, [pc, #288]	@ (8001c2c <main+0x1a8>)
 8001b0c:	f003 fd49 	bl	80055a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RightEmitter_GPIO_Port, RightEmitter_Pin, GPIO_PIN_SET);
 8001b10:	2201      	movs	r2, #1
 8001b12:	2104      	movs	r1, #4
 8001b14:	4845      	ldr	r0, [pc, #276]	@ (8001c2c <main+0x1a8>)
 8001b16:	f003 fd44 	bl	80055a2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b20:	4843      	ldr	r0, [pc, #268]	@ (8001c30 <main+0x1ac>)
 8001b22:	f003 fd3e 	bl	80055a2 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	S1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Switch1_Pin);
 8001b26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b2a:	4841      	ldr	r0, [pc, #260]	@ (8001c30 <main+0x1ac>)
 8001b2c:	f003 fd22 	bl	8005574 <HAL_GPIO_ReadPin>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	4b3f      	ldr	r3, [pc, #252]	@ (8001c34 <main+0x1b0>)
 8001b36:	701a      	strb	r2, [r3, #0]
	S2 = HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin);
 8001b38:	2104      	movs	r1, #4
 8001b3a:	483f      	ldr	r0, [pc, #252]	@ (8001c38 <main+0x1b4>)
 8001b3c:	f003 fd1a 	bl	8005574 <HAL_GPIO_ReadPin>
 8001b40:	4603      	mov	r3, r0
 8001b42:	461a      	mov	r2, r3
 8001b44:	4b3d      	ldr	r3, [pc, #244]	@ (8001c3c <main+0x1b8>)
 8001b46:	701a      	strb	r2, [r3, #0]
	S3 = HAL_GPIO_ReadPin(Switch3_GPIO_Port, Switch3_Pin);
 8001b48:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b4c:	4837      	ldr	r0, [pc, #220]	@ (8001c2c <main+0x1a8>)
 8001b4e:	f003 fd11 	bl	8005574 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b3a      	ldr	r3, [pc, #232]	@ (8001c40 <main+0x1bc>)
 8001b58:	701a      	strb	r2, [r3, #0]
	S4 = HAL_GPIO_ReadPin(Switch4_GPIO_Port, Switch4_Pin);
 8001b5a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001b5e:	4834      	ldr	r0, [pc, #208]	@ (8001c30 <main+0x1ac>)
 8001b60:	f003 fd08 	bl	8005574 <HAL_GPIO_ReadPin>
 8001b64:	4603      	mov	r3, r0
 8001b66:	461a      	mov	r2, r3
 8001b68:	4b36      	ldr	r3, [pc, #216]	@ (8001c44 <main+0x1c0>)
 8001b6a:	701a      	strb	r2, [r3, #0]
	B1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8001b6c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b70:	482f      	ldr	r0, [pc, #188]	@ (8001c30 <main+0x1ac>)
 8001b72:	f003 fcff 	bl	8005574 <HAL_GPIO_ReadPin>
 8001b76:	4603      	mov	r3, r0
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4b33      	ldr	r3, [pc, #204]	@ (8001c48 <main+0x1c4>)
 8001b7c:	701a      	strb	r2, [r3, #0]
	B2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8001b7e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b82:	482b      	ldr	r0, [pc, #172]	@ (8001c30 <main+0x1ac>)
 8001b84:	f003 fcf6 	bl	8005574 <HAL_GPIO_ReadPin>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c4c <main+0x1c8>)
 8001b8e:	701a      	strb	r2, [r3, #0]


	if (B1 == GPIO_PIN_SET) {
 8001b90:	4b2d      	ldr	r3, [pc, #180]	@ (8001c48 <main+0x1c4>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d128      	bne.n	8001bea <main+0x166>
		gyroInit();
 8001b98:	f7ff fd66 	bl	8001668 <gyroInit>
		gyro_inited = 1;
 8001b9c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c50 <main+0x1cc>)
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	701a      	strb	r2, [r3, #0]
		setIRGoals(ir_front_left, ir_front_right, ir_left, ir_right);
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <main+0x1d0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fab0 	bl	800110c <__aeabi_f2iz>
 8001bac:	4603      	mov	r3, r0
 8001bae:	b21c      	sxth	r4, r3
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <main+0x1d4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff faa9 	bl	800110c <__aeabi_f2iz>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b21d      	sxth	r5, r3
 8001bbe:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <main+0x1d8>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff faa2 	bl	800110c <__aeabi_f2iz>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b21e      	sxth	r6, r3
 8001bcc:	4b24      	ldr	r3, [pc, #144]	@ (8001c60 <main+0x1dc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fa9b 	bl	800110c <__aeabi_f2iz>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	4632      	mov	r2, r6
 8001bdc:	4629      	mov	r1, r5
 8001bde:	4620      	mov	r0, r4
 8001be0:	f000 fd4e 	bl	8002680 <setIRGoals>
		setState(START);
 8001be4:	2004      	movs	r0, #4
 8001be6:	f000 fd3b 	bl	8002660 <setState>
	}

	if (B2 == GPIO_PIN_SET) {
 8001bea:	4b18      	ldr	r3, [pc, #96]	@ (8001c4c <main+0x1c8>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d105      	bne.n	8001bfe <main+0x17a>
		start = 1;
 8001bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001c64 <main+0x1e0>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]

//		frontCorrection();
		move(90 - 34.5);
 8001bf8:	2037      	movs	r0, #55	@ 0x37
 8001bfa:	f7ff fc43 	bl	8001484 <move>
//		turn(-90);
//		turn(-90);
//		move(test_dist);
	}

	if (start) {
 8001bfe:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <main+0x1e0>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d08f      	beq.n	8001b26 <main+0xa2>
		solve(FLOODFILL);
 8001c06:	2001      	movs	r0, #1
 8001c08:	f7ff febe 	bl	8001988 <solve>
	S1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Switch1_Pin);
 8001c0c:	e78b      	b.n	8001b26 <main+0xa2>
 8001c0e:	bf00      	nop
 8001c10:	200001f4 	.word	0x200001f4
 8001c14:	20000284 	.word	0x20000284
 8001c18:	200001ac 	.word	0x200001ac
 8001c1c:	200002cc 	.word	0x200002cc
 8001c20:	2000023c 	.word	0x2000023c
 8001c24:	20000330 	.word	0x20000330
 8001c28:	200000b0 	.word	0x200000b0
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020400 	.word	0x40020400
 8001c34:	20000314 	.word	0x20000314
 8001c38:	40020c00 	.word	0x40020c00
 8001c3c:	20000315 	.word	0x20000315
 8001c40:	20000316 	.word	0x20000316
 8001c44:	20000317 	.word	0x20000317
 8001c48:	20000318 	.word	0x20000318
 8001c4c:	20000319 	.word	0x20000319
 8001c50:	20001330 	.word	0x20001330
 8001c54:	20000324 	.word	0x20000324
 8001c58:	20000328 	.word	0x20000328
 8001c5c:	20000320 	.word	0x20000320
 8001c60:	2000032c 	.word	0x2000032c
 8001c64:	20001331 	.word	0x20001331

08001c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b092      	sub	sp, #72	@ 0x48
 8001c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c6e:	f107 0318 	add.w	r3, r7, #24
 8001c72:	2230      	movs	r2, #48	@ 0x30
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f006 fb96 	bl	80083a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c7c:	1d3b      	adds	r3, r7, #4
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c92:	2310      	movs	r3, #16
 8001c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c96:	2302      	movs	r3, #2
 8001c98:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001c9e:	230d      	movs	r3, #13
 8001ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8001ca2:	23c3      	movs	r3, #195	@ 0xc3
 8001ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001caa:	2304      	movs	r3, #4
 8001cac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cae:	f107 0318 	add.w	r3, r7, #24
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f004 fde0 	bl	8006878 <HAL_RCC_OscConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8001cbe:	f000 fbdb 	bl	8002478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc2:	230f      	movs	r3, #15
 8001cc4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cd8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	2103      	movs	r1, #3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f005 f81e 	bl	8006d20 <HAL_RCC_ClockConfig>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <SystemClock_Config+0x86>
  {
    Error_Handler();
 8001cea:	f000 fbc5 	bl	8002478 <Error_Handler>
  }
}
 8001cee:	bf00      	nop
 8001cf0:	3748      	adds	r7, #72	@ 0x48
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d0a:	4b36      	ldr	r3, [pc, #216]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d0c:	4a36      	ldr	r2, [pc, #216]	@ (8001de8 <MX_ADC1_Init+0xf0>)
 8001d0e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001d10:	4b34      	ldr	r3, [pc, #208]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d12:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d16:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001d18:	4b32      	ldr	r3, [pc, #200]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d1e:	4b31      	ldr	r3, [pc, #196]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d24:	4b2f      	ldr	r3, [pc, #188]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d32:	4b2c      	ldr	r3, [pc, #176]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d38:	4b2a      	ldr	r3, [pc, #168]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8001dec <MX_ADC1_Init+0xf4>)
 8001d3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d3e:	4b29      	ldr	r3, [pc, #164]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001d44:	4b27      	ldr	r3, [pc, #156]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d46:	2204      	movs	r2, #4
 8001d48:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d52:	4b24      	ldr	r3, [pc, #144]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d58:	4822      	ldr	r0, [pc, #136]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d5a:	f002 fa17 	bl	800418c <HAL_ADC_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001d64:	f000 fb88 	bl	8002478 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001d68:	2305      	movs	r3, #5
 8001d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d74:	463b      	mov	r3, r7
 8001d76:	4619      	mov	r1, r3
 8001d78:	481a      	ldr	r0, [pc, #104]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d7a:	f002 fb3b 	bl	80043f4 <HAL_ADC_ConfigChannel>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001d84:	f000 fb78 	bl	8002478 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001d88:	2306      	movs	r3, #6
 8001d8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d90:	463b      	mov	r3, r7
 8001d92:	4619      	mov	r1, r3
 8001d94:	4813      	ldr	r0, [pc, #76]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001d96:	f002 fb2d 	bl	80043f4 <HAL_ADC_ConfigChannel>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001da0:	f000 fb6a 	bl	8002478 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001da4:	230a      	movs	r3, #10
 8001da6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001da8:	2303      	movs	r3, #3
 8001daa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dac:	463b      	mov	r3, r7
 8001dae:	4619      	mov	r1, r3
 8001db0:	480c      	ldr	r0, [pc, #48]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001db2:	f002 fb1f 	bl	80043f4 <HAL_ADC_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001dbc:	f000 fb5c 	bl	8002478 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001dc0:	230b      	movs	r3, #11
 8001dc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc8:	463b      	mov	r3, r7
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4805      	ldr	r0, [pc, #20]	@ (8001de4 <MX_ADC1_Init+0xec>)
 8001dce:	f002 fb11 	bl	80043f4 <HAL_ADC_ConfigChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001dd8:	f000 fb4e 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200000b0 	.word	0x200000b0
 8001de8:	40012000 	.word	0x40012000
 8001dec:	0f000001 	.word	0x0f000001

08001df0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001df4:	4b12      	ldr	r3, [pc, #72]	@ (8001e40 <MX_I2C1_Init+0x50>)
 8001df6:	4a13      	ldr	r2, [pc, #76]	@ (8001e44 <MX_I2C1_Init+0x54>)
 8001df8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001dfa:	4b11      	ldr	r3, [pc, #68]	@ (8001e40 <MX_I2C1_Init+0x50>)
 8001dfc:	4a12      	ldr	r2, [pc, #72]	@ (8001e48 <MX_I2C1_Init+0x58>)
 8001dfe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e00:	4b0f      	ldr	r3, [pc, #60]	@ (8001e40 <MX_I2C1_Init+0x50>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e06:	4b0e      	ldr	r3, [pc, #56]	@ (8001e40 <MX_I2C1_Init+0x50>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e40 <MX_I2C1_Init+0x50>)
 8001e0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	@ (8001e40 <MX_I2C1_Init+0x50>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <MX_I2C1_Init+0x50>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e20:	4b07      	ldr	r3, [pc, #28]	@ (8001e40 <MX_I2C1_Init+0x50>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <MX_I2C1_Init+0x50>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <MX_I2C1_Init+0x50>)
 8001e2e:	f003 fbd1 	bl	80055d4 <HAL_I2C_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e38:	f000 fb1e 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000158 	.word	0x20000158
 8001e44:	40005400 	.word	0x40005400
 8001e48:	00061a80 	.word	0x00061a80

08001e4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b092      	sub	sp, #72	@ 0x48
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
 8001e6c:	615a      	str	r2, [r3, #20]
 8001e6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	2220      	movs	r2, #32
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f006 fa96 	bl	80083a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e7c:	4b45      	ldr	r3, [pc, #276]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001e7e:	4a46      	ldr	r2, [pc, #280]	@ (8001f98 <MX_TIM1_Init+0x14c>)
 8001e80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e82:	4b44      	ldr	r3, [pc, #272]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e88:	4b42      	ldr	r3, [pc, #264]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 8001e8e:	4b41      	ldr	r3, [pc, #260]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001e90:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001e94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e96:	4b3f      	ldr	r3, [pc, #252]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e9c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea2:	4b3c      	ldr	r3, [pc, #240]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ea8:	483a      	ldr	r0, [pc, #232]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001eaa:	f005 fa3b 	bl	8007324 <HAL_TIM_PWM_Init>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001eb4:	f000 fae0 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ec0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4833      	ldr	r0, [pc, #204]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001ec8:	f006 f8d2 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001ed2:	f000 fad1 	bl	8002478 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ed6:	2360      	movs	r3, #96	@ 0x60
 8001ed8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eea:	2300      	movs	r3, #0
 8001eec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4826      	ldr	r0, [pc, #152]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001efc:	f005 fd4e 	bl	800799c <HAL_TIM_PWM_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001f06:	f000 fab7 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f0e:	2204      	movs	r2, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4820      	ldr	r0, [pc, #128]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001f14:	f005 fd42 	bl	800799c <HAL_TIM_PWM_ConfigChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001f1e:	f000 faab 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f26:	2208      	movs	r2, #8
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481a      	ldr	r0, [pc, #104]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001f2c:	f005 fd36 	bl	800799c <HAL_TIM_PWM_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001f36:	f000 fa9f 	bl	8002478 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f3e:	220c      	movs	r2, #12
 8001f40:	4619      	mov	r1, r3
 8001f42:	4814      	ldr	r0, [pc, #80]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001f44:	f005 fd2a 	bl	800799c <HAL_TIM_PWM_ConfigChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001f4e:	f000 fa93 	bl	8002478 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	4619      	mov	r1, r3
 8001f74:	4807      	ldr	r0, [pc, #28]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001f76:	f006 f8f5 	bl	8008164 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001f80:	f000 fa7a 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f84:	4803      	ldr	r0, [pc, #12]	@ (8001f94 <MX_TIM1_Init+0x148>)
 8001f86:	f001 ff19 	bl	8003dbc <HAL_TIM_MspPostInit>

}
 8001f8a:	bf00      	nop
 8001f8c:	3748      	adds	r7, #72	@ 0x48
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	200001ac 	.word	0x200001ac
 8001f98:	40010000 	.word	0x40010000

08001f9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08c      	sub	sp, #48	@ 0x30
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fa2:	f107 030c 	add.w	r3, r7, #12
 8001fa6:	2224      	movs	r2, #36	@ 0x24
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f006 f9fc 	bl	80083a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fb8:	4b20      	ldr	r3, [pc, #128]	@ (800203c <MX_TIM3_Init+0xa0>)
 8001fba:	4a21      	ldr	r2, [pc, #132]	@ (8002040 <MX_TIM3_Init+0xa4>)
 8001fbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800203c <MX_TIM3_Init+0xa0>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <MX_TIM3_Init+0xa0>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001fca:	4b1c      	ldr	r3, [pc, #112]	@ (800203c <MX_TIM3_Init+0xa0>)
 8001fcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001fd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	@ (800203c <MX_TIM3_Init+0xa0>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fd8:	4b18      	ldr	r3, [pc, #96]	@ (800203c <MX_TIM3_Init+0xa0>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fea:	2300      	movs	r3, #0
 8001fec:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002002:	f107 030c 	add.w	r3, r7, #12
 8002006:	4619      	mov	r1, r3
 8002008:	480c      	ldr	r0, [pc, #48]	@ (800203c <MX_TIM3_Init+0xa0>)
 800200a:	f005 faa3 	bl	8007554 <HAL_TIM_Encoder_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002014:	f000 fa30 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002018:	2300      	movs	r3, #0
 800201a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201c:	2300      	movs	r3, #0
 800201e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	4619      	mov	r1, r3
 8002024:	4805      	ldr	r0, [pc, #20]	@ (800203c <MX_TIM3_Init+0xa0>)
 8002026:	f006 f823 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002030:	f000 fa22 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002034:	bf00      	nop
 8002036:	3730      	adds	r7, #48	@ 0x30
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	200001f4 	.word	0x200001f4
 8002040:	40000400 	.word	0x40000400

08002044 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800204a:	463b      	mov	r3, r7
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <MX_TIM7_Init+0x64>)
 8002054:	4a15      	ldr	r2, [pc, #84]	@ (80020ac <MX_TIM7_Init+0x68>)
 8002056:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 59;
 8002058:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <MX_TIM7_Init+0x64>)
 800205a:	223b      	movs	r2, #59	@ 0x3b
 800205c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800205e:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <MX_TIM7_Init+0x64>)
 8002060:	2200      	movs	r2, #0
 8002062:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 499;
 8002064:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <MX_TIM7_Init+0x64>)
 8002066:	f240 12f3 	movw	r2, #499	@ 0x1f3
 800206a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206c:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <MX_TIM7_Init+0x64>)
 800206e:	2200      	movs	r2, #0
 8002070:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002072:	480d      	ldr	r0, [pc, #52]	@ (80020a8 <MX_TIM7_Init+0x64>)
 8002074:	f005 f832 	bl	80070dc <HAL_TIM_Base_Init>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800207e:	f000 f9fb 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002082:	2300      	movs	r3, #0
 8002084:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800208a:	463b      	mov	r3, r7
 800208c:	4619      	mov	r1, r3
 800208e:	4806      	ldr	r0, [pc, #24]	@ (80020a8 <MX_TIM7_Init+0x64>)
 8002090:	f005 ffee 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800209a:	f000 f9ed 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000023c 	.word	0x2000023c
 80020ac:	40001400 	.word	0x40001400

080020b0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08c      	sub	sp, #48	@ 0x30
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	2224      	movs	r2, #36	@ 0x24
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f006 f972 	bl	80083a8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80020cc:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <MX_TIM8_Init+0xa8>)
 80020ce:	4a23      	ldr	r2, [pc, #140]	@ (800215c <MX_TIM8_Init+0xac>)
 80020d0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80020d2:	4b21      	ldr	r3, [pc, #132]	@ (8002158 <MX_TIM8_Init+0xa8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002158 <MX_TIM8_Init+0xa8>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80020de:	4b1e      	ldr	r3, [pc, #120]	@ (8002158 <MX_TIM8_Init+0xa8>)
 80020e0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020e4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <MX_TIM8_Init+0xa8>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002158 <MX_TIM8_Init+0xa8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f2:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <MX_TIM8_Init+0xa8>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020f8:	2303      	movs	r3, #3
 80020fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002100:	2301      	movs	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002104:	2300      	movs	r3, #0
 8002106:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002110:	2301      	movs	r3, #1
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002114:	2300      	movs	r3, #0
 8002116:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800211c:	f107 030c 	add.w	r3, r7, #12
 8002120:	4619      	mov	r1, r3
 8002122:	480d      	ldr	r0, [pc, #52]	@ (8002158 <MX_TIM8_Init+0xa8>)
 8002124:	f005 fa16 	bl	8007554 <HAL_TIM_Encoder_Init>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800212e:	f000 f9a3 	bl	8002478 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	4619      	mov	r1, r3
 800213e:	4806      	ldr	r0, [pc, #24]	@ (8002158 <MX_TIM8_Init+0xa8>)
 8002140:	f005 ff96 	bl	8008070 <HAL_TIMEx_MasterConfigSynchronization>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800214a:	f000 f995 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	3730      	adds	r7, #48	@ 0x30
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	20000284 	.word	0x20000284
 800215c:	40010400 	.word	0x40010400

08002160 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002164:	4b0e      	ldr	r3, [pc, #56]	@ (80021a0 <MX_TIM10_Init+0x40>)
 8002166:	4a0f      	ldr	r2, [pc, #60]	@ (80021a4 <MX_TIM10_Init+0x44>)
 8002168:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800216a:	4b0d      	ldr	r3, [pc, #52]	@ (80021a0 <MX_TIM10_Init+0x40>)
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <MX_TIM10_Init+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8002176:	4b0a      	ldr	r3, [pc, #40]	@ (80021a0 <MX_TIM10_Init+0x40>)
 8002178:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800217c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800217e:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <MX_TIM10_Init+0x40>)
 8002180:	2200      	movs	r2, #0
 8002182:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002184:	4b06      	ldr	r3, [pc, #24]	@ (80021a0 <MX_TIM10_Init+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	@ (80021a0 <MX_TIM10_Init+0x40>)
 800218c:	f004 ffa6 	bl	80070dc <HAL_TIM_Base_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002196:	f000 f96f 	bl	8002478 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200002cc 	.word	0x200002cc
 80021a4:	40014400 	.word	0x40014400

080021a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	607b      	str	r3, [r7, #4]
 80021b2:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <MX_DMA_Init+0x3c>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b6:	4a0b      	ldr	r2, [pc, #44]	@ (80021e4 <MX_DMA_Init+0x3c>)
 80021b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <MX_DMA_Init+0x3c>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c6:	607b      	str	r3, [r7, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	2038      	movs	r0, #56	@ 0x38
 80021d0:	f002 fc8f 	bl	8004af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021d4:	2038      	movs	r0, #56	@ 0x38
 80021d6:	f002 fca8 	bl	8004b2a <HAL_NVIC_EnableIRQ>

}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b08a      	sub	sp, #40	@ 0x28
 80021ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
 80021fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	613b      	str	r3, [r7, #16]
 8002202:	4b52      	ldr	r3, [pc, #328]	@ (800234c <MX_GPIO_Init+0x164>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a51      	ldr	r2, [pc, #324]	@ (800234c <MX_GPIO_Init+0x164>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	4b4f      	ldr	r3, [pc, #316]	@ (800234c <MX_GPIO_Init+0x164>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	613b      	str	r3, [r7, #16]
 8002218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	4b4b      	ldr	r3, [pc, #300]	@ (800234c <MX_GPIO_Init+0x164>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	4a4a      	ldr	r2, [pc, #296]	@ (800234c <MX_GPIO_Init+0x164>)
 8002224:	f043 0301 	orr.w	r3, r3, #1
 8002228:	6313      	str	r3, [r2, #48]	@ 0x30
 800222a:	4b48      	ldr	r3, [pc, #288]	@ (800234c <MX_GPIO_Init+0x164>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	4b44      	ldr	r3, [pc, #272]	@ (800234c <MX_GPIO_Init+0x164>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	4a43      	ldr	r2, [pc, #268]	@ (800234c <MX_GPIO_Init+0x164>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	6313      	str	r3, [r2, #48]	@ 0x30
 8002246:	4b41      	ldr	r3, [pc, #260]	@ (800234c <MX_GPIO_Init+0x164>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60bb      	str	r3, [r7, #8]
 8002250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	607b      	str	r3, [r7, #4]
 8002256:	4b3d      	ldr	r3, [pc, #244]	@ (800234c <MX_GPIO_Init+0x164>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a3c      	ldr	r2, [pc, #240]	@ (800234c <MX_GPIO_Init+0x164>)
 800225c:	f043 0308 	orr.w	r3, r3, #8
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b3a      	ldr	r3, [pc, #232]	@ (800234c <MX_GPIO_Init+0x164>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0308 	and.w	r3, r3, #8
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	2194      	movs	r1, #148	@ 0x94
 8002272:	4837      	ldr	r0, [pc, #220]	@ (8002350 <MX_GPIO_Init+0x168>)
 8002274:	f003 f995 	bl	80055a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800227e:	4835      	ldr	r0, [pc, #212]	@ (8002354 <MX_GPIO_Init+0x16c>)
 8002280:	f003 f98f 	bl	80055a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 8002284:	2394      	movs	r3, #148	@ 0x94
 8002286:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002288:	2301      	movs	r3, #1
 800228a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002290:	2300      	movs	r3, #0
 8002292:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	482d      	ldr	r0, [pc, #180]	@ (8002350 <MX_GPIO_Init+0x168>)
 800229c:	f002 ffcc 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 80022a0:	2308      	movs	r3, #8
 80022a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022b0:	2301      	movs	r3, #1
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4619      	mov	r1, r3
 80022ba:	4825      	ldr	r0, [pc, #148]	@ (8002350 <MX_GPIO_Init+0x168>)
 80022bc:	f002 ffbc 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button1_Pin Switch4_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin|Switch4_Pin;
 80022c0:	f44f 4341 	mov.w	r3, #49408	@ 0xc100
 80022c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 0314 	add.w	r3, r7, #20
 80022d2:	4619      	mov	r1, r3
 80022d4:	481f      	ldr	r0, [pc, #124]	@ (8002354 <MX_GPIO_Init+0x16c>)
 80022d6:	f002 ffaf 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch3_Pin */
  GPIO_InitStruct.Pin = Switch3_Pin;
 80022da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch3_GPIO_Port, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	4818      	ldr	r0, [pc, #96]	@ (8002350 <MX_GPIO_Init+0x168>)
 80022f0:	f002 ffa2 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch1_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin;
 80022f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch1_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4813      	ldr	r0, [pc, #76]	@ (8002358 <MX_GPIO_Init+0x170>)
 800230a:	f002 ff95 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 800230e:	2304      	movs	r3, #4
 8002310:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	480e      	ldr	r0, [pc, #56]	@ (800235c <MX_GPIO_Init+0x174>)
 8002322:	f002 ff89 	bl	8005238 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8002326:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800232a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232c:	2301      	movs	r3, #1
 800232e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4805      	ldr	r0, [pc, #20]	@ (8002354 <MX_GPIO_Init+0x16c>)
 8002340:	f002 ff7a 	bl	8005238 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002344:	bf00      	nop
 8002346:	3728      	adds	r7, #40	@ 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40023800 	.word	0x40023800
 8002350:	40020000 	.word	0x40020000
 8002354:	40020400 	.word	0x40020400
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00

08002360 <Get_I2C1_Ptr>:
{
	return &hadc1;
}

I2C_HandleTypeDef* Get_I2C1_Ptr(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
	return &hi2c1;
 8002364:	4b02      	ldr	r3, [pc, #8]	@ (8002370 <Get_I2C1_Ptr+0x10>)
}
 8002366:	4618      	mov	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	20000158 	.word	0x20000158

08002374 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

	temp_left = 0;
 800237c:	4b34      	ldr	r3, [pc, #208]	@ (8002450 <HAL_ADC_ConvCpltCallback+0xdc>)
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
	temp_front_left = 0;
 8002382:	4b34      	ldr	r3, [pc, #208]	@ (8002454 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
	temp_front_right = 0;
 8002388:	4b33      	ldr	r3, [pc, #204]	@ (8002458 <HAL_ADC_ConvCpltCallback+0xe4>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]
	temp_ir_right = 0;
 800238e:	4b33      	ldr	r3, [pc, #204]	@ (800245c <HAL_ADC_ConvCpltCallback+0xe8>)
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

    for (int i = 0; i < IR_SAMPLES * 4; i = i + 4) {
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	e029      	b.n	80023ee <HAL_ADC_ConvCpltCallback+0x7a>
    	temp_left += adc_buf[i];
 800239a:	4a31      	ldr	r2, [pc, #196]	@ (8002460 <HAL_ADC_ConvCpltCallback+0xec>)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002450 <HAL_ADC_ConvCpltCallback+0xdc>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	4a29      	ldr	r2, [pc, #164]	@ (8002450 <HAL_ADC_ConvCpltCallback+0xdc>)
 80023aa:	6013      	str	r3, [r2, #0]
    	temp_front_left += adc_buf[i+1];
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3301      	adds	r3, #1
 80023b0:	4a2b      	ldr	r2, [pc, #172]	@ (8002460 <HAL_ADC_ConvCpltCallback+0xec>)
 80023b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023b6:	4b27      	ldr	r3, [pc, #156]	@ (8002454 <HAL_ADC_ConvCpltCallback+0xe0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	4a25      	ldr	r2, [pc, #148]	@ (8002454 <HAL_ADC_ConvCpltCallback+0xe0>)
 80023be:	6013      	str	r3, [r2, #0]
    	temp_front_right += adc_buf[i+2];
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3302      	adds	r3, #2
 80023c4:	4a26      	ldr	r2, [pc, #152]	@ (8002460 <HAL_ADC_ConvCpltCallback+0xec>)
 80023c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023ca:	4b23      	ldr	r3, [pc, #140]	@ (8002458 <HAL_ADC_ConvCpltCallback+0xe4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4413      	add	r3, r2
 80023d0:	4a21      	ldr	r2, [pc, #132]	@ (8002458 <HAL_ADC_ConvCpltCallback+0xe4>)
 80023d2:	6013      	str	r3, [r2, #0]
    	temp_ir_right += adc_buf[i+3];
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	3303      	adds	r3, #3
 80023d8:	4a21      	ldr	r2, [pc, #132]	@ (8002460 <HAL_ADC_ConvCpltCallback+0xec>)
 80023da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023de:	4b1f      	ldr	r3, [pc, #124]	@ (800245c <HAL_ADC_ConvCpltCallback+0xe8>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4413      	add	r3, r2
 80023e4:	4a1d      	ldr	r2, [pc, #116]	@ (800245c <HAL_ADC_ConvCpltCallback+0xe8>)
 80023e6:	6013      	str	r3, [r2, #0]
    for (int i = 0; i < IR_SAMPLES * 4; i = i + 4) {
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3304      	adds	r3, #4
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023f4:	dbd1      	blt.n	800239a <HAL_ADC_ConvCpltCallback+0x26>
    }

    ir_left = temp_left / IR_SAMPLES;
 80023f6:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <HAL_ADC_ConvCpltCallback+0xdc>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0a1b      	lsrs	r3, r3, #8
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe fc67 	bl	8000cd0 <__aeabi_ui2f>
 8002402:	4603      	mov	r3, r0
 8002404:	4a17      	ldr	r2, [pc, #92]	@ (8002464 <HAL_ADC_ConvCpltCallback+0xf0>)
 8002406:	6013      	str	r3, [r2, #0]
    ir_front_left = temp_front_left / IR_SAMPLES;
 8002408:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_ADC_ConvCpltCallback+0xe0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fc5e 	bl	8000cd0 <__aeabi_ui2f>
 8002414:	4603      	mov	r3, r0
 8002416:	4a14      	ldr	r2, [pc, #80]	@ (8002468 <HAL_ADC_ConvCpltCallback+0xf4>)
 8002418:	6013      	str	r3, [r2, #0]
    ir_front_right = temp_front_right / IR_SAMPLES;
 800241a:	4b0f      	ldr	r3, [pc, #60]	@ (8002458 <HAL_ADC_ConvCpltCallback+0xe4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fc55 	bl	8000cd0 <__aeabi_ui2f>
 8002426:	4603      	mov	r3, r0
 8002428:	4a10      	ldr	r2, [pc, #64]	@ (800246c <HAL_ADC_ConvCpltCallback+0xf8>)
 800242a:	6013      	str	r3, [r2, #0]
    ir_right = temp_ir_right / IR_SAMPLES;
 800242c:	4b0b      	ldr	r3, [pc, #44]	@ (800245c <HAL_ADC_ConvCpltCallback+0xe8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fc4c 	bl	8000cd0 <__aeabi_ui2f>
 8002438:	4603      	mov	r3, r0
 800243a:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <HAL_ADC_ConvCpltCallback+0xfc>)
 800243c:	6013      	str	r3, [r2, #0]

    temp_adc++;
 800243e:	4b0d      	ldr	r3, [pc, #52]	@ (8002474 <HAL_ADC_ConvCpltCallback+0x100>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	3301      	adds	r3, #1
 8002444:	4a0b      	ldr	r2, [pc, #44]	@ (8002474 <HAL_ADC_ConvCpltCallback+0x100>)
 8002446:	6013      	str	r3, [r2, #0]

}
 8002448:	bf00      	nop
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	2000133c 	.word	0x2000133c
 8002454:	20001340 	.word	0x20001340
 8002458:	20001344 	.word	0x20001344
 800245c:	20001348 	.word	0x20001348
 8002460:	20000330 	.word	0x20000330
 8002464:	20000320 	.word	0x20000320
 8002468:	20000324 	.word	0x20000324
 800246c:	20000328 	.word	0x20000328
 8002470:	2000032c 	.word	0x2000032c
 8002474:	20001338 	.word	0x20001338

08002478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800247c:	b672      	cpsid	i
}
 800247e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002480:	bf00      	nop
 8002482:	e7fd      	b.n	8002480 <Error_Handler+0x8>
 8002484:	0000      	movs	r0, r0
	...

08002488 <limitPWM>:
//#include "pid.h"
//
//extern float velocity_left;
//extern float velocity_right;

float limitPWM(float pwm) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f7fd fffd 	bl	8000490 <__aeabi_f2d>
 8002496:	a30e      	add	r3, pc, #56	@ (adr r3, 80024d0 <limitPWM+0x48>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	f7fe fae0 	bl	8000a60 <__aeabi_dcmpgt>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <limitPWM+0x22>
		return PWM_MAX;
 80024a6:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <limitPWM+0x58>)
 80024a8:	e00d      	b.n	80024c6 <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fd fff0 	bl	8000490 <__aeabi_f2d>
 80024b0:	a309      	add	r3, pc, #36	@ (adr r3, 80024d8 <limitPWM+0x50>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f7fe fab5 	bl	8000a24 <__aeabi_dcmplt>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <limitPWM+0x3c>
		return -PWM_MAX;
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <limitPWM+0x5c>)
 80024c2:	e000      	b.n	80024c6 <limitPWM+0x3e>
	else
		return pwm;
 80024c4:	687b      	ldr	r3, [r7, #4]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	66666666 	.word	0x66666666
 80024d4:	3fee6666 	.word	0x3fee6666
 80024d8:	66666666 	.word	0x66666666
 80024dc:	bfee6666 	.word	0xbfee6666
 80024e0:	3f733333 	.word	0x3f733333
 80024e4:	bf733333 	.word	0xbf733333

080024e8 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7fe fdf5 	bl	80010e4 <__aeabi_fcmpge>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d012      	beq.n	8002526 <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8002500:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <setMotorLPWM+0x70>)
 8002502:	2200      	movs	r2, #0
 8002504:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffbe 	bl	8002488 <limitPWM>
 800250c:	4603      	mov	r3, r0
 800250e:	4913      	ldr	r1, [pc, #76]	@ (800255c <setMotorLPWM+0x74>)
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fc35 	bl	8000d80 <__aeabi_fmul>
 8002516:	4603      	mov	r3, r0
 8002518:	4c0f      	ldr	r4, [pc, #60]	@ (8002558 <setMotorLPWM+0x70>)
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe fe1c 	bl	8001158 <__aeabi_f2uiz>
 8002520:	4603      	mov	r3, r0
 8002522:	63a3      	str	r3, [r4, #56]	@ 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 8002524:	e013      	b.n	800254e <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 8002526:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <setMotorLPWM+0x70>)
 8002528:	2200      	movs	r2, #0
 800252a:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff ffab 	bl	8002488 <limitPWM>
 8002532:	4603      	mov	r3, r0
 8002534:	4909      	ldr	r1, [pc, #36]	@ (800255c <setMotorLPWM+0x74>)
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fc22 	bl	8000d80 <__aeabi_fmul>
 800253c:	4603      	mov	r3, r0
 800253e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002542:	4c05      	ldr	r4, [pc, #20]	@ (8002558 <setMotorLPWM+0x70>)
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fe07 	bl	8001158 <__aeabi_f2uiz>
 800254a:	4603      	mov	r3, r0
 800254c:	6363      	str	r3, [r4, #52]	@ 0x34
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bd90      	pop	{r4, r7, pc}
 8002556:	bf00      	nop
 8002558:	40010000 	.word	0x40010000
 800255c:	4547f000 	.word	0x4547f000

08002560 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7fe fdb9 	bl	80010e4 <__aeabi_fcmpge>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d012      	beq.n	800259e <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 8002578:	4b15      	ldr	r3, [pc, #84]	@ (80025d0 <setMotorRPWM+0x70>)
 800257a:	2200      	movs	r2, #0
 800257c:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff82 	bl	8002488 <limitPWM>
 8002584:	4603      	mov	r3, r0
 8002586:	4913      	ldr	r1, [pc, #76]	@ (80025d4 <setMotorRPWM+0x74>)
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fbf9 	bl	8000d80 <__aeabi_fmul>
 800258e:	4603      	mov	r3, r0
 8002590:	4c0f      	ldr	r4, [pc, #60]	@ (80025d0 <setMotorRPWM+0x70>)
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fde0 	bl	8001158 <__aeabi_f2uiz>
 8002598:	4603      	mov	r3, r0
 800259a:	63e3      	str	r3, [r4, #60]	@ 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 800259c:	e013      	b.n	80025c6 <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 800259e:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <setMotorRPWM+0x70>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff6f 	bl	8002488 <limitPWM>
 80025aa:	4603      	mov	r3, r0
 80025ac:	4909      	ldr	r1, [pc, #36]	@ (80025d4 <setMotorRPWM+0x74>)
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fbe6 	bl	8000d80 <__aeabi_fmul>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80025ba:	4c05      	ldr	r4, [pc, #20]	@ (80025d0 <setMotorRPWM+0x70>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fe fdcb 	bl	8001158 <__aeabi_f2uiz>
 80025c2:	4603      	mov	r3, r0
 80025c4:	6423      	str	r3, [r4, #64]	@ 0x40
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd90      	pop	{r4, r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40010000 	.word	0x40010000
 80025d4:	4547f000 	.word	0x4547f000

080025d8 <resetMotors>:

void resetMotors() {
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 80025dc:	f04f 0000 	mov.w	r0, #0
 80025e0:	f7ff ff82 	bl	80024e8 <setMotorLPWM>
	setMotorRPWM(0);
 80025e4:	f04f 0000 	mov.w	r0, #0
 80025e8:	f7ff ffba 	bl	8002560 <setMotorRPWM>
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <setPIDGoalD>:
int goal_reached_timer = 0;

float gyro_angle = 0;
float gyro_vel = 0;

void setPIDGoalD(int16_t distance) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	4603      	mov	r3, r0
 80025f8:	80fb      	strh	r3, [r7, #6]
	goal_distance += distance;
 80025fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fb6a 	bl	8000cd8 <__aeabi_i2f>
 8002604:	4602      	mov	r2, r0
 8002606:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <setPIDGoalD+0x34>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4619      	mov	r1, r3
 800260c:	4610      	mov	r0, r2
 800260e:	f7fe faaf 	bl	8000b70 <__addsf3>
 8002612:	4603      	mov	r3, r0
 8002614:	461a      	mov	r2, r3
 8002616:	4b03      	ldr	r3, [pc, #12]	@ (8002624 <setPIDGoalD+0x34>)
 8002618:	601a      	str	r2, [r3, #0]
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000134c 	.word	0x2000134c

08002628 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
	goal_angle += angle;
 8002632:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fb4e 	bl	8000cd8 <__aeabi_i2f>
 800263c:	4602      	mov	r2, r0
 800263e:	4b07      	ldr	r3, [pc, #28]	@ (800265c <setPIDGoalA+0x34>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f7fe fa93 	bl	8000b70 <__addsf3>
 800264a:	4603      	mov	r3, r0
 800264c:	461a      	mov	r2, r3
 800264e:	4b03      	ldr	r3, [pc, #12]	@ (800265c <setPIDGoalA+0x34>)
 8002650:	601a      	str	r2, [r3, #0]
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20001350 	.word	0x20001350

08002660 <setState>:

void setState(STATE curr_state) {
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	71fb      	strb	r3, [r7, #7]
	state = curr_state;
 800266a:	4a04      	ldr	r2, [pc, #16]	@ (800267c <setState+0x1c>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	7013      	strb	r3, [r2, #0]
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	200013d4 	.word	0x200013d4

08002680 <setIRGoals>:

void setIRGoals(int16_t front_left_goal, int16_t front_right_goal, int16_t left_goal, int16_t right_goal) {
 8002680:	b490      	push	{r4, r7}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	4604      	mov	r4, r0
 8002688:	4608      	mov	r0, r1
 800268a:	4611      	mov	r1, r2
 800268c:	461a      	mov	r2, r3
 800268e:	4623      	mov	r3, r4
 8002690:	80fb      	strh	r3, [r7, #6]
 8002692:	4603      	mov	r3, r0
 8002694:	80bb      	strh	r3, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	807b      	strh	r3, [r7, #2]
 800269a:	4613      	mov	r3, r2
 800269c:	803b      	strh	r3, [r7, #0]

	IRAngleOffset = left_goal - right_goal;
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	883b      	ldrh	r3, [r7, #0]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	b21a      	sxth	r2, r3
 80026a8:	4b09      	ldr	r3, [pc, #36]	@ (80026d0 <setIRGoals+0x50>)
 80026aa:	801a      	strh	r2, [r3, #0]
	goal_front_left = front_left_goal;
 80026ac:	4a09      	ldr	r2, [pc, #36]	@ (80026d4 <setIRGoals+0x54>)
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	8013      	strh	r3, [r2, #0]
	goal_front_right = front_right_goal;
 80026b2:	4a09      	ldr	r2, [pc, #36]	@ (80026d8 <setIRGoals+0x58>)
 80026b4:	88bb      	ldrh	r3, [r7, #4]
 80026b6:	8013      	strh	r3, [r2, #0]
	goal_left = left_goal;
 80026b8:	4a08      	ldr	r2, [pc, #32]	@ (80026dc <setIRGoals+0x5c>)
 80026ba:	887b      	ldrh	r3, [r7, #2]
 80026bc:	8013      	strh	r3, [r2, #0]
	goal_right = right_goal;
 80026be:	4a08      	ldr	r2, [pc, #32]	@ (80026e0 <setIRGoals+0x60>)
 80026c0:	883b      	ldrh	r3, [r7, #0]
 80026c2:	8013      	strh	r3, [r2, #0]

}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc90      	pop	{r4, r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	200013c4 	.word	0x200013c4
 80026d4:	200013c6 	.word	0x200013c6
 80026d8:	200013c8 	.word	0x200013c8
 80026dc:	200013ca 	.word	0x200013ca
 80026e0:	200013cc 	.word	0x200013cc

080026e4 <setIRAngle>:

// TODO: CHANGE TO USE WALL CHECK FUNCTIONS
void setIRAngle(float left, float right){
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
 80026ec:	6039      	str	r1, [r7, #0]

	if (left > 600 && right > 600 && state == MOVING)
 80026ee:	493f      	ldr	r1, [pc, #252]	@ (80027ec <setIRAngle+0x108>)
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7fe fd01 	bl	80010f8 <__aeabi_fcmpgt>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d028      	beq.n	800274e <setIRAngle+0x6a>
 80026fc:	493b      	ldr	r1, [pc, #236]	@ (80027ec <setIRAngle+0x108>)
 80026fe:	6838      	ldr	r0, [r7, #0]
 8002700:	f7fe fcfa 	bl	80010f8 <__aeabi_fcmpgt>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d021      	beq.n	800274e <setIRAngle+0x6a>
 800270a:	4b39      	ldr	r3, [pc, #228]	@ (80027f0 <setIRAngle+0x10c>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d11d      	bne.n	800274e <setIRAngle+0x6a>
	{
		IRadjustment = (kPir * ((left - right) - IRAngleOffset));
 8002712:	6839      	ldr	r1, [r7, #0]
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7fe fa29 	bl	8000b6c <__aeabi_fsub>
 800271a:	4603      	mov	r3, r0
 800271c:	461c      	mov	r4, r3
 800271e:	4b35      	ldr	r3, [pc, #212]	@ (80027f4 <setIRAngle+0x110>)
 8002720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fad7 	bl	8000cd8 <__aeabi_i2f>
 800272a:	4603      	mov	r3, r0
 800272c:	4619      	mov	r1, r3
 800272e:	4620      	mov	r0, r4
 8002730:	f7fe fa1c 	bl	8000b6c <__aeabi_fsub>
 8002734:	4603      	mov	r3, r0
 8002736:	461a      	mov	r2, r3
 8002738:	4b2f      	ldr	r3, [pc, #188]	@ (80027f8 <setIRAngle+0x114>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f7fe fb1e 	bl	8000d80 <__aeabi_fmul>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	4b2c      	ldr	r3, [pc, #176]	@ (80027fc <setIRAngle+0x118>)
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e04a      	b.n	80027e4 <setIRAngle+0x100>
	}
	else if (left > 600 && state == MOVING)
 800274e:	4927      	ldr	r1, [pc, #156]	@ (80027ec <setIRAngle+0x108>)
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7fe fcd1 	bl	80010f8 <__aeabi_fcmpgt>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d01b      	beq.n	8002794 <setIRAngle+0xb0>
 800275c:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <setIRAngle+0x10c>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d117      	bne.n	8002794 <setIRAngle+0xb0>
	{
		IRadjustment = (kPir2 * (left - goal_left));
 8002764:	4b26      	ldr	r3, [pc, #152]	@ (8002800 <setIRAngle+0x11c>)
 8002766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fe fab4 	bl	8000cd8 <__aeabi_i2f>
 8002770:	4603      	mov	r3, r0
 8002772:	4619      	mov	r1, r3
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7fe f9f9 	bl	8000b6c <__aeabi_fsub>
 800277a:	4603      	mov	r3, r0
 800277c:	461a      	mov	r2, r3
 800277e:	4b21      	ldr	r3, [pc, #132]	@ (8002804 <setIRAngle+0x120>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4610      	mov	r0, r2
 8002786:	f7fe fafb 	bl	8000d80 <__aeabi_fmul>
 800278a:	4603      	mov	r3, r0
 800278c:	461a      	mov	r2, r3
 800278e:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <setIRAngle+0x118>)
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e027      	b.n	80027e4 <setIRAngle+0x100>
	}
	else if (right > 600 && state == MOVING)
 8002794:	4915      	ldr	r1, [pc, #84]	@ (80027ec <setIRAngle+0x108>)
 8002796:	6838      	ldr	r0, [r7, #0]
 8002798:	f7fe fcae 	bl	80010f8 <__aeabi_fcmpgt>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01b      	beq.n	80027da <setIRAngle+0xf6>
 80027a2:	4b13      	ldr	r3, [pc, #76]	@ (80027f0 <setIRAngle+0x10c>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d117      	bne.n	80027da <setIRAngle+0xf6>
	{
		IRadjustment = (kPir2 * (goal_right - right));
 80027aa:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <setIRAngle+0x124>)
 80027ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fa91 	bl	8000cd8 <__aeabi_i2f>
 80027b6:	4603      	mov	r3, r0
 80027b8:	6839      	ldr	r1, [r7, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fe f9d6 	bl	8000b6c <__aeabi_fsub>
 80027c0:	4603      	mov	r3, r0
 80027c2:	461a      	mov	r2, r3
 80027c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002804 <setIRAngle+0x120>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4619      	mov	r1, r3
 80027ca:	4610      	mov	r0, r2
 80027cc:	f7fe fad8 	bl	8000d80 <__aeabi_fmul>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b09      	ldr	r3, [pc, #36]	@ (80027fc <setIRAngle+0x118>)
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e004      	b.n	80027e4 <setIRAngle+0x100>
	}
	else
		IRadjustment = 0;
 80027da:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <setIRAngle+0x118>)
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]
}
 80027e2:	bf00      	nop
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd90      	pop	{r4, r7, pc}
 80027ec:	44160000 	.word	0x44160000
 80027f0:	200013d4 	.word	0x200013d4
 80027f4:	200013c4 	.word	0x200013c4
 80027f8:	2000001c 	.word	0x2000001c
 80027fc:	200013c0 	.word	0x200013c0
 8002800:	200013ca 	.word	0x200013ca
 8002804:	20000020 	.word	0x20000020
 8002808:	200013cc 	.word	0x200013cc
 800280c:	00000000 	.word	0x00000000

08002810 <PDController>:

void PDController() {
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	af00      	add	r7, sp, #0

	if (state == START) {
 8002814:	4b9a      	ldr	r3, [pc, #616]	@ (8002a80 <PDController+0x270>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b04      	cmp	r3, #4
 800281a:	f000 81a1 	beq.w	8002b60 <PDController+0x350>
		return;
	}

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	setIRAngle(ir_left, ir_right);
 800281e:	4b99      	ldr	r3, [pc, #612]	@ (8002a84 <PDController+0x274>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a99      	ldr	r2, [pc, #612]	@ (8002a88 <PDController+0x278>)
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff ff5b 	bl	80026e4 <setIRAngle>

	adjusted_angle = goal_angle + IRadjustment;
 800282e:	4b97      	ldr	r3, [pc, #604]	@ (8002a8c <PDController+0x27c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a97      	ldr	r2, [pc, #604]	@ (8002a90 <PDController+0x280>)
 8002834:	6812      	ldr	r2, [r2, #0]
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f7fe f999 	bl	8000b70 <__addsf3>
 800283e:	4603      	mov	r3, r0
 8002840:	461a      	mov	r2, r3
 8002842:	4b94      	ldr	r3, [pc, #592]	@ (8002a94 <PDController+0x284>)
 8002844:	601a      	str	r2, [r3, #0]

	if (state == TURNING || state == FRONTING) {
 8002846:	4b8e      	ldr	r3, [pc, #568]	@ (8002a80 <PDController+0x270>)
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	d003      	beq.n	8002856 <PDController+0x46>
 800284e:	4b8c      	ldr	r3, [pc, #560]	@ (8002a80 <PDController+0x270>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b03      	cmp	r3, #3
 8002854:	d103      	bne.n	800285e <PDController+0x4e>
		adjusted_angle = goal_angle;
 8002856:	4b8d      	ldr	r3, [pc, #564]	@ (8002a8c <PDController+0x27c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a8e      	ldr	r2, [pc, #568]	@ (8002a94 <PDController+0x284>)
 800285c:	6013      	str	r3, [r2, #0]
	}

	readGyro(&gyro_vel);
 800285e:	488e      	ldr	r0, [pc, #568]	@ (8002a98 <PDController+0x288>)
 8002860:	f7ff f82e 	bl	80018c0 <readGyro>
	gyro_vel /= 2000;
 8002864:	4b8c      	ldr	r3, [pc, #560]	@ (8002a98 <PDController+0x288>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	498c      	ldr	r1, [pc, #560]	@ (8002a9c <PDController+0x28c>)
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fb3c 	bl	8000ee8 <__aeabi_fdiv>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4b88      	ldr	r3, [pc, #544]	@ (8002a98 <PDController+0x288>)
 8002876:	601a      	str	r2, [r3, #0]
	gyro_angle += gyro_vel;
 8002878:	4b89      	ldr	r3, [pc, #548]	@ (8002aa0 <PDController+0x290>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a86      	ldr	r2, [pc, #536]	@ (8002a98 <PDController+0x288>)
 800287e:	6812      	ldr	r2, [r2, #0]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f7fe f974 	bl	8000b70 <__addsf3>
 8002888:	4603      	mov	r3, r0
 800288a:	461a      	mov	r2, r3
 800288c:	4b84      	ldr	r3, [pc, #528]	@ (8002aa0 <PDController+0x290>)
 800288e:	601a      	str	r2, [r3, #0]

	angle_error = adjusted_angle - gyro_angle;
 8002890:	4b80      	ldr	r3, [pc, #512]	@ (8002a94 <PDController+0x284>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a82      	ldr	r2, [pc, #520]	@ (8002aa0 <PDController+0x290>)
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe f966 	bl	8000b6c <__aeabi_fsub>
 80028a0:	4603      	mov	r3, r0
 80028a2:	461a      	mov	r2, r3
 80028a4:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa4 <PDController+0x294>)
 80028a6:	601a      	str	r2, [r3, #0]
	angle_correction = kPw * angle_error + kDw * (angle_error - old_angle_error);
 80028a8:	4b7f      	ldr	r3, [pc, #508]	@ (8002aa8 <PDController+0x298>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a7d      	ldr	r2, [pc, #500]	@ (8002aa4 <PDController+0x294>)
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fa64 	bl	8000d80 <__aeabi_fmul>
 80028b8:	4603      	mov	r3, r0
 80028ba:	461c      	mov	r4, r3
 80028bc:	4b79      	ldr	r3, [pc, #484]	@ (8002aa4 <PDController+0x294>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a7a      	ldr	r2, [pc, #488]	@ (8002aac <PDController+0x29c>)
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	4611      	mov	r1, r2
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f950 	bl	8000b6c <__aeabi_fsub>
 80028cc:	4603      	mov	r3, r0
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b77      	ldr	r3, [pc, #476]	@ (8002ab0 <PDController+0x2a0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f7fe fa52 	bl	8000d80 <__aeabi_fmul>
 80028dc:	4603      	mov	r3, r0
 80028de:	4619      	mov	r1, r3
 80028e0:	4620      	mov	r0, r4
 80028e2:	f7fe f945 	bl	8000b70 <__addsf3>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b72      	ldr	r3, [pc, #456]	@ (8002ab4 <PDController+0x2a4>)
 80028ec:	601a      	str	r2, [r3, #0]

	distance_error = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts()) / (2 * ENC_TO_MM));
 80028ee:	4b72      	ldr	r3, [pc, #456]	@ (8002ab8 <PDController+0x2a8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7fd fdcc 	bl	8000490 <__aeabi_f2d>
 80028f8:	4604      	mov	r4, r0
 80028fa:	460d      	mov	r5, r1
 80028fc:	f7fe fe94 	bl	8001628 <getLeftEncoderCounts>
 8002900:	4603      	mov	r3, r0
 8002902:	461e      	mov	r6, r3
 8002904:	f7fe fe82 	bl	800160c <getRightEncoderCounts>
 8002908:	4603      	mov	r3, r0
 800290a:	4433      	add	r3, r6
 800290c:	4618      	mov	r0, r3
 800290e:	f7fd fdad 	bl	800046c <__aeabi_i2d>
 8002912:	a359      	add	r3, pc, #356	@ (adr r3, 8002a78 <PDController+0x268>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd ff3c 	bl	8000794 <__aeabi_ddiv>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fd fc54 	bl	80001d0 <__aeabi_dsub>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	f7fe f8c8 	bl	8000ac4 <__aeabi_d2f>
 8002934:	4603      	mov	r3, r0
 8002936:	4a61      	ldr	r2, [pc, #388]	@ (8002abc <PDController+0x2ac>)
 8002938:	6013      	str	r3, [r2, #0]

	distance_correction = kPx * distance_error + kDx * (distance_error - old_distance_error);
 800293a:	4b61      	ldr	r3, [pc, #388]	@ (8002ac0 <PDController+0x2b0>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a5f      	ldr	r2, [pc, #380]	@ (8002abc <PDController+0x2ac>)
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7fe fa1b 	bl	8000d80 <__aeabi_fmul>
 800294a:	4603      	mov	r3, r0
 800294c:	461c      	mov	r4, r3
 800294e:	4b5b      	ldr	r3, [pc, #364]	@ (8002abc <PDController+0x2ac>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a5c      	ldr	r2, [pc, #368]	@ (8002ac4 <PDController+0x2b4>)
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7fe f907 	bl	8000b6c <__aeabi_fsub>
 800295e:	4603      	mov	r3, r0
 8002960:	461a      	mov	r2, r3
 8002962:	4b59      	ldr	r3, [pc, #356]	@ (8002ac8 <PDController+0x2b8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4619      	mov	r1, r3
 8002968:	4610      	mov	r0, r2
 800296a:	f7fe fa09 	bl	8000d80 <__aeabi_fmul>
 800296e:	4603      	mov	r3, r0
 8002970:	4619      	mov	r1, r3
 8002972:	4620      	mov	r0, r4
 8002974:	f7fe f8fc 	bl	8000b70 <__addsf3>
 8002978:	4603      	mov	r3, r0
 800297a:	461a      	mov	r2, r3
 800297c:	4b53      	ldr	r3, [pc, #332]	@ (8002acc <PDController+0x2bc>)
 800297e:	601a      	str	r2, [r3, #0]

	if (state == FRONTING) {
 8002980:	4b3f      	ldr	r3, [pc, #252]	@ (8002a80 <PDController+0x270>)
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	2b03      	cmp	r3, #3
 8002986:	d117      	bne.n	80029b8 <PDController+0x1a8>
		distance_correction = front_kPx * (goal_front_left - ir_front_left);
 8002988:	4b51      	ldr	r3, [pc, #324]	@ (8002ad0 <PDController+0x2c0>)
 800298a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe f9a2 	bl	8000cd8 <__aeabi_i2f>
 8002994:	4602      	mov	r2, r0
 8002996:	4b4f      	ldr	r3, [pc, #316]	@ (8002ad4 <PDController+0x2c4>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f7fe f8e5 	bl	8000b6c <__aeabi_fsub>
 80029a2:	4603      	mov	r3, r0
 80029a4:	461a      	mov	r2, r3
 80029a6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ad8 <PDController+0x2c8>)
 80029a8:	4619      	mov	r1, r3
 80029aa:	4610      	mov	r0, r2
 80029ac:	f7fe f9e8 	bl	8000d80 <__aeabi_fmul>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461a      	mov	r2, r3
 80029b4:	4b45      	ldr	r3, [pc, #276]	@ (8002acc <PDController+0x2bc>)
 80029b6:	601a      	str	r2, [r3, #0]
	}

/////////////////////////////////	APPLY ACCELERATION	///////////////////////////////

	if (fabs(distance_error) > 100)
 80029b8:	4b40      	ldr	r3, [pc, #256]	@ (8002abc <PDController+0x2ac>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029c0:	4946      	ldr	r1, [pc, #280]	@ (8002adc <PDController+0x2cc>)
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fb98 	bl	80010f8 <__aeabi_fcmpgt>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d034      	beq.n	8002a38 <PDController+0x228>
	{		// If we're going straight and not at the end, apply acceleration
		if (fabs(distance_correction - old_distance_correction) > xacceleration)
 80029ce:	4b3f      	ldr	r3, [pc, #252]	@ (8002acc <PDController+0x2bc>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a43      	ldr	r2, [pc, #268]	@ (8002ae0 <PDController+0x2d0>)
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7fe f8c7 	bl	8000b6c <__aeabi_fsub>
 80029de:	4603      	mov	r3, r0
 80029e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029e4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ae4 <PDController+0x2d4>)
 80029e6:	4611      	mov	r1, r2
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fb85 	bl	80010f8 <__aeabi_fcmpgt>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d021      	beq.n	8002a38 <PDController+0x228>
		{
			distance_correction = old_distance_correction + (xacceleration * sign(distance_correction - old_distance_correction));
 80029f4:	4b35      	ldr	r3, [pc, #212]	@ (8002acc <PDController+0x2bc>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a39      	ldr	r2, [pc, #228]	@ (8002ae0 <PDController+0x2d0>)
 80029fa:	6812      	ldr	r2, [r2, #0]
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7fe f8b4 	bl	8000b6c <__aeabi_fsub>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4618      	mov	r0, r3
 8002a08:	f001 fb0a 	bl	8004020 <sign>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe f962 	bl	8000cd8 <__aeabi_i2f>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4a33      	ldr	r2, [pc, #204]	@ (8002ae4 <PDController+0x2d4>)
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe f9b0 	bl	8000d80 <__aeabi_fmul>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b2e      	ldr	r3, [pc, #184]	@ (8002ae0 <PDController+0x2d0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	f7fe f8a0 	bl	8000b70 <__addsf3>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	4b25      	ldr	r3, [pc, #148]	@ (8002acc <PDController+0x2bc>)
 8002a36:	601a      	str	r2, [r3, #0]
		}
	}

////////////////////// ROUND DISTANCE AND ANGLE CORRECTION	//////////////////////////

	if (fabs(distance_correction) > PWMMaxx)		// Upper Limit for PWM
 8002a38:	4b24      	ldr	r3, [pc, #144]	@ (8002acc <PDController+0x2bc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a40:	4a29      	ldr	r2, [pc, #164]	@ (8002ae8 <PDController+0x2d8>)
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe fb57 	bl	80010f8 <__aeabi_fcmpgt>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d04f      	beq.n	8002af0 <PDController+0x2e0>
		distance_correction = sign(distance_correction) * PWMMaxx;
 8002a50:	4b1e      	ldr	r3, [pc, #120]	@ (8002acc <PDController+0x2bc>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f001 fae3 	bl	8004020 <sign>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7fe f93b 	bl	8000cd8 <__aeabi_i2f>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4a20      	ldr	r2, [pc, #128]	@ (8002ae8 <PDController+0x2d8>)
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fe f989 	bl	8000d80 <__aeabi_fmul>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	461a      	mov	r2, r3
 8002a72:	e03b      	b.n	8002aec <PDController+0x2dc>
 8002a74:	f3af 8000 	nop.w
 8002a78:	33333333 	.word	0x33333333
 8002a7c:	401b3333 	.word	0x401b3333
 8002a80:	200013d4 	.word	0x200013d4
 8002a84:	20000320 	.word	0x20000320
 8002a88:	2000032c 	.word	0x2000032c
 8002a8c:	20001350 	.word	0x20001350
 8002a90:	200013c0 	.word	0x200013c0
 8002a94:	200013d0 	.word	0x200013d0
 8002a98:	200013e8 	.word	0x200013e8
 8002a9c:	44fa0000 	.word	0x44fa0000
 8002aa0:	200013e4 	.word	0x200013e4
 8002aa4:	20001354 	.word	0x20001354
 8002aa8:	2000000c 	.word	0x2000000c
 8002aac:	20001358 	.word	0x20001358
 8002ab0:	20000010 	.word	0x20000010
 8002ab4:	20001384 	.word	0x20001384
 8002ab8:	2000134c 	.word	0x2000134c
 8002abc:	20001388 	.word	0x20001388
 8002ac0:	20000014 	.word	0x20000014
 8002ac4:	2000138c 	.word	0x2000138c
 8002ac8:	20000018 	.word	0x20000018
 8002acc:	200013b8 	.word	0x200013b8
 8002ad0:	200013c6 	.word	0x200013c6
 8002ad4:	20000324 	.word	0x20000324
 8002ad8:	3951b717 	.word	0x3951b717
 8002adc:	42c80000 	.word	0x42c80000
 8002ae0:	200013bc 	.word	0x200013bc
 8002ae4:	3a03126f 	.word	0x3a03126f
 8002ae8:	3e99999a 	.word	0x3e99999a
 8002aec:	4b1d      	ldr	r3, [pc, #116]	@ (8002b64 <PDController+0x354>)
 8002aee:	601a      	str	r2, [r3, #0]

	if (fabs(angle_correction) > PWMMaxw)
 8002af0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <PDController+0x358>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002af8:	4a1c      	ldr	r2, [pc, #112]	@ (8002b6c <PDController+0x35c>)
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fafb 	bl	80010f8 <__aeabi_fcmpgt>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d012      	beq.n	8002b2e <PDController+0x31e>
		angle_correction = sign(angle_correction) * PWMMaxw;
 8002b08:	4b17      	ldr	r3, [pc, #92]	@ (8002b68 <PDController+0x358>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f001 fa87 	bl	8004020 <sign>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fe f8df 	bl	8000cd8 <__aeabi_i2f>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	4a13      	ldr	r2, [pc, #76]	@ (8002b6c <PDController+0x35c>)
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe f92d 	bl	8000d80 <__aeabi_fmul>
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <PDController+0x358>)
 8002b2c:	601a      	str	r2, [r3, #0]

	left_PWM_value = (distance_correction + angle_correction);
 8002b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <PDController+0x354>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a0d      	ldr	r2, [pc, #52]	@ (8002b68 <PDController+0x358>)
 8002b34:	6812      	ldr	r2, [r2, #0]
 8002b36:	4611      	mov	r1, r2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe f819 	bl	8000b70 <__addsf3>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <PDController+0x360>)
 8002b44:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distance_correction - angle_correction);
 8002b46:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <PDController+0x354>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a07      	ldr	r2, [pc, #28]	@ (8002b68 <PDController+0x358>)
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f80b 	bl	8000b6c <__aeabi_fsub>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4b06      	ldr	r3, [pc, #24]	@ (8002b74 <PDController+0x364>)
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e000      	b.n	8002b62 <PDController+0x352>
		return;
 8002b60:	bf00      	nop

}
 8002b62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b64:	200013b8 	.word	0x200013b8
 8002b68:	20001384 	.word	0x20001384
 8002b6c:	3e23d70a 	.word	0x3e23d70a
 8002b70:	200013d8 	.word	0x200013d8
 8002b74:	200013dc 	.word	0x200013dc

08002b78 <updatePID>:

void updatePID() {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 8002b7e:	f7ff fe47 	bl	8002810 <PDController>

	if (fabs(left_PWM_value) > 0.03) {
 8002b82:	4b79      	ldr	r3, [pc, #484]	@ (8002d68 <updatePID+0x1f0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fd fc80 	bl	8000490 <__aeabi_f2d>
 8002b90:	a36f      	add	r3, pc, #444	@ (adr r3, 8002d50 <updatePID+0x1d8>)
 8002b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b96:	f7fd ff63 	bl	8000a60 <__aeabi_dcmpgt>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01a      	beq.n	8002bd6 <updatePID+0x5e>
		left_PWM_value += sign(left_PWM_value) * PWMMin;
 8002ba0:	4b71      	ldr	r3, [pc, #452]	@ (8002d68 <updatePID+0x1f0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f001 fa3b 	bl	8004020 <sign>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe f893 	bl	8000cd8 <__aeabi_i2f>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a6d      	ldr	r2, [pc, #436]	@ (8002d6c <updatePID+0x1f4>)
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe f8e1 	bl	8000d80 <__aeabi_fmul>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4b69      	ldr	r3, [pc, #420]	@ (8002d68 <updatePID+0x1f0>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4610      	mov	r0, r2
 8002bca:	f7fd ffd1 	bl	8000b70 <__addsf3>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4b65      	ldr	r3, [pc, #404]	@ (8002d68 <updatePID+0x1f0>)
 8002bd4:	601a      	str	r2, [r3, #0]

	}

	if (fabs(right_PWM_value) > 0.03) {
 8002bd6:	4b66      	ldr	r3, [pc, #408]	@ (8002d70 <updatePID+0x1f8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bde:	4618      	mov	r0, r3
 8002be0:	f7fd fc56 	bl	8000490 <__aeabi_f2d>
 8002be4:	a35a      	add	r3, pc, #360	@ (adr r3, 8002d50 <updatePID+0x1d8>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f7fd ff39 	bl	8000a60 <__aeabi_dcmpgt>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d01a      	beq.n	8002c2a <updatePID+0xb2>
		right_PWM_value += sign(right_PWM_value) * PWMMin;
 8002bf4:	4b5e      	ldr	r3, [pc, #376]	@ (8002d70 <updatePID+0x1f8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f001 fa11 	bl	8004020 <sign>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe f869 	bl	8000cd8 <__aeabi_i2f>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4a58      	ldr	r2, [pc, #352]	@ (8002d6c <updatePID+0x1f4>)
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7fe f8b7 	bl	8000d80 <__aeabi_fmul>
 8002c12:	4603      	mov	r3, r0
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b56      	ldr	r3, [pc, #344]	@ (8002d70 <updatePID+0x1f8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	f7fd ffa7 	bl	8000b70 <__addsf3>
 8002c22:	4603      	mov	r3, r0
 8002c24:	461a      	mov	r2, r3
 8002c26:	4b52      	ldr	r3, [pc, #328]	@ (8002d70 <updatePID+0x1f8>)
 8002c28:	601a      	str	r2, [r3, #0]

	}

//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 8002c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d68 <updatePID+0x1f0>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fc5a 	bl	80024e8 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 8002c34:	4b4e      	ldr	r3, [pc, #312]	@ (8002d70 <updatePID+0x1f8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fc91 	bl	8002560 <setMotorRPWM>

	if((angle_error < 2.5 && angle_error > -2.5 && distance_error < 2 && distance_error > -2) || (state == FRONTING && distance_correction < 0.1 && distance_correction > -0.1))
 8002c3e:	4b4d      	ldr	r3, [pc, #308]	@ (8002d74 <updatePID+0x1fc>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	494d      	ldr	r1, [pc, #308]	@ (8002d78 <updatePID+0x200>)
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7fe fa39 	bl	80010bc <__aeabi_fcmplt>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d01c      	beq.n	8002c8a <updatePID+0x112>
 8002c50:	4b48      	ldr	r3, [pc, #288]	@ (8002d74 <updatePID+0x1fc>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4949      	ldr	r1, [pc, #292]	@ (8002d7c <updatePID+0x204>)
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fa4e 	bl	80010f8 <__aeabi_fcmpgt>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d013      	beq.n	8002c8a <updatePID+0x112>
 8002c62:	4b47      	ldr	r3, [pc, #284]	@ (8002d80 <updatePID+0x208>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7fe fa26 	bl	80010bc <__aeabi_fcmplt>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d009      	beq.n	8002c8a <updatePID+0x112>
 8002c76:	4b42      	ldr	r3, [pc, #264]	@ (8002d80 <updatePID+0x208>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fa3a 	bl	80010f8 <__aeabi_fcmpgt>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d11d      	bne.n	8002cc6 <updatePID+0x14e>
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002d84 <updatePID+0x20c>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d11f      	bne.n	8002cd2 <updatePID+0x15a>
 8002c92:	4b3d      	ldr	r3, [pc, #244]	@ (8002d88 <updatePID+0x210>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fbfa 	bl	8000490 <__aeabi_f2d>
 8002c9c:	a32e      	add	r3, pc, #184	@ (adr r3, 8002d58 <updatePID+0x1e0>)
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f7fd febf 	bl	8000a24 <__aeabi_dcmplt>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d012      	beq.n	8002cd2 <updatePID+0x15a>
 8002cac:	4b36      	ldr	r3, [pc, #216]	@ (8002d88 <updatePID+0x210>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fd fbed 	bl	8000490 <__aeabi_f2d>
 8002cb6:	a32a      	add	r3, pc, #168	@ (adr r3, 8002d60 <updatePID+0x1e8>)
 8002cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbc:	f7fd fed0 	bl	8000a60 <__aeabi_dcmpgt>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <updatePID+0x15a>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002cc6:	4b31      	ldr	r3, [pc, #196]	@ (8002d8c <updatePID+0x214>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	3301      	adds	r3, #1
 8002ccc:	4a2f      	ldr	r2, [pc, #188]	@ (8002d8c <updatePID+0x214>)
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	e002      	b.n	8002cd8 <updatePID+0x160>

	else
		goal_reached_timer = 0;
 8002cd2:	4b2e      	ldr	r3, [pc, #184]	@ (8002d8c <updatePID+0x214>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	old_angle_error = angle_error;
 8002cd8:	4b26      	ldr	r3, [pc, #152]	@ (8002d74 <updatePID+0x1fc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a2c      	ldr	r2, [pc, #176]	@ (8002d90 <updatePID+0x218>)
 8002cde:	6013      	str	r3, [r2, #0]

	old_distance_error = distance_error;
 8002ce0:	4b27      	ldr	r3, [pc, #156]	@ (8002d80 <updatePID+0x208>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a2b      	ldr	r2, [pc, #172]	@ (8002d94 <updatePID+0x21c>)
 8002ce6:	6013      	str	r3, [r2, #0]

	old_distance_correction = distance_correction;
 8002ce8:	4b27      	ldr	r3, [pc, #156]	@ (8002d88 <updatePID+0x210>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a2a      	ldr	r2, [pc, #168]	@ (8002d98 <updatePID+0x220>)
 8002cee:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002cf0:	2309      	movs	r3, #9
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	e00b      	b.n	8002d0e <updatePID+0x196>
		old_angle_errors[i] = old_angle_errors[i-1];	// Adds the newest angle_error to array and shifts everything to the right
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	4a28      	ldr	r2, [pc, #160]	@ (8002d9c <updatePID+0x224>)
 8002cfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d00:	4926      	ldr	r1, [pc, #152]	@ (8002d9c <updatePID+0x224>)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	607b      	str	r3, [r7, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	dcf0      	bgt.n	8002cf6 <updatePID+0x17e>
	old_angle_errors[0] = angle_error;
 8002d14:	4b17      	ldr	r3, [pc, #92]	@ (8002d74 <updatePID+0x1fc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a20      	ldr	r2, [pc, #128]	@ (8002d9c <updatePID+0x224>)
 8002d1a:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002d1c:	2309      	movs	r3, #9
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	e00b      	b.n	8002d3a <updatePID+0x1c2>
		old_distance_errors[i] = old_distance_errors[i-1];	// Adds the newest distance_error to array and shifts everything right
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	4a1e      	ldr	r2, [pc, #120]	@ (8002da0 <updatePID+0x228>)
 8002d28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002d2c:	491c      	ldr	r1, [pc, #112]	@ (8002da0 <updatePID+0x228>)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	dcf0      	bgt.n	8002d22 <updatePID+0x1aa>
	old_distance_errors[0] = distance_error;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	@ (8002d80 <updatePID+0x208>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a16      	ldr	r2, [pc, #88]	@ (8002da0 <updatePID+0x228>)
 8002d46:	6013      	str	r3, [r2, #0]

}
 8002d48:	bf00      	nop
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	eb851eb8 	.word	0xeb851eb8
 8002d54:	3f9eb851 	.word	0x3f9eb851
 8002d58:	9999999a 	.word	0x9999999a
 8002d5c:	3fb99999 	.word	0x3fb99999
 8002d60:	9999999a 	.word	0x9999999a
 8002d64:	bfb99999 	.word	0xbfb99999
 8002d68:	200013d8 	.word	0x200013d8
 8002d6c:	3e6b851f 	.word	0x3e6b851f
 8002d70:	200013dc 	.word	0x200013dc
 8002d74:	20001354 	.word	0x20001354
 8002d78:	40200000 	.word	0x40200000
 8002d7c:	c0200000 	.word	0xc0200000
 8002d80:	20001388 	.word	0x20001388
 8002d84:	200013d4 	.word	0x200013d4
 8002d88:	200013b8 	.word	0x200013b8
 8002d8c:	200013e0 	.word	0x200013e0
 8002d90:	20001358 	.word	0x20001358
 8002d94:	2000138c 	.word	0x2000138c
 8002d98:	200013bc 	.word	0x200013bc
 8002d9c:	2000135c 	.word	0x2000135c
 8002da0:	20001390 	.word	0x20001390

08002da4 <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <PIDdone+0x1c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b31      	cmp	r3, #49	@ 0x31
 8002dae:	dd03      	ble.n	8002db8 <PIDdone+0x14>
	{
		resetPID();
 8002db0:	f000 f808 	bl	8002dc4 <resetPID>
		return 1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <PIDdone+0x16>
	}
	else
		return 0;
 8002db8:	2300      	movs	r3, #0

}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	200013e0 	.word	0x200013e0

08002dc4 <resetPID>:

void resetPID() {
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angle_error = 0;
 8002dca:	4b24      	ldr	r3, [pc, #144]	@ (8002e5c <resetPID+0x98>)
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
	old_angle_error = 0;
 8002dd2:	4b23      	ldr	r3, [pc, #140]	@ (8002e60 <resetPID+0x9c>)
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
	angle_correction = 0;
 8002dda:	4b22      	ldr	r3, [pc, #136]	@ (8002e64 <resetPID+0xa0>)
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	e008      	b.n	8002dfa <resetPID+0x36>
		old_angle_errors[i] = 0;
 8002de8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e68 <resetPID+0xa4>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3301      	adds	r3, #1
 8002df8:	607b      	str	r3, [r7, #4]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b09      	cmp	r3, #9
 8002dfe:	ddf3      	ble.n	8002de8 <resetPID+0x24>

	distance_error = 0;
 8002e00:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <resetPID+0xa8>)
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
	old_distance_error = 0;
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <resetPID+0xac>)
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
	distance_correction = 0;
 8002e10:	4b18      	ldr	r3, [pc, #96]	@ (8002e74 <resetPID+0xb0>)
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002e18:	2300      	movs	r3, #0
 8002e1a:	603b      	str	r3, [r7, #0]
 8002e1c:	e008      	b.n	8002e30 <resetPID+0x6c>
		old_distance_errors[i] = 0;
 8002e1e:	4a16      	ldr	r2, [pc, #88]	@ (8002e78 <resetPID+0xb4>)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	603b      	str	r3, [r7, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	2b09      	cmp	r3, #9
 8002e34:	ddf3      	ble.n	8002e1e <resetPID+0x5a>

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
//	goal_angle = 0;
//	gyro_angle = 0;
//	goal_distance = 0;
	goal_reached_timer = 0;
 8002e36:	4b11      	ldr	r3, [pc, #68]	@ (8002e7c <resetPID+0xb8>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	601a      	str	r2, [r3, #0]



//	TIM3->CNT = TIM3->CNT + goal_distance;
//	TIM8->CNT = TIM8->CNT + goal_distance;
	goal_distance = 0;
 8002e3c:	4b10      	ldr	r3, [pc, #64]	@ (8002e80 <resetPID+0xbc>)
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

	resetEncoders();
 8002e44:	f7fe fbfe 	bl	8001644 <resetEncoders>

	resetMotors();
 8002e48:	f7ff fbc6 	bl	80025d8 <resetMotors>
	setState(REST);
 8002e4c:	2000      	movs	r0, #0
 8002e4e:	f7ff fc07 	bl	8002660 <setState>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20001354 	.word	0x20001354
 8002e60:	20001358 	.word	0x20001358
 8002e64:	20001384 	.word	0x20001384
 8002e68:	2000135c 	.word	0x2000135c
 8002e6c:	20001388 	.word	0x20001388
 8002e70:	2000138c 	.word	0x2000138c
 8002e74:	200013b8 	.word	0x200013b8
 8002e78:	20001390 	.word	0x20001390
 8002e7c:	200013e0 	.word	0x200013e0
 8002e80:	2000134c 	.word	0x2000134c

08002e84 <newCell>:
int16_t vertWall[16][17];

int16_t discovered[16][16];

struct Cell* newCell(int r, int c)           // Acts as a constructor for a cell cuz C is annoying
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
    struct Cell* p = malloc(sizeof(struct Cell));
 8002e8e:	2008      	movs	r0, #8
 8002e90:	f005 f9cc 	bl	800822c <malloc>
 8002e94:	4603      	mov	r3, r0
 8002e96:	60fb      	str	r3, [r7, #12]
    p->row = r;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	601a      	str	r2, [r3, #0]
    p->col = c;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	605a      	str	r2, [r3, #4]
    return p;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
	...

08002eb0 <insertQueue>:

void insertQueue(struct Cell* input) {
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    queue[queueEnd] = input;
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <insertQueue+0x48>)
 8002eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4a0e      	ldr	r2, [pc, #56]	@ (8002efc <insertQueue+0x4c>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

    queueEnd++;
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef8 <insertQueue+0x48>)
 8002eca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	b21a      	sxth	r2, r3
 8002ed6:	4b08      	ldr	r3, [pc, #32]	@ (8002ef8 <insertQueue+0x48>)
 8002ed8:	801a      	strh	r2, [r3, #0]

    if (queueEnd == 512) {
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <insertQueue+0x48>)
 8002edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ee4:	d102      	bne.n	8002eec <insertQueue+0x3c>
        queueEnd = 0;
 8002ee6:	4b04      	ldr	r3, [pc, #16]	@ (8002ef8 <insertQueue+0x48>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20001dfa 	.word	0x20001dfa
 8002efc:	200015f8 	.word	0x200015f8

08002f00 <popQueueFront>:

void popQueueFront()
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
    free(queueFront());
 8002f04:	f000 f81a 	bl	8002f3c <queueFront>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f005 f996 	bl	800823c <free>

    queueStart++;
 8002f10:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <popQueueFront+0x38>)
 8002f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3301      	adds	r3, #1
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	b21a      	sxth	r2, r3
 8002f1e:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <popQueueFront+0x38>)
 8002f20:	801a      	strh	r2, [r3, #0]
    if (queueStart == 512) {
 8002f22:	4b05      	ldr	r3, [pc, #20]	@ (8002f38 <popQueueFront+0x38>)
 8002f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f2c:	d102      	bne.n	8002f34 <popQueueFront+0x34>
        queueStart = 0;
 8002f2e:	4b02      	ldr	r3, [pc, #8]	@ (8002f38 <popQueueFront+0x38>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	801a      	strh	r2, [r3, #0]
        //reset cause circular queue
    }
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20001df8 	.word	0x20001df8

08002f3c <queueFront>:

struct Cell* queueFront()
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	af00      	add	r7, sp, #0
    return queue[queueStart];
 8002f40:	4b05      	ldr	r3, [pc, #20]	@ (8002f58 <queueFront+0x1c>)
 8002f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f46:	461a      	mov	r2, r3
 8002f48:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <queueFront+0x20>)
 8002f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bc80      	pop	{r7}
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	20001df8 	.word	0x20001df8
 8002f5c:	200015f8 	.word	0x200015f8

08002f60 <initElements>:

void initElements()
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
    currPos = newCell(15, 0);           // Sets current position to row 15, column 0
 8002f66:	2100      	movs	r1, #0
 8002f68:	200f      	movs	r0, #15
 8002f6a:	f7ff ff8b 	bl	8002e84 <newCell>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a32      	ldr	r2, [pc, #200]	@ (800303c <initElements+0xdc>)
 8002f72:	6013      	str	r3, [r2, #0]
    currHead = NORTH;                    // Sets current heading to north
 8002f74:	4b32      	ldr	r3, [pc, #200]	@ (8003040 <initElements+0xe0>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	701a      	strb	r2, [r3, #0]

    if (HAL_GPIO_ReadPin(Switch2_GPIO_Port, Switch2_Pin) == GPIO_PIN_SET)	// This is not the first run and we want to load maze
 8002f7a:	2104      	movs	r1, #4
 8002f7c:	4831      	ldr	r0, [pc, #196]	@ (8003044 <initElements+0xe4>)
 8002f7e:	f002 faf9 	bl	8005574 <HAL_GPIO_ReadPin>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d04f      	beq.n	8003028 <initElements+0xc8>
    {
//    	loadMaze(); TODO
    }
    else																	// We don't want to load maze from memory
    {
        for (int i = 0; i < 17; i++) {
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
 8002f8c:	e013      	b.n	8002fb6 <initElements+0x56>
            for (int j = 0; j < 16; j++) {
 8002f8e:	2300      	movs	r3, #0
 8002f90:	613b      	str	r3, [r7, #16]
 8002f92:	e00a      	b.n	8002faa <initElements+0x4a>
                horzWall[i][j] = 0;
 8002f94:	492c      	ldr	r1, [pc, #176]	@ (8003048 <initElements+0xe8>)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	011a      	lsls	r2, r3, #4
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 16; j++) {
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b0f      	cmp	r3, #15
 8002fae:	ddf1      	ble.n	8002f94 <initElements+0x34>
        for (int i = 0; i < 17; i++) {
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	2b10      	cmp	r3, #16
 8002fba:	dde8      	ble.n	8002f8e <initElements+0x2e>
            }
        }
        for (int i = 0; i < 16; i++) {
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	e015      	b.n	8002fee <initElements+0x8e>
            for (int j = 0; j < 17; j++) {
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	e00c      	b.n	8002fe2 <initElements+0x82>
                vertWall[i][j] = 0;
 8002fc8:	4920      	ldr	r1, [pc, #128]	@ (800304c <initElements+0xec>)
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	4413      	add	r3, r2
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for (int j = 0; j < 17; j++) {
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	ddef      	ble.n	8002fc8 <initElements+0x68>
        for (int i = 0; i < 16; i++) {
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	3301      	adds	r3, #1
 8002fec:	60fb      	str	r3, [r7, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2b0f      	cmp	r3, #15
 8002ff2:	dde6      	ble.n	8002fc2 <initElements+0x62>
            }
        }
		for (int i = 0; i < 16; i++) {
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	607b      	str	r3, [r7, #4]
 8002ff8:	e013      	b.n	8003022 <initElements+0xc2>
			for (int j = 0; j < 16; j++) {
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	603b      	str	r3, [r7, #0]
 8002ffe:	e00a      	b.n	8003016 <initElements+0xb6>
				discovered[i][j] = 0;
 8003000:	4913      	ldr	r1, [pc, #76]	@ (8003050 <initElements+0xf0>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	011a      	lsls	r2, r3, #4
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	4413      	add	r3, r2
 800300a:	2200      	movs	r2, #0
 800300c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			for (int j = 0; j < 16; j++) {
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	603b      	str	r3, [r7, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b0f      	cmp	r3, #15
 800301a:	ddf1      	ble.n	8003000 <initElements+0xa0>
		for (int i = 0; i < 16; i++) {
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3301      	adds	r3, #1
 8003020:	607b      	str	r3, [r7, #4]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2b0f      	cmp	r3, #15
 8003026:	dde8      	ble.n	8002ffa <initElements+0x9a>
			}
		}
    }

    queueStart = 0;
 8003028:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <initElements+0xf4>)
 800302a:	2200      	movs	r2, #0
 800302c:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <initElements+0xf8>)
 8003030:	2200      	movs	r2, #0
 8003032:	801a      	strh	r2, [r3, #0]
}
 8003034:	bf00      	nop
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200013f0 	.word	0x200013f0
 8003040:	200013f4 	.word	0x200013f4
 8003044:	40020c00 	.word	0x40020c00
 8003048:	20001dfc 	.word	0x20001dfc
 800304c:	2000201c 	.word	0x2000201c
 8003050:	2000223c 	.word	0x2000223c
 8003054:	20001df8 	.word	0x20001df8
 8003058:	20001dfa 	.word	0x20001dfa

0800305c <setWall>:

void setWall(int dir)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
    switch (dir)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d844      	bhi.n	80030f4 <setWall+0x98>
 800306a:	a201      	add	r2, pc, #4	@ (adr r2, 8003070 <setWall+0x14>)
 800306c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003070:	08003081 	.word	0x08003081
 8003074:	0800309b 	.word	0x0800309b
 8003078:	080030bb 	.word	0x080030bb
 800307c:	080030d7 	.word	0x080030d7
    {
    case NORTH:
        horzWall[currPos->row][currPos->col] = 1;   // Sets the 2D array value to 1 to represent true (there's no bool type in C)
 8003080:	4b1f      	ldr	r3, [pc, #124]	@ (8003100 <setWall+0xa4>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b1e      	ldr	r3, [pc, #120]	@ (8003100 <setWall+0xa4>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	491d      	ldr	r1, [pc, #116]	@ (8003104 <setWall+0xa8>)
 800308e:	0112      	lsls	r2, r2, #4
 8003090:	4413      	add	r3, r2
 8003092:	2201      	movs	r2, #1
 8003094:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 8003098:	e02c      	b.n	80030f4 <setWall+0x98>
    case EAST:
        vertWall[currPos->row][currPos->col + 1] = 1;   // May need to check 2D array logic my head hurts lol
 800309a:	4b19      	ldr	r3, [pc, #100]	@ (8003100 <setWall+0xa4>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	4b17      	ldr	r3, [pc, #92]	@ (8003100 <setWall+0xa4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	1c59      	adds	r1, r3, #1
 80030a8:	4817      	ldr	r0, [pc, #92]	@ (8003108 <setWall+0xac>)
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	4413      	add	r3, r2
 80030b0:	440b      	add	r3, r1
 80030b2:	2201      	movs	r2, #1
 80030b4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 80030b8:	e01c      	b.n	80030f4 <setWall+0x98>
    case SOUTH:
        horzWall[currPos->row + 1][currPos->col] = 1;
 80030ba:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <setWall+0xa4>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	4b0f      	ldr	r3, [pc, #60]	@ (8003100 <setWall+0xa4>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	490e      	ldr	r1, [pc, #56]	@ (8003104 <setWall+0xa8>)
 80030ca:	0112      	lsls	r2, r2, #4
 80030cc:	4413      	add	r3, r2
 80030ce:	2201      	movs	r2, #1
 80030d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        break;
 80030d4:	e00e      	b.n	80030f4 <setWall+0x98>
    case WEST:
        vertWall[currPos->row][currPos->col] = 1;
 80030d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003100 <setWall+0xa4>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	4b08      	ldr	r3, [pc, #32]	@ (8003100 <setWall+0xa4>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6859      	ldr	r1, [r3, #4]
 80030e2:	4809      	ldr	r0, [pc, #36]	@ (8003108 <setWall+0xac>)
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	4413      	add	r3, r2
 80030ea:	440b      	add	r3, r1
 80030ec:	2201      	movs	r2, #1
 80030ee:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
        break;
 80030f2:	bf00      	nop
    }
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bc80      	pop	{r7}
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	200013f0 	.word	0x200013f0
 8003104:	20001dfc 	.word	0x20001dfc
 8003108:	2000201c 	.word	0x2000201c

0800310c <detectWalls>:

void detectWalls()
{
 800310c:	b580      	push	{r7, lr}
 800310e:	af00      	add	r7, sp, #0
    switch (currHead)
 8003110:	4b44      	ldr	r3, [pc, #272]	@ (8003224 <detectWalls+0x118>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d876      	bhi.n	8003206 <detectWalls+0xfa>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <detectWalls+0x14>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003131 	.word	0x08003131
 8003124:	08003163 	.word	0x08003163
 8003128:	08003195 	.word	0x08003195
 800312c:	080031c7 	.word	0x080031c7
    {
    case NORTH:
        if (frontWallCheck())
 8003130:	f000 ff52 	bl	8003fd8 <frontWallCheck>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d002      	beq.n	8003140 <detectWalls+0x34>
        {
            setWall(NORTH);
 800313a:	2000      	movs	r0, #0
 800313c:	f7ff ff8e 	bl	800305c <setWall>
        }
        if (leftWallCheck())
 8003140:	f000 ff02 	bl	8003f48 <leftWallCheck>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <detectWalls+0x44>
        {
            setWall(WEST);
 800314a:	2003      	movs	r0, #3
 800314c:	f7ff ff86 	bl	800305c <setWall>
        }
        if (rightWallCheck())
 8003150:	f000 ff1e 	bl	8003f90 <rightWallCheck>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d04e      	beq.n	80031f8 <detectWalls+0xec>
        {
            setWall(EAST);
 800315a:	2001      	movs	r0, #1
 800315c:	f7ff ff7e 	bl	800305c <setWall>
        }
        break;
 8003160:	e04a      	b.n	80031f8 <detectWalls+0xec>
    case EAST:
        if (frontWallCheck())
 8003162:	f000 ff39 	bl	8003fd8 <frontWallCheck>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d002      	beq.n	8003172 <detectWalls+0x66>
        {
            setWall(EAST);
 800316c:	2001      	movs	r0, #1
 800316e:	f7ff ff75 	bl	800305c <setWall>
        }
        if (leftWallCheck())
 8003172:	f000 fee9 	bl	8003f48 <leftWallCheck>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <detectWalls+0x76>
        {
            setWall(NORTH);
 800317c:	2000      	movs	r0, #0
 800317e:	f7ff ff6d 	bl	800305c <setWall>
        }
        if (rightWallCheck())
 8003182:	f000 ff05 	bl	8003f90 <rightWallCheck>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d037      	beq.n	80031fc <detectWalls+0xf0>
        {
            setWall(SOUTH);
 800318c:	2002      	movs	r0, #2
 800318e:	f7ff ff65 	bl	800305c <setWall>
        }
        break;
 8003192:	e033      	b.n	80031fc <detectWalls+0xf0>
    case SOUTH:
        if (frontWallCheck())
 8003194:	f000 ff20 	bl	8003fd8 <frontWallCheck>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <detectWalls+0x98>
        {
            setWall(SOUTH);
 800319e:	2002      	movs	r0, #2
 80031a0:	f7ff ff5c 	bl	800305c <setWall>
        }
        if (leftWallCheck())
 80031a4:	f000 fed0 	bl	8003f48 <leftWallCheck>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <detectWalls+0xa8>
        {
            setWall(EAST);
 80031ae:	2001      	movs	r0, #1
 80031b0:	f7ff ff54 	bl	800305c <setWall>
        }
        if (rightWallCheck())
 80031b4:	f000 feec 	bl	8003f90 <rightWallCheck>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d020      	beq.n	8003200 <detectWalls+0xf4>
        {
            setWall(WEST);
 80031be:	2003      	movs	r0, #3
 80031c0:	f7ff ff4c 	bl	800305c <setWall>
        }
        break;
 80031c4:	e01c      	b.n	8003200 <detectWalls+0xf4>
    case WEST:
        if (frontWallCheck())
 80031c6:	f000 ff07 	bl	8003fd8 <frontWallCheck>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <detectWalls+0xca>
        {
            setWall(WEST);
 80031d0:	2003      	movs	r0, #3
 80031d2:	f7ff ff43 	bl	800305c <setWall>
        }
        if (leftWallCheck())
 80031d6:	f000 feb7 	bl	8003f48 <leftWallCheck>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <detectWalls+0xda>
        {
            setWall(SOUTH);
 80031e0:	2002      	movs	r0, #2
 80031e2:	f7ff ff3b 	bl	800305c <setWall>
        }
        if (rightWallCheck())
 80031e6:	f000 fed3 	bl	8003f90 <rightWallCheck>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d009      	beq.n	8003204 <detectWalls+0xf8>
        {
            setWall(NORTH);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7ff ff33 	bl	800305c <setWall>
        }
        break;
 80031f6:	e005      	b.n	8003204 <detectWalls+0xf8>
        break;
 80031f8:	bf00      	nop
 80031fa:	e004      	b.n	8003206 <detectWalls+0xfa>
        break;
 80031fc:	bf00      	nop
 80031fe:	e002      	b.n	8003206 <detectWalls+0xfa>
        break;
 8003200:	bf00      	nop
 8003202:	e000      	b.n	8003206 <detectWalls+0xfa>
        break;
 8003204:	bf00      	nop
    }

    discovered[currPos->row][currPos->col] = 1;		// Mark current cell as discovered
 8003206:	4b08      	ldr	r3, [pc, #32]	@ (8003228 <detectWalls+0x11c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	4b06      	ldr	r3, [pc, #24]	@ (8003228 <detectWalls+0x11c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	4906      	ldr	r1, [pc, #24]	@ (800322c <detectWalls+0x120>)
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	4413      	add	r3, r2
 8003218:	2201      	movs	r2, #1
 800321a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	200013f4 	.word	0x200013f4
 8003228:	200013f0 	.word	0x200013f0
 800322c:	2000223c 	.word	0x2000223c

08003230 <recalculate>:

void recalculate()
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
    queueStart = 0;
 8003236:	4bab      	ldr	r3, [pc, #684]	@ (80034e4 <recalculate+0x2b4>)
 8003238:	2200      	movs	r2, #0
 800323a:	801a      	strh	r2, [r3, #0]
    queueEnd = 0;
 800323c:	4baa      	ldr	r3, [pc, #680]	@ (80034e8 <recalculate+0x2b8>)
 800323e:	2200      	movs	r2, #0
 8003240:	801a      	strh	r2, [r3, #0]

    // Mark all cells as -1, meaning that they have not had their Manhattan set yet
    for (int j = 0; j < 16; j++)
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	e014      	b.n	8003272 <recalculate+0x42>
    {
        for (int i = 0; i < 16; i++)
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	e00b      	b.n	8003266 <recalculate+0x36>
        {
            Manhattans[i][j] = -1;
 800324e:	49a7      	ldr	r1, [pc, #668]	@ (80034ec <recalculate+0x2bc>)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	011a      	lsls	r2, r3, #4
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	4413      	add	r3, r2
 8003258:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800325c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        for (int i = 0; i < 16; i++)
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	3301      	adds	r3, #1
 8003264:	613b      	str	r3, [r7, #16]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	2b0f      	cmp	r3, #15
 800326a:	ddf0      	ble.n	800324e <recalculate+0x1e>
    for (int j = 0; j < 16; j++)
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	3301      	adds	r3, #1
 8003270:	617b      	str	r3, [r7, #20]
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b0f      	cmp	r3, #15
 8003276:	dde7      	ble.n	8003248 <recalculate+0x18>
        }
    }

    if(goToCenter)
 8003278:	4b9d      	ldr	r3, [pc, #628]	@ (80034f0 <recalculate+0x2c0>)
 800327a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d030      	beq.n	80032e4 <recalculate+0xb4>
    {
        // Set middle four manhattan distances to 0, and insert all 4 into queue (set middle as destination)
       Manhattans[7][7] = 0;
 8003282:	4b9a      	ldr	r3, [pc, #616]	@ (80034ec <recalculate+0x2bc>)
 8003284:	2200      	movs	r2, #0
 8003286:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
       Manhattans[7][8] = 0;
 800328a:	4b98      	ldr	r3, [pc, #608]	@ (80034ec <recalculate+0x2bc>)
 800328c:	2200      	movs	r2, #0
 800328e:	f8a3 20f0 	strh.w	r2, [r3, #240]	@ 0xf0
       Manhattans[8][7] = 0;
 8003292:	4b96      	ldr	r3, [pc, #600]	@ (80034ec <recalculate+0x2bc>)
 8003294:	2200      	movs	r2, #0
 8003296:	f8a3 210e 	strh.w	r2, [r3, #270]	@ 0x10e
       Manhattans[8][8] = 0;
 800329a:	4b94      	ldr	r3, [pc, #592]	@ (80034ec <recalculate+0x2bc>)
 800329c:	2200      	movs	r2, #0
 800329e:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
       insertQueue(newCell(7, 7));
 80032a2:	2107      	movs	r1, #7
 80032a4:	2007      	movs	r0, #7
 80032a6:	f7ff fded 	bl	8002e84 <newCell>
 80032aa:	4603      	mov	r3, r0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff fdff 	bl	8002eb0 <insertQueue>
       insertQueue(newCell(7, 8));
 80032b2:	2108      	movs	r1, #8
 80032b4:	2007      	movs	r0, #7
 80032b6:	f7ff fde5 	bl	8002e84 <newCell>
 80032ba:	4603      	mov	r3, r0
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff fdf7 	bl	8002eb0 <insertQueue>
       insertQueue(newCell(8, 7));
 80032c2:	2107      	movs	r1, #7
 80032c4:	2008      	movs	r0, #8
 80032c6:	f7ff fddd 	bl	8002e84 <newCell>
 80032ca:	4603      	mov	r3, r0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff fdef 	bl	8002eb0 <insertQueue>
       insertQueue(newCell(8, 8));
 80032d2:	2108      	movs	r1, #8
 80032d4:	2008      	movs	r0, #8
 80032d6:	f7ff fdd5 	bl	8002e84 <newCell>
 80032da:	4603      	mov	r3, r0
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff fde7 	bl	8002eb0 <insertQueue>
 80032e2:	e0f1      	b.n	80034c8 <recalculate+0x298>
    }

    else
    {
        // Set starting cell to 0, insert starting cell into queue (set start as destination)
        Manhattans[15][0] = 0;
 80032e4:	4b81      	ldr	r3, [pc, #516]	@ (80034ec <recalculate+0x2bc>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	f8a3 21e0 	strh.w	r2, [r3, #480]	@ 0x1e0
        insertQueue(newCell(15, 0));
 80032ec:	2100      	movs	r1, #0
 80032ee:	200f      	movs	r0, #15
 80032f0:	f7ff fdc8 	bl	8002e84 <newCell>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fdda 	bl	8002eb0 <insertQueue>
    }


    //while queue is not empty
    while (queueStart != queueEnd) {
 80032fc:	e0e4      	b.n	80034c8 <recalculate+0x298>

        struct Cell* currElement = queueFront();
 80032fe:	f7ff fe1d 	bl	8002f3c <queueFront>
 8003302:	60f8      	str	r0, [r7, #12]

        int currRow = currElement->row;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60bb      	str	r3, [r7, #8]
        int currCol = currElement->col;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	607b      	str	r3, [r7, #4]

        // For all accessable neighbors with no set Manhattan distance, add cell to queue and set Manhattan to current Manhattan + 1

        //north wall
        if (currRow > 0 && horzWall[currRow][currCol] != 1 && Manhattans[currRow - 1][currCol] == -1) {
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	dd31      	ble.n	800337a <recalculate+0x14a>
 8003316:	4977      	ldr	r1, [pc, #476]	@ (80034f4 <recalculate+0x2c4>)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	011a      	lsls	r2, r3, #4
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4413      	add	r3, r2
 8003320:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d028      	beq.n	800337a <recalculate+0x14a>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	3b01      	subs	r3, #1
 800332c:	496f      	ldr	r1, [pc, #444]	@ (80034ec <recalculate+0x2bc>)
 800332e:	011a      	lsls	r2, r3, #4
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4413      	add	r3, r2
 8003334:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d11d      	bne.n	800337a <recalculate+0x14a>
            Manhattans[currRow - 1][currCol] = Manhattans[currRow][currCol] + 1;
 800333e:	496b      	ldr	r1, [pc, #428]	@ (80034ec <recalculate+0x2bc>)
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	011a      	lsls	r2, r3, #4
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4413      	add	r3, r2
 8003348:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800334c:	b29b      	uxth	r3, r3
 800334e:	3301      	adds	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	3b01      	subs	r3, #1
 8003356:	b210      	sxth	r0, r2
 8003358:	4964      	ldr	r1, [pc, #400]	@ (80034ec <recalculate+0x2bc>)
 800335a:	011a      	lsls	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4413      	add	r3, r2
 8003360:	4602      	mov	r2, r0
 8003362:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow - 1, currCol));
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	3b01      	subs	r3, #1
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff fd89 	bl	8002e84 <newCell>
 8003372:	4603      	mov	r3, r0
 8003374:	4618      	mov	r0, r3
 8003376:	f7ff fd9b 	bl	8002eb0 <insertQueue>
        }
        //east wall
        if (currCol < 15 && vertWall[currRow][currCol + 1] != 1 && Manhattans[currRow][currCol + 1] == -1) {
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b0e      	cmp	r3, #14
 800337e:	dc34      	bgt.n	80033ea <recalculate+0x1ba>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	1c59      	adds	r1, r3, #1
 8003384:	485c      	ldr	r0, [pc, #368]	@ (80034f8 <recalculate+0x2c8>)
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	4613      	mov	r3, r2
 800338a:	011b      	lsls	r3, r3, #4
 800338c:	4413      	add	r3, r2
 800338e:	440b      	add	r3, r1
 8003390:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d028      	beq.n	80033ea <recalculate+0x1ba>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	3301      	adds	r3, #1
 800339c:	4953      	ldr	r1, [pc, #332]	@ (80034ec <recalculate+0x2bc>)
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	0112      	lsls	r2, r2, #4
 80033a2:	4413      	add	r3, r2
 80033a4:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ac:	d11d      	bne.n	80033ea <recalculate+0x1ba>
            Manhattans[currRow][currCol + 1] = Manhattans[currRow][currCol] + 1;
 80033ae:	494f      	ldr	r1, [pc, #316]	@ (80034ec <recalculate+0x2bc>)
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	011a      	lsls	r2, r3, #4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4413      	add	r3, r2
 80033b8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80033bc:	b29b      	uxth	r3, r3
 80033be:	3301      	adds	r3, #1
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3301      	adds	r3, #1
 80033c6:	b210      	sxth	r0, r2
 80033c8:	4948      	ldr	r1, [pc, #288]	@ (80034ec <recalculate+0x2bc>)
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	0112      	lsls	r2, r2, #4
 80033ce:	4413      	add	r3, r2
 80033d0:	4602      	mov	r2, r0
 80033d2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol + 1));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	3301      	adds	r3, #1
 80033da:	4619      	mov	r1, r3
 80033dc:	68b8      	ldr	r0, [r7, #8]
 80033de:	f7ff fd51 	bl	8002e84 <newCell>
 80033e2:	4603      	mov	r3, r0
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fd63 	bl	8002eb0 <insertQueue>
        }
        //south wall
        if (currRow < 15 && horzWall[currRow + 1][currCol] != 1 && Manhattans[currRow + 1][currCol] == -1) {
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b0e      	cmp	r3, #14
 80033ee:	dc32      	bgt.n	8003456 <recalculate+0x226>
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	3301      	adds	r3, #1
 80033f4:	493f      	ldr	r1, [pc, #252]	@ (80034f4 <recalculate+0x2c4>)
 80033f6:	011a      	lsls	r2, r3, #4
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4413      	add	r3, r2
 80033fc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003400:	2b01      	cmp	r3, #1
 8003402:	d028      	beq.n	8003456 <recalculate+0x226>
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	3301      	adds	r3, #1
 8003408:	4938      	ldr	r1, [pc, #224]	@ (80034ec <recalculate+0x2bc>)
 800340a:	011a      	lsls	r2, r3, #4
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d11d      	bne.n	8003456 <recalculate+0x226>
            Manhattans[currRow + 1][currCol] = Manhattans[currRow][currCol] + 1;
 800341a:	4934      	ldr	r1, [pc, #208]	@ (80034ec <recalculate+0x2bc>)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	011a      	lsls	r2, r3, #4
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003428:	b29b      	uxth	r3, r3
 800342a:	3301      	adds	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	3301      	adds	r3, #1
 8003432:	b210      	sxth	r0, r2
 8003434:	492d      	ldr	r1, [pc, #180]	@ (80034ec <recalculate+0x2bc>)
 8003436:	011a      	lsls	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4413      	add	r3, r2
 800343c:	4602      	mov	r2, r0
 800343e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow + 1, currCol));
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fd1b 	bl	8002e84 <newCell>
 800344e:	4603      	mov	r3, r0
 8003450:	4618      	mov	r0, r3
 8003452:	f7ff fd2d 	bl	8002eb0 <insertQueue>
        }
        //west wall
        if (currCol > 0 && vertWall[currRow][currCol] != 1 && Manhattans[currRow][currCol - 1] == -1) {
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	dd33      	ble.n	80034c4 <recalculate+0x294>
 800345c:	4926      	ldr	r1, [pc, #152]	@ (80034f8 <recalculate+0x2c8>)
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	4413      	add	r3, r2
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4413      	add	r3, r2
 800346a:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d028      	beq.n	80034c4 <recalculate+0x294>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3b01      	subs	r3, #1
 8003476:	491d      	ldr	r1, [pc, #116]	@ (80034ec <recalculate+0x2bc>)
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	0112      	lsls	r2, r2, #4
 800347c:	4413      	add	r3, r2
 800347e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d11d      	bne.n	80034c4 <recalculate+0x294>
            Manhattans[currRow][currCol - 1] = Manhattans[currRow][currCol] + 1;
 8003488:	4918      	ldr	r1, [pc, #96]	@ (80034ec <recalculate+0x2bc>)
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	011a      	lsls	r2, r3, #4
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4413      	add	r3, r2
 8003492:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003496:	b29b      	uxth	r3, r3
 8003498:	3301      	adds	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3b01      	subs	r3, #1
 80034a0:	b210      	sxth	r0, r2
 80034a2:	4912      	ldr	r1, [pc, #72]	@ (80034ec <recalculate+0x2bc>)
 80034a4:	68ba      	ldr	r2, [r7, #8]
 80034a6:	0112      	lsls	r2, r2, #4
 80034a8:	4413      	add	r3, r2
 80034aa:	4602      	mov	r2, r0
 80034ac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            insertQueue(newCell(currRow, currCol - 1));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	4619      	mov	r1, r3
 80034b6:	68b8      	ldr	r0, [r7, #8]
 80034b8:	f7ff fce4 	bl	8002e84 <newCell>
 80034bc:	4603      	mov	r3, r0
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fcf6 	bl	8002eb0 <insertQueue>
        }

        // Deletes cell from queue and frees memory
        popQueueFront();
 80034c4:	f7ff fd1c 	bl	8002f00 <popQueueFront>
    while (queueStart != queueEnd) {
 80034c8:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <recalculate+0x2b4>)
 80034ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80034ce:	4b06      	ldr	r3, [pc, #24]	@ (80034e8 <recalculate+0x2b8>)
 80034d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	f47f af12 	bne.w	80032fe <recalculate+0xce>
    }
}
 80034da:	bf00      	nop
 80034dc:	bf00      	nop
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20001df8 	.word	0x20001df8
 80034e8:	20001dfa 	.word	0x20001dfa
 80034ec:	200013f8 	.word	0x200013f8
 80034f0:	20000024 	.word	0x20000024
 80034f4:	20001dfc 	.word	0x20001dfc
 80034f8:	2000201c 	.word	0x2000201c

080034fc <solver>:

Action solver(Algorithm alg) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	71fb      	strb	r3, [r7, #7]
    switch (alg)
 8003506:	79fb      	ldrb	r3, [r7, #7]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d002      	beq.n	8003512 <solver+0x16>
 800350c:	2b01      	cmp	r3, #1
 800350e:	d004      	beq.n	800351a <solver+0x1e>
 8003510:	e007      	b.n	8003522 <solver+0x26>
    {
    case DEAD:
    	return deadReckoning();
 8003512:	f000 f80b 	bl	800352c <deadReckoning>
 8003516:	4603      	mov	r3, r0
 8003518:	e004      	b.n	8003524 <solver+0x28>
    	break;
    case FLOODFILL:
    	return floodFill();
 800351a:	f000 f81b 	bl	8003554 <floodFill>
 800351e:	4603      	mov	r3, r0
 8003520:	e000      	b.n	8003524 <solver+0x28>
    	break;
    default:
    	return FORWARD;
 8003522:	2301      	movs	r3, #1
    }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <deadReckoning>:

Action deadReckoning() {       // The simple left wall following algorithm that they provided
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
	if (!frontWallCheck())
 8003530:	f000 fd52 	bl	8003fd8 <frontWallCheck>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <deadReckoning+0x12>
	{
		return FORWARD;
 800353a:	2301      	movs	r3, #1
 800353c:	e007      	b.n	800354e <deadReckoning+0x22>
	}
	else if (!rightWallCheck())
 800353e:	f000 fd27 	bl	8003f90 <rightWallCheck>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <deadReckoning+0x20>
	{
		return RIGHT;
 8003548:	2302      	movs	r3, #2
 800354a:	e000      	b.n	800354e <deadReckoning+0x22>
	}
	else
	{
		return LEFT;
 800354c:	2300      	movs	r3, #0
	}
}
 800354e:	4618      	mov	r0, r3
 8003550:	bd80      	pop	{r7, pc}
	...

08003554 <floodFill>:

Action floodFill() {
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
    // Initializes all the elements and calculates Manhattan distances
    if (!initialized)
 800355a:	4b9b      	ldr	r3, [pc, #620]	@ (80037c8 <floodFill+0x274>)
 800355c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <floodFill+0x1e>
    {
        initElements();
 8003564:	f7ff fcfc 	bl	8002f60 <initElements>
        recalculate();
 8003568:	f7ff fe62 	bl	8003230 <recalculate>
        initialized = 1;
 800356c:	4b96      	ldr	r3, [pc, #600]	@ (80037c8 <floodFill+0x274>)
 800356e:	2201      	movs	r2, #1
 8003570:	801a      	strh	r2, [r3, #0]
    }

    // Lights up detected walls and adds them to the 2D wall arrays
    detectWalls();
 8003572:	f7ff fdcb 	bl	800310c <detectWalls>

    // Display all Manhattan distances in the API dispaly

    int row = currPos->row;
 8003576:	4b95      	ldr	r3, [pc, #596]	@ (80037cc <floodFill+0x278>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	61bb      	str	r3, [r7, #24]
    int col = currPos->col;
 800357e:	4b93      	ldr	r3, [pc, #588]	@ (80037cc <floodFill+0x278>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	617b      	str	r3, [r7, #20]

    // If goal has already been reached, set new destination to either middle or starting cell
    if (Manhattans[row][col] == 0)
 8003586:	4992      	ldr	r1, [pc, #584]	@ (80037d0 <floodFill+0x27c>)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	011a      	lsls	r2, r3, #4
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	4413      	add	r3, r2
 8003590:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10f      	bne.n	80035b8 <floodFill+0x64>
//		{
//			saveMaze();
//		}
//    	TODO

        if (goToCenter)
 8003598:	4b8e      	ldr	r3, [pc, #568]	@ (80037d4 <floodFill+0x280>)
 800359a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <floodFill+0x56>
            goToCenter = 0; // Destination is now Starting Cell
 80035a2:	4b8c      	ldr	r3, [pc, #560]	@ (80037d4 <floodFill+0x280>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	801a      	strh	r2, [r3, #0]
 80035a8:	e002      	b.n	80035b0 <floodFill+0x5c>
        else
            goToCenter = 1; // Destination is now middle four
 80035aa:	4b8a      	ldr	r3, [pc, #552]	@ (80037d4 <floodFill+0x280>)
 80035ac:	2201      	movs	r2, #1
 80035ae:	801a      	strh	r2, [r3, #0]

        recalculate();
 80035b0:	f7ff fe3e 	bl	8003230 <recalculate>
        return IDLE;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e11c      	b.n	80037f2 <floodFill+0x29e>
    }

    int northBlocked = horzWall[row][col];
 80035b8:	4987      	ldr	r1, [pc, #540]	@ (80037d8 <floodFill+0x284>)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	011a      	lsls	r2, r3, #4
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	4413      	add	r3, r2
 80035c2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80035c6:	613b      	str	r3, [r7, #16]
    int eastBlocked = vertWall[row][col + 1];
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	1c59      	adds	r1, r3, #1
 80035cc:	4883      	ldr	r0, [pc, #524]	@ (80037dc <floodFill+0x288>)
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4613      	mov	r3, r2
 80035d2:	011b      	lsls	r3, r3, #4
 80035d4:	4413      	add	r3, r2
 80035d6:	440b      	add	r3, r1
 80035d8:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80035dc:	60fb      	str	r3, [r7, #12]
    int southBlocked = horzWall[row + 1][col];
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	3301      	adds	r3, #1
 80035e2:	497d      	ldr	r1, [pc, #500]	@ (80037d8 <floodFill+0x284>)
 80035e4:	011a      	lsls	r2, r3, #4
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	4413      	add	r3, r2
 80035ea:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80035ee:	60bb      	str	r3, [r7, #8]
    int westBlocked = vertWall[row][col];
 80035f0:	497a      	ldr	r1, [pc, #488]	@ (80037dc <floodFill+0x288>)
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	4413      	add	r3, r2
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4413      	add	r3, r2
 80035fe:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003602:	607b      	str	r3, [r7, #4]

    // Find next heading
    int nextHead = -1;
 8003604:	f04f 33ff 	mov.w	r3, #4294967295
 8003608:	61fb      	str	r3, [r7, #28]

    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d016      	beq.n	800363e <floodFill+0xea>
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	3b01      	subs	r3, #1
 8003614:	496e      	ldr	r1, [pc, #440]	@ (80037d0 <floodFill+0x27c>)
 8003616:	011a      	lsls	r2, r3, #4
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	4413      	add	r3, r2
 800361c:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003620:	486b      	ldr	r0, [pc, #428]	@ (80037d0 <floodFill+0x27c>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	0119      	lsls	r1, r3, #4
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	440b      	add	r3, r1
 800362a:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800362e:	429a      	cmp	r2, r3
 8003630:	da05      	bge.n	800363e <floodFill+0xea>
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <floodFill+0xea>
        nextHead = NORTH;
 8003638:	2300      	movs	r3, #0
 800363a:	61fb      	str	r3, [r7, #28]
 800363c:	e04c      	b.n	80036d8 <floodFill+0x184>
    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b0f      	cmp	r3, #15
 8003642:	d016      	beq.n	8003672 <floodFill+0x11e>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	3301      	adds	r3, #1
 8003648:	4961      	ldr	r1, [pc, #388]	@ (80037d0 <floodFill+0x27c>)
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	4413      	add	r3, r2
 8003650:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003654:	485e      	ldr	r0, [pc, #376]	@ (80037d0 <floodFill+0x27c>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	0119      	lsls	r1, r3, #4
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	440b      	add	r3, r1
 800365e:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003662:	429a      	cmp	r2, r3
 8003664:	da05      	bge.n	8003672 <floodFill+0x11e>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d102      	bne.n	8003672 <floodFill+0x11e>
        nextHead = EAST;
 800366c:	2301      	movs	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
 8003670:	e032      	b.n	80036d8 <floodFill+0x184>
    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	2b0f      	cmp	r3, #15
 8003676:	d016      	beq.n	80036a6 <floodFill+0x152>
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	3301      	adds	r3, #1
 800367c:	4954      	ldr	r1, [pc, #336]	@ (80037d0 <floodFill+0x27c>)
 800367e:	011a      	lsls	r2, r3, #4
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4413      	add	r3, r2
 8003684:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003688:	4851      	ldr	r0, [pc, #324]	@ (80037d0 <floodFill+0x27c>)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	0119      	lsls	r1, r3, #4
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	440b      	add	r3, r1
 8003692:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003696:	429a      	cmp	r2, r3
 8003698:	da05      	bge.n	80036a6 <floodFill+0x152>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <floodFill+0x152>
        nextHead = SOUTH;
 80036a0:	2302      	movs	r3, #2
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e018      	b.n	80036d8 <floodFill+0x184>
    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d015      	beq.n	80036d8 <floodFill+0x184>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	4947      	ldr	r1, [pc, #284]	@ (80037d0 <floodFill+0x27c>)
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	0112      	lsls	r2, r2, #4
 80036b6:	4413      	add	r3, r2
 80036b8:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80036bc:	4844      	ldr	r0, [pc, #272]	@ (80037d0 <floodFill+0x27c>)
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	0119      	lsls	r1, r3, #4
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	440b      	add	r3, r1
 80036c6:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	da04      	bge.n	80036d8 <floodFill+0x184>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <floodFill+0x184>
        nextHead = WEST;
 80036d4:	2303      	movs	r3, #3
 80036d6:	61fb      	str	r3, [r7, #28]

    // If no path available, then recalculta
    if (nextHead == -1)
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036de:	d103      	bne.n	80036e8 <floodFill+0x194>
    {
        recalculate();
 80036e0:	f7ff fda6 	bl	8003230 <recalculate>
        return IDLE;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e084      	b.n	80037f2 <floodFill+0x29e>
    }

    // If next heading is in same direction, move forward
    if (nextHead == currHead)
 80036e8:	4b3d      	ldr	r3, [pc, #244]	@ (80037e0 <floodFill+0x28c>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d129      	bne.n	8003748 <floodFill+0x1f4>
    {
        switch (currHead)
 80036f4:	4b3a      	ldr	r3, [pc, #232]	@ (80037e0 <floodFill+0x28c>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b03      	cmp	r3, #3
 80036fa:	d823      	bhi.n	8003744 <floodFill+0x1f0>
 80036fc:	a201      	add	r2, pc, #4	@ (adr r2, 8003704 <floodFill+0x1b0>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003715 	.word	0x08003715
 8003708:	08003721 	.word	0x08003721
 800370c:	0800372d 	.word	0x0800372d
 8003710:	08003739 	.word	0x08003739
        {
        case NORTH:
            currPos->row--;
 8003714:	4b2d      	ldr	r3, [pc, #180]	@ (80037cc <floodFill+0x278>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	3a01      	subs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]
            break;
 800371e:	e011      	b.n	8003744 <floodFill+0x1f0>
        case EAST:
            currPos->col++;
 8003720:	4b2a      	ldr	r3, [pc, #168]	@ (80037cc <floodFill+0x278>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	3201      	adds	r2, #1
 8003728:	605a      	str	r2, [r3, #4]
            break;
 800372a:	e00b      	b.n	8003744 <floodFill+0x1f0>
        case SOUTH:
            currPos->row++;
 800372c:	4b27      	ldr	r3, [pc, #156]	@ (80037cc <floodFill+0x278>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	3201      	adds	r2, #1
 8003734:	601a      	str	r2, [r3, #0]
            break;
 8003736:	e005      	b.n	8003744 <floodFill+0x1f0>
        case WEST:
            currPos->col--;
 8003738:	4b24      	ldr	r3, [pc, #144]	@ (80037cc <floodFill+0x278>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	3a01      	subs	r2, #1
 8003740:	605a      	str	r2, [r3, #4]
            break;
 8003742:	bf00      	nop
        }
        return FORWARD;
 8003744:	2301      	movs	r3, #1
 8003746:	e054      	b.n	80037f2 <floodFill+0x29e>
    }

    // If next heading is in opposite direction, turn right
    if ((nextHead - currHead) % 2 == 0)
 8003748:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <floodFill+0x28c>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d10f      	bne.n	800377a <floodFill+0x226>
    {
        if (currHead == WEST)
 800375a:	4b21      	ldr	r3, [pc, #132]	@ (80037e0 <floodFill+0x28c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b03      	cmp	r3, #3
 8003760:	d103      	bne.n	800376a <floodFill+0x216>
            currHead = NORTH;
 8003762:	4b1f      	ldr	r3, [pc, #124]	@ (80037e0 <floodFill+0x28c>)
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
 8003768:	e005      	b.n	8003776 <floodFill+0x222>
        else
            currHead++;
 800376a:	4b1d      	ldr	r3, [pc, #116]	@ (80037e0 <floodFill+0x28c>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	3301      	adds	r3, #1
 8003770:	b2da      	uxtb	r2, r3
 8003772:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <floodFill+0x28c>)
 8003774:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 8003776:	2302      	movs	r3, #2
 8003778:	e03b      	b.n	80037f2 <floodFill+0x29e>
    }

    // If next heading is right, turn right
    if ((nextHead - currHead) == 1 || nextHead - currHead == -3)
 800377a:	4b19      	ldr	r3, [pc, #100]	@ (80037e0 <floodFill+0x28c>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	2b01      	cmp	r3, #1
 8003786:	d007      	beq.n	8003798 <floodFill+0x244>
 8003788:	4b15      	ldr	r3, [pc, #84]	@ (80037e0 <floodFill+0x28c>)
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	f113 0f03 	cmn.w	r3, #3
 8003796:	d10f      	bne.n	80037b8 <floodFill+0x264>
    {
        if (currHead == WEST)
 8003798:	4b11      	ldr	r3, [pc, #68]	@ (80037e0 <floodFill+0x28c>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d103      	bne.n	80037a8 <floodFill+0x254>
            currHead = NORTH;
 80037a0:	4b0f      	ldr	r3, [pc, #60]	@ (80037e0 <floodFill+0x28c>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e005      	b.n	80037b4 <floodFill+0x260>
        else
            currHead++;
 80037a8:	4b0d      	ldr	r3, [pc, #52]	@ (80037e0 <floodFill+0x28c>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <floodFill+0x28c>)
 80037b2:	701a      	strb	r2, [r3, #0]
        return RIGHT;
 80037b4:	2302      	movs	r3, #2
 80037b6:	e01c      	b.n	80037f2 <floodFill+0x29e>
    }

    // else, turn left
    if (currHead == NORTH)
 80037b8:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <floodFill+0x28c>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d111      	bne.n	80037e4 <floodFill+0x290>
        currHead = WEST;
 80037c0:	4b07      	ldr	r3, [pc, #28]	@ (80037e0 <floodFill+0x28c>)
 80037c2:	2203      	movs	r2, #3
 80037c4:	701a      	strb	r2, [r3, #0]
 80037c6:	e013      	b.n	80037f0 <floodFill+0x29c>
 80037c8:	200013ec 	.word	0x200013ec
 80037cc:	200013f0 	.word	0x200013f0
 80037d0:	200013f8 	.word	0x200013f8
 80037d4:	20000024 	.word	0x20000024
 80037d8:	20001dfc 	.word	0x20001dfc
 80037dc:	2000201c 	.word	0x2000201c
 80037e0:	200013f4 	.word	0x200013f4
    else
        currHead--;
 80037e4:	4b05      	ldr	r3, [pc, #20]	@ (80037fc <floodFill+0x2a8>)
 80037e6:	781b      	ldrb	r3, [r3, #0]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	4b03      	ldr	r3, [pc, #12]	@ (80037fc <floodFill+0x2a8>)
 80037ee:	701a      	strb	r2, [r3, #0]
    return LEFT;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3720      	adds	r7, #32
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200013f4 	.word	0x200013f4

08003800 <foresight>:

int foresight() {
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	@ 0x24
 8003804:	af00      	add	r7, sp, #0
	int row = currPos->row;
 8003806:	4b70      	ldr	r3, [pc, #448]	@ (80039c8 <foresight+0x1c8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	61fb      	str	r3, [r7, #28]
	int col = currPos->col;
 800380e:	4b6e      	ldr	r3, [pc, #440]	@ (80039c8 <foresight+0x1c8>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	61bb      	str	r3, [r7, #24]

	int extra_moves = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	617b      	str	r3, [r7, #20]

	while(discovered[row][col] != 0)
 800381a:	e0c3      	b.n	80039a4 <foresight+0x1a4>
	{
	    int northBlocked = horzWall[row][col];
 800381c:	496b      	ldr	r1, [pc, #428]	@ (80039cc <foresight+0x1cc>)
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	011a      	lsls	r2, r3, #4
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	4413      	add	r3, r2
 8003826:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 800382a:	60fb      	str	r3, [r7, #12]
	    int eastBlocked = vertWall[row][col + 1];
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	1c59      	adds	r1, r3, #1
 8003830:	4867      	ldr	r0, [pc, #412]	@ (80039d0 <foresight+0x1d0>)
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	4413      	add	r3, r2
 800383a:	440b      	add	r3, r1
 800383c:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003840:	60bb      	str	r3, [r7, #8]
	    int southBlocked = horzWall[row + 1][col];
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3301      	adds	r3, #1
 8003846:	4961      	ldr	r1, [pc, #388]	@ (80039cc <foresight+0x1cc>)
 8003848:	011a      	lsls	r2, r3, #4
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	4413      	add	r3, r2
 800384e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003852:	607b      	str	r3, [r7, #4]
	    int westBlocked = vertWall[row][col];
 8003854:	495e      	ldr	r1, [pc, #376]	@ (80039d0 <foresight+0x1d0>)
 8003856:	69fa      	ldr	r2, [r7, #28]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	4413      	add	r3, r2
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4413      	add	r3, r2
 8003862:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8003866:	603b      	str	r3, [r7, #0]

	    // Find next heading
	    int nextHead = -1;
 8003868:	f04f 33ff 	mov.w	r3, #4294967295
 800386c:	613b      	str	r3, [r7, #16]

	    if (row != 0 && Manhattans[row - 1][col] < Manhattans[row][col] && !northBlocked)
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d016      	beq.n	80038a2 <foresight+0xa2>
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	3b01      	subs	r3, #1
 8003878:	4956      	ldr	r1, [pc, #344]	@ (80039d4 <foresight+0x1d4>)
 800387a:	011a      	lsls	r2, r3, #4
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	4413      	add	r3, r2
 8003880:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003884:	4853      	ldr	r0, [pc, #332]	@ (80039d4 <foresight+0x1d4>)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	0119      	lsls	r1, r3, #4
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	440b      	add	r3, r1
 800388e:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8003892:	429a      	cmp	r2, r3
 8003894:	da05      	bge.n	80038a2 <foresight+0xa2>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <foresight+0xa2>
	        nextHead = NORTH;
 800389c:	2300      	movs	r3, #0
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	e04c      	b.n	800393c <foresight+0x13c>
	    else if (col != 15 && Manhattans[row][col + 1] < Manhattans[row][col] && !eastBlocked)
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	2b0f      	cmp	r3, #15
 80038a6:	d016      	beq.n	80038d6 <foresight+0xd6>
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	3301      	adds	r3, #1
 80038ac:	4949      	ldr	r1, [pc, #292]	@ (80039d4 <foresight+0x1d4>)
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	0112      	lsls	r2, r2, #4
 80038b2:	4413      	add	r3, r2
 80038b4:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80038b8:	4846      	ldr	r0, [pc, #280]	@ (80039d4 <foresight+0x1d4>)
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	0119      	lsls	r1, r3, #4
 80038be:	69bb      	ldr	r3, [r7, #24]
 80038c0:	440b      	add	r3, r1
 80038c2:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	da05      	bge.n	80038d6 <foresight+0xd6>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <foresight+0xd6>
	        nextHead = EAST;
 80038d0:	2301      	movs	r3, #1
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	e032      	b.n	800393c <foresight+0x13c>
	    else if (row != 15 && Manhattans[row + 1][col] < Manhattans[row][col] && !southBlocked)
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	2b0f      	cmp	r3, #15
 80038da:	d016      	beq.n	800390a <foresight+0x10a>
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	3301      	adds	r3, #1
 80038e0:	493c      	ldr	r1, [pc, #240]	@ (80039d4 <foresight+0x1d4>)
 80038e2:	011a      	lsls	r2, r3, #4
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	4413      	add	r3, r2
 80038e8:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 80038ec:	4839      	ldr	r0, [pc, #228]	@ (80039d4 <foresight+0x1d4>)
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	0119      	lsls	r1, r3, #4
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	440b      	add	r3, r1
 80038f6:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	da05      	bge.n	800390a <foresight+0x10a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <foresight+0x10a>
	        nextHead = SOUTH;
 8003904:	2302      	movs	r3, #2
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	e018      	b.n	800393c <foresight+0x13c>
	    else if (col != 0 && Manhattans[row][col - 1] < Manhattans[row][col] && !westBlocked)
 800390a:	69bb      	ldr	r3, [r7, #24]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d015      	beq.n	800393c <foresight+0x13c>
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	3b01      	subs	r3, #1
 8003914:	492f      	ldr	r1, [pc, #188]	@ (80039d4 <foresight+0x1d4>)
 8003916:	69fa      	ldr	r2, [r7, #28]
 8003918:	0112      	lsls	r2, r2, #4
 800391a:	4413      	add	r3, r2
 800391c:	f931 2013 	ldrsh.w	r2, [r1, r3, lsl #1]
 8003920:	482c      	ldr	r0, [pc, #176]	@ (80039d4 <foresight+0x1d4>)
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	0119      	lsls	r1, r3, #4
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	440b      	add	r3, r1
 800392a:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800392e:	429a      	cmp	r2, r3
 8003930:	da04      	bge.n	800393c <foresight+0x13c>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <foresight+0x13c>
	        nextHead = WEST;
 8003938:	2303      	movs	r3, #3
 800393a:	613b      	str	r3, [r7, #16]

	    if (nextHead != currHead)
 800393c:	4b26      	ldr	r3, [pc, #152]	@ (80039d8 <foresight+0x1d8>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4293      	cmp	r3, r2
 8003946:	d138      	bne.n	80039ba <foresight+0x1ba>
	    	break;

	    extra_moves++;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	3301      	adds	r3, #1
 800394c:	617b      	str	r3, [r7, #20]

		switch (currHead)
 800394e:	4b22      	ldr	r3, [pc, #136]	@ (80039d8 <foresight+0x1d8>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d81a      	bhi.n	800398c <foresight+0x18c>
 8003956:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <foresight+0x15c>)
 8003958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395c:	0800396d 	.word	0x0800396d
 8003960:	08003975 	.word	0x08003975
 8003964:	0800397d 	.word	0x0800397d
 8003968:	08003985 	.word	0x08003985
		{
			case NORTH:
				row--;
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	3b01      	subs	r3, #1
 8003970:	61fb      	str	r3, [r7, #28]
				break;
 8003972:	e00b      	b.n	800398c <foresight+0x18c>
			case EAST:
				col++;
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	3301      	adds	r3, #1
 8003978:	61bb      	str	r3, [r7, #24]
				break;
 800397a:	e007      	b.n	800398c <foresight+0x18c>
			case SOUTH:
				row++;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3301      	adds	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
				break;
 8003982:	e003      	b.n	800398c <foresight+0x18c>
			case WEST:
				col--;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	3b01      	subs	r3, #1
 8003988:	61bb      	str	r3, [r7, #24]
				break;
 800398a:	bf00      	nop
		}
		if (row < 0 || row > 15 || col < 0 || col > 15)
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	2b00      	cmp	r3, #0
 8003990:	db14      	blt.n	80039bc <foresight+0x1bc>
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b0f      	cmp	r3, #15
 8003996:	dc11      	bgt.n	80039bc <foresight+0x1bc>
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	2b00      	cmp	r3, #0
 800399c:	db0e      	blt.n	80039bc <foresight+0x1bc>
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b0f      	cmp	r3, #15
 80039a2:	dc0b      	bgt.n	80039bc <foresight+0x1bc>
	while(discovered[row][col] != 0)
 80039a4:	490d      	ldr	r1, [pc, #52]	@ (80039dc <foresight+0x1dc>)
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	011a      	lsls	r2, r3, #4
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	4413      	add	r3, r2
 80039ae:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f47f af32 	bne.w	800381c <foresight+0x1c>
 80039b8:	e000      	b.n	80039bc <foresight+0x1bc>
	    	break;
 80039ba:	bf00      	nop
			break;
	}

	return extra_moves;
 80039bc:	697b      	ldr	r3, [r7, #20]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3724      	adds	r7, #36	@ 0x24
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr
 80039c8:	200013f0 	.word	0x200013f0
 80039cc:	20001dfc 	.word	0x20001dfc
 80039d0:	2000201c 	.word	0x2000201c
 80039d4:	200013f8 	.word	0x200013f8
 80039d8:	200013f4 	.word	0x200013f4
 80039dc:	2000223c 	.word	0x2000223c

080039e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039e6:	2300      	movs	r3, #0
 80039e8:	607b      	str	r3, [r7, #4]
 80039ea:	4b0f      	ldr	r3, [pc, #60]	@ (8003a28 <HAL_MspInit+0x48>)
 80039ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003a28 <HAL_MspInit+0x48>)
 80039f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003a28 <HAL_MspInit+0x48>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	603b      	str	r3, [r7, #0]
 8003a06:	4b08      	ldr	r3, [pc, #32]	@ (8003a28 <HAL_MspInit+0x48>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0a:	4a07      	ldr	r2, [pc, #28]	@ (8003a28 <HAL_MspInit+0x48>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a12:	4b05      	ldr	r3, [pc, #20]	@ (8003a28 <HAL_MspInit+0x48>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	603b      	str	r3, [r7, #0]
 8003a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bc80      	pop	{r7}
 8003a26:	4770      	bx	lr
 8003a28:	40023800 	.word	0x40023800

08003a2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	@ 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a34:	f107 0314 	add.w	r3, r7, #20
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]
 8003a40:	60da      	str	r2, [r3, #12]
 8003a42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a3c      	ldr	r2, [pc, #240]	@ (8003b3c <HAL_ADC_MspInit+0x110>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d171      	bne.n	8003b32 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	4b3b      	ldr	r3, [pc, #236]	@ (8003b40 <HAL_ADC_MspInit+0x114>)
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	4a3a      	ldr	r2, [pc, #232]	@ (8003b40 <HAL_ADC_MspInit+0x114>)
 8003a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a5e:	4b38      	ldr	r3, [pc, #224]	@ (8003b40 <HAL_ADC_MspInit+0x114>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a66:	613b      	str	r3, [r7, #16]
 8003a68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	4b34      	ldr	r3, [pc, #208]	@ (8003b40 <HAL_ADC_MspInit+0x114>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a72:	4a33      	ldr	r2, [pc, #204]	@ (8003b40 <HAL_ADC_MspInit+0x114>)
 8003a74:	f043 0304 	orr.w	r3, r3, #4
 8003a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a7a:	4b31      	ldr	r3, [pc, #196]	@ (8003b40 <HAL_ADC_MspInit+0x114>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7e:	f003 0304 	and.w	r3, r3, #4
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60bb      	str	r3, [r7, #8]
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b40 <HAL_ADC_MspInit+0x114>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b40 <HAL_ADC_MspInit+0x114>)
 8003a90:	f043 0301 	orr.w	r3, r3, #1
 8003a94:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a96:	4b2a      	ldr	r3, [pc, #168]	@ (8003b40 <HAL_ADC_MspInit+0x114>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
 8003aa0:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aae:	f107 0314 	add.w	r3, r7, #20
 8003ab2:	4619      	mov	r1, r3
 8003ab4:	4823      	ldr	r0, [pc, #140]	@ (8003b44 <HAL_ADC_MspInit+0x118>)
 8003ab6:	f001 fbbf 	bl	8005238 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 8003aba:	2360      	movs	r3, #96	@ 0x60
 8003abc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ac6:	f107 0314 	add.w	r3, r7, #20
 8003aca:	4619      	mov	r1, r3
 8003acc:	481e      	ldr	r0, [pc, #120]	@ (8003b48 <HAL_ADC_MspInit+0x11c>)
 8003ace:	f001 fbb3 	bl	8005238 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b50 <HAL_ADC_MspInit+0x124>)
 8003ad6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ade:	4b1b      	ldr	r3, [pc, #108]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae4:	4b19      	ldr	r3, [pc, #100]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003aea:	4b18      	ldr	r3, [pc, #96]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003aec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003af0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003af2:	4b16      	ldr	r3, [pc, #88]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003af4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003af8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003afa:	4b14      	ldr	r3, [pc, #80]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003afc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003b02:	4b12      	ldr	r3, [pc, #72]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003b04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003b08:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003b0a:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b10:	4b0e      	ldr	r3, [pc, #56]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003b16:	480d      	ldr	r0, [pc, #52]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003b18:	f001 f822 	bl	8004b60 <HAL_DMA_Init>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d001      	beq.n	8003b26 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8003b22:	f7fe fca9 	bl	8002478 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a08      	ldr	r2, [pc, #32]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003b2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b2c:	4a07      	ldr	r2, [pc, #28]	@ (8003b4c <HAL_ADC_MspInit+0x120>)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003b32:	bf00      	nop
 8003b34:	3728      	adds	r7, #40	@ 0x28
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40012000 	.word	0x40012000
 8003b40:	40023800 	.word	0x40023800
 8003b44:	40020800 	.word	0x40020800
 8003b48:	40020000 	.word	0x40020000
 8003b4c:	200000f8 	.word	0x200000f8
 8003b50:	40026410 	.word	0x40026410

08003b54 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	@ 0x28
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a19      	ldr	r2, [pc, #100]	@ (8003bd8 <HAL_I2C_MspInit+0x84>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d12b      	bne.n	8003bce <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	613b      	str	r3, [r7, #16]
 8003b7a:	4b18      	ldr	r3, [pc, #96]	@ (8003bdc <HAL_I2C_MspInit+0x88>)
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b7e:	4a17      	ldr	r2, [pc, #92]	@ (8003bdc <HAL_I2C_MspInit+0x88>)
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <HAL_I2C_MspInit+0x88>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b92:	23c0      	movs	r3, #192	@ 0xc0
 8003b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b96:	2312      	movs	r3, #18
 8003b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ba6:	f107 0314 	add.w	r3, r7, #20
 8003baa:	4619      	mov	r1, r3
 8003bac:	480c      	ldr	r0, [pc, #48]	@ (8003be0 <HAL_I2C_MspInit+0x8c>)
 8003bae:	f001 fb43 	bl	8005238 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <HAL_I2C_MspInit+0x88>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bba:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <HAL_I2C_MspInit+0x88>)
 8003bbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bc2:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_I2C_MspInit+0x88>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003bce:	bf00      	nop
 8003bd0:	3728      	adds	r7, #40	@ 0x28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40005400 	.word	0x40005400
 8003bdc:	40023800 	.word	0x40023800
 8003be0:	40020400 	.word	0x40020400

08003be4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8003c2c <HAL_TIM_PWM_MspInit+0x48>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d115      	bne.n	8003c22 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003c30 <HAL_TIM_PWM_MspInit+0x4c>)
 8003bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8003c30 <HAL_TIM_PWM_MspInit+0x4c>)
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c06:	4b0a      	ldr	r3, [pc, #40]	@ (8003c30 <HAL_TIM_PWM_MspInit+0x4c>)
 8003c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
 8003c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003c12:	2200      	movs	r2, #0
 8003c14:	2100      	movs	r1, #0
 8003c16:	2019      	movs	r0, #25
 8003c18:	f000 ff6b 	bl	8004af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003c1c:	2019      	movs	r0, #25
 8003c1e:	f000 ff84 	bl	8004b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003c22:	bf00      	nop
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40010000 	.word	0x40010000
 8003c30:	40023800 	.word	0x40023800

08003c34 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08c      	sub	sp, #48	@ 0x30
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3c:	f107 031c 	add.w	r3, r7, #28
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	605a      	str	r2, [r3, #4]
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	60da      	str	r2, [r3, #12]
 8003c4a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a32      	ldr	r2, [pc, #200]	@ (8003d1c <HAL_TIM_Encoder_MspInit+0xe8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d12c      	bne.n	8003cb0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	4b31      	ldr	r3, [pc, #196]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	4a30      	ldr	r2, [pc, #192]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c60:	f043 0302 	orr.w	r3, r3, #2
 8003c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c66:	4b2e      	ldr	r3, [pc, #184]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	61bb      	str	r3, [r7, #24]
 8003c70:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	4b2a      	ldr	r3, [pc, #168]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c7a:	4a29      	ldr	r2, [pc, #164]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c7c:	f043 0302 	orr.w	r3, r3, #2
 8003c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c82:	4b27      	ldr	r3, [pc, #156]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8003c8e:	2330      	movs	r3, #48	@ 0x30
 8003c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c92:	2302      	movs	r3, #2
 8003c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c96:	2300      	movs	r3, #0
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca2:	f107 031c 	add.w	r3, r7, #28
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	481e      	ldr	r0, [pc, #120]	@ (8003d24 <HAL_TIM_Encoder_MspInit+0xf0>)
 8003caa:	f001 fac5 	bl	8005238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003cae:	e030      	b.n	8003d12 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a1c      	ldr	r2, [pc, #112]	@ (8003d28 <HAL_TIM_Encoder_MspInit+0xf4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d12b      	bne.n	8003d12 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	4b18      	ldr	r3, [pc, #96]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	4a17      	ldr	r2, [pc, #92]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cca:	4b15      	ldr	r3, [pc, #84]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60fb      	str	r3, [r7, #12]
 8003cda:	4b11      	ldr	r3, [pc, #68]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	4a10      	ldr	r2, [pc, #64]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ce0:	f043 0304 	orr.w	r3, r3, #4
 8003ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d20 <HAL_TIM_Encoder_MspInit+0xec>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	f003 0304 	and.w	r3, r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8003cf2:	23c0      	movs	r3, #192	@ 0xc0
 8003cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003d02:	2303      	movs	r3, #3
 8003d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d06:	f107 031c 	add.w	r3, r7, #28
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4807      	ldr	r0, [pc, #28]	@ (8003d2c <HAL_TIM_Encoder_MspInit+0xf8>)
 8003d0e:	f001 fa93 	bl	8005238 <HAL_GPIO_Init>
}
 8003d12:	bf00      	nop
 8003d14:	3730      	adds	r7, #48	@ 0x30
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40023800 	.word	0x40023800
 8003d24:	40020400 	.word	0x40020400
 8003d28:	40010400 	.word	0x40010400
 8003d2c:	40020800 	.word	0x40020800

08003d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1c      	ldr	r2, [pc, #112]	@ (8003db0 <HAL_TIM_Base_MspInit+0x80>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d116      	bne.n	8003d70 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <HAL_TIM_Base_MspInit+0x84>)
 8003d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8003db4 <HAL_TIM_Base_MspInit+0x84>)
 8003d4c:	f043 0320 	orr.w	r3, r3, #32
 8003d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d52:	4b18      	ldr	r3, [pc, #96]	@ (8003db4 <HAL_TIM_Base_MspInit+0x84>)
 8003d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2100      	movs	r1, #0
 8003d62:	2037      	movs	r0, #55	@ 0x37
 8003d64:	f000 fec5 	bl	8004af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003d68:	2037      	movs	r0, #55	@ 0x37
 8003d6a:	f000 fede 	bl	8004b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003d6e:	e01a      	b.n	8003da6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a10      	ldr	r2, [pc, #64]	@ (8003db8 <HAL_TIM_Base_MspInit+0x88>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d115      	bne.n	8003da6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003db4 <HAL_TIM_Base_MspInit+0x84>)
 8003d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d82:	4a0c      	ldr	r2, [pc, #48]	@ (8003db4 <HAL_TIM_Base_MspInit+0x84>)
 8003d84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d88:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <HAL_TIM_Base_MspInit+0x84>)
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	60bb      	str	r3, [r7, #8]
 8003d94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003d96:	2200      	movs	r2, #0
 8003d98:	2100      	movs	r1, #0
 8003d9a:	2019      	movs	r0, #25
 8003d9c:	f000 fea9 	bl	8004af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003da0:	2019      	movs	r0, #25
 8003da2:	f000 fec2 	bl	8004b2a <HAL_NVIC_EnableIRQ>
}
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40001400 	.word	0x40001400
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40014400 	.word	0x40014400

08003dbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	f107 030c 	add.w	r3, r7, #12
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a12      	ldr	r2, [pc, #72]	@ (8003e24 <HAL_TIM_MspPostInit+0x68>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d11e      	bne.n	8003e1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	4b11      	ldr	r3, [pc, #68]	@ (8003e28 <HAL_TIM_MspPostInit+0x6c>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de6:	4a10      	ldr	r2, [pc, #64]	@ (8003e28 <HAL_TIM_MspPostInit+0x6c>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dee:	4b0e      	ldr	r3, [pc, #56]	@ (8003e28 <HAL_TIM_MspPostInit+0x6c>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	60bb      	str	r3, [r7, #8]
 8003df8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8003dfa:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003dfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e00:	2302      	movs	r3, #2
 8003e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e10:	f107 030c 	add.w	r3, r7, #12
 8003e14:	4619      	mov	r1, r3
 8003e16:	4805      	ldr	r0, [pc, #20]	@ (8003e2c <HAL_TIM_MspPostInit+0x70>)
 8003e18:	f001 fa0e 	bl	8005238 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e1c:	bf00      	nop
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40010000 	.word	0x40010000
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	40020000 	.word	0x40020000

08003e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e34:	bf00      	nop
 8003e36:	e7fd      	b.n	8003e34 <NMI_Handler+0x4>

08003e38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <HardFault_Handler+0x4>

08003e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e44:	bf00      	nop
 8003e46:	e7fd      	b.n	8003e44 <MemManage_Handler+0x4>

08003e48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e4c:	bf00      	nop
 8003e4e:	e7fd      	b.n	8003e4c <BusFault_Handler+0x4>

08003e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e54:	bf00      	nop
 8003e56:	e7fd      	b.n	8003e54 <UsageFault_Handler+0x4>

08003e58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bc80      	pop	{r7}
 8003e6e:	4770      	bx	lr

08003e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr

08003e7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e80:	f000 f968 	bl	8004154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e84:	bf00      	nop
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003e8c:	4803      	ldr	r0, [pc, #12]	@ (8003e9c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003e8e:	f003 fc95 	bl	80077bc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8003e92:	4803      	ldr	r0, [pc, #12]	@ (8003ea0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8003e94:	f003 fc92 	bl	80077bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003e98:	bf00      	nop
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	200001ac 	.word	0x200001ac
 8003ea0:	200002cc 	.word	0x200002cc

08003ea4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ea8:	4803      	ldr	r0, [pc, #12]	@ (8003eb8 <TIM7_IRQHandler+0x14>)
 8003eaa:	f003 fc87 	bl	80077bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  interruptRoutine();
 8003eae:	f7fd fd47 	bl	8001940 <interruptRoutine>
  /* USER CODE END TIM7_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	2000023c 	.word	0x2000023c

08003ebc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ec0:	4802      	ldr	r0, [pc, #8]	@ (8003ecc <DMA2_Stream0_IRQHandler+0x10>)
 8003ec2:	f000 ff53 	bl	8004d6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	200000f8 	.word	0x200000f8

08003ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ed8:	4a14      	ldr	r2, [pc, #80]	@ (8003f2c <_sbrk+0x5c>)
 8003eda:	4b15      	ldr	r3, [pc, #84]	@ (8003f30 <_sbrk+0x60>)
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee4:	4b13      	ldr	r3, [pc, #76]	@ (8003f34 <_sbrk+0x64>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eec:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <_sbrk+0x64>)
 8003eee:	4a12      	ldr	r2, [pc, #72]	@ (8003f38 <_sbrk+0x68>)
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ef2:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <_sbrk+0x64>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d207      	bcs.n	8003f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f00:	f004 fa6a 	bl	80083d8 <__errno>
 8003f04:	4603      	mov	r3, r0
 8003f06:	220c      	movs	r2, #12
 8003f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	e009      	b.n	8003f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f10:	4b08      	ldr	r3, [pc, #32]	@ (8003f34 <_sbrk+0x64>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f16:	4b07      	ldr	r3, [pc, #28]	@ (8003f34 <_sbrk+0x64>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	4a05      	ldr	r2, [pc, #20]	@ (8003f34 <_sbrk+0x64>)
 8003f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f22:	68fb      	ldr	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20020000 	.word	0x20020000
 8003f30:	00000400 	.word	0x00000400
 8003f34:	2000243c 	.word	0x2000243c
 8003f38:	20002598 	.word	0x20002598

08003f3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bc80      	pop	{r7}
 8003f46:	4770      	bx	lr

08003f48 <leftWallCheck>:

void setLeftWall(int wall) { left_wall_threshold = wall; }
void setRightWall(int wall) { right_wall_threshold = wall; }
void setFrontWall(int wall) { front_wall_threshold = wall; }

int16_t leftWallCheck() {
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	af00      	add	r7, sp, #0
	if (ir_left > left_wall_threshold) {
 8003f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <leftWallCheck+0x3c>)
 8003f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc fec0 	bl	8000cd8 <__aeabi_i2f>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8003f88 <leftWallCheck+0x40>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4610      	mov	r0, r2
 8003f62:	f7fd f8ab 	bl	80010bc <__aeabi_fcmplt>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <leftWallCheck+0x2c>
		left_wall = 1;
 8003f6c:	4b07      	ldr	r3, [pc, #28]	@ (8003f8c <leftWallCheck+0x44>)
 8003f6e:	2201      	movs	r2, #1
 8003f70:	801a      	strh	r2, [r3, #0]
 8003f72:	e002      	b.n	8003f7a <leftWallCheck+0x32>
	}
	else {
		left_wall = 0;
 8003f74:	4b05      	ldr	r3, [pc, #20]	@ (8003f8c <leftWallCheck+0x44>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	801a      	strh	r2, [r3, #0]
	}
	return left_wall;
 8003f7a:	4b04      	ldr	r3, [pc, #16]	@ (8003f8c <leftWallCheck+0x44>)
 8003f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	2000002c 	.word	0x2000002c
 8003f88:	20000320 	.word	0x20000320
 8003f8c:	20002440 	.word	0x20002440

08003f90 <rightWallCheck>:

int16_t rightWallCheck() {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
	if (ir_right > right_wall_threshold) {
 8003f94:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <rightWallCheck+0x3c>)
 8003f96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc fe9c 	bl	8000cd8 <__aeabi_i2f>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <rightWallCheck+0x40>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4610      	mov	r0, r2
 8003faa:	f7fd f887 	bl	80010bc <__aeabi_fcmplt>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <rightWallCheck+0x2c>
		right_wall = 1;
 8003fb4:	4b07      	ldr	r3, [pc, #28]	@ (8003fd4 <rightWallCheck+0x44>)
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	801a      	strh	r2, [r3, #0]
 8003fba:	e002      	b.n	8003fc2 <rightWallCheck+0x32>
	}
	else {
		right_wall = 0;
 8003fbc:	4b05      	ldr	r3, [pc, #20]	@ (8003fd4 <rightWallCheck+0x44>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	801a      	strh	r2, [r3, #0]
	}
	return right_wall;
 8003fc2:	4b04      	ldr	r3, [pc, #16]	@ (8003fd4 <rightWallCheck+0x44>)
 8003fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	2000002e 	.word	0x2000002e
 8003fd0:	2000032c 	.word	0x2000032c
 8003fd4:	20002442 	.word	0x20002442

08003fd8 <frontWallCheck>:

int16_t frontWallCheck() {
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	af00      	add	r7, sp, #0
	if (ir_front_right > front_wall_threshold) {
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8004014 <frontWallCheck+0x3c>)
 8003fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fe78 	bl	8000cd8 <__aeabi_i2f>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <frontWallCheck+0x40>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4619      	mov	r1, r3
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	f7fd f863 	bl	80010bc <__aeabi_fcmplt>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <frontWallCheck+0x2c>
		front_wall = 1;
 8003ffc:	4b07      	ldr	r3, [pc, #28]	@ (800401c <frontWallCheck+0x44>)
 8003ffe:	2201      	movs	r2, #1
 8004000:	801a      	strh	r2, [r3, #0]
 8004002:	e002      	b.n	800400a <frontWallCheck+0x32>
	}
	else {
		front_wall = 0;
 8004004:	4b05      	ldr	r3, [pc, #20]	@ (800401c <frontWallCheck+0x44>)
 8004006:	2200      	movs	r2, #0
 8004008:	801a      	strh	r2, [r3, #0]
	}
	return front_wall;
 800400a:	4b04      	ldr	r3, [pc, #16]	@ (800401c <frontWallCheck+0x44>)
 800400c:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004010:	4618      	mov	r0, r3
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20000030 	.word	0x20000030
 8004018:	20000328 	.word	0x20000328
 800401c:	20002444 	.word	0x20002444

08004020 <sign>:

int16_t sign(float x) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
	if (x > 0)
 8004028:	f04f 0100 	mov.w	r1, #0
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7fd f863 	bl	80010f8 <__aeabi_fcmpgt>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <sign+0x1c>
	{
		return 1;
 8004038:	2301      	movs	r3, #1
 800403a:	e00b      	b.n	8004054 <sign+0x34>
	}
	else if (x < 0)
 800403c:	f04f 0100 	mov.w	r1, #0
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fd f83b 	bl	80010bc <__aeabi_fcmplt>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <sign+0x32>
	{
		return -1;
 800404c:	f04f 33ff 	mov.w	r3, #4294967295
 8004050:	e000      	b.n	8004054 <sign+0x34>
	}
	else
	{
		return 0;
 8004052:	2300      	movs	r3, #0
	}
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800405c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004094 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8004060:	f7ff ff6c 	bl	8003f3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004064:	480c      	ldr	r0, [pc, #48]	@ (8004098 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004066:	490d      	ldr	r1, [pc, #52]	@ (800409c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004068:	4a0d      	ldr	r2, [pc, #52]	@ (80040a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800406a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800406c:	e002      	b.n	8004074 <LoopCopyDataInit>

0800406e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800406e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004070:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004072:	3304      	adds	r3, #4

08004074 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004074:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004076:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004078:	d3f9      	bcc.n	800406e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800407a:	4a0a      	ldr	r2, [pc, #40]	@ (80040a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800407c:	4c0a      	ldr	r4, [pc, #40]	@ (80040a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800407e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004080:	e001      	b.n	8004086 <LoopFillZerobss>

08004082 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004082:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004084:	3204      	adds	r2, #4

08004086 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004086:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004088:	d3fb      	bcc.n	8004082 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800408a:	f004 f9ab 	bl	80083e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800408e:	f7fd fcf9 	bl	8001a84 <main>
  bx  lr    
 8004092:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004094:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004098:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800409c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80040a0:	08008508 	.word	0x08008508
  ldr r2, =_sbss
 80040a4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80040a8:	20002594 	.word	0x20002594

080040ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040ac:	e7fe      	b.n	80040ac <ADC_IRQHandler>
	...

080040b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040b4:	4b0e      	ldr	r3, [pc, #56]	@ (80040f0 <HAL_Init+0x40>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0d      	ldr	r2, [pc, #52]	@ (80040f0 <HAL_Init+0x40>)
 80040ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_Init+0x40>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a0a      	ldr	r2, [pc, #40]	@ (80040f0 <HAL_Init+0x40>)
 80040c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040cc:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <HAL_Init+0x40>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a07      	ldr	r2, [pc, #28]	@ (80040f0 <HAL_Init+0x40>)
 80040d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040d8:	2003      	movs	r0, #3
 80040da:	f000 fcff 	bl	8004adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040de:	200f      	movs	r0, #15
 80040e0:	f000 f808 	bl	80040f4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80040e4:	f7ff fc7c 	bl	80039e0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40023c00 	.word	0x40023c00

080040f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040fc:	4b12      	ldr	r3, [pc, #72]	@ (8004148 <HAL_InitTick+0x54>)
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	4b12      	ldr	r3, [pc, #72]	@ (800414c <HAL_InitTick+0x58>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	4619      	mov	r1, r3
 8004106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800410a:	fbb3 f3f1 	udiv	r3, r3, r1
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fd17 	bl	8004b46 <HAL_SYSTICK_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e00e      	b.n	8004140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d80a      	bhi.n	800413e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004128:	2200      	movs	r2, #0
 800412a:	6879      	ldr	r1, [r7, #4]
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	f000 fcdf 	bl	8004af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004134:	4a06      	ldr	r2, [pc, #24]	@ (8004150 <HAL_InitTick+0x5c>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
 800413c:	e000      	b.n	8004140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000028 	.word	0x20000028
 800414c:	20000038 	.word	0x20000038
 8004150:	20000034 	.word	0x20000034

08004154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004158:	4b05      	ldr	r3, [pc, #20]	@ (8004170 <HAL_IncTick+0x1c>)
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	461a      	mov	r2, r3
 800415e:	4b05      	ldr	r3, [pc, #20]	@ (8004174 <HAL_IncTick+0x20>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4413      	add	r3, r2
 8004164:	4a03      	ldr	r2, [pc, #12]	@ (8004174 <HAL_IncTick+0x20>)
 8004166:	6013      	str	r3, [r2, #0]
}
 8004168:	bf00      	nop
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	20000038 	.word	0x20000038
 8004174:	20002448 	.word	0x20002448

08004178 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  return uwTick;
 800417c:	4b02      	ldr	r3, [pc, #8]	@ (8004188 <HAL_GetTick+0x10>)
 800417e:	681b      	ldr	r3, [r3, #0]
}
 8004180:	4618      	mov	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	bc80      	pop	{r7}
 8004186:	4770      	bx	lr
 8004188:	20002448 	.word	0x20002448

0800418c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e033      	b.n	800420a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d109      	bne.n	80041be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff fc3e 	bl	8003a2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d118      	bne.n	80041fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ce:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80041d2:	f023 0302 	bic.w	r3, r3, #2
 80041d6:	f043 0202 	orr.w	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 fa28 	bl	8004634 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	f023 0303 	bic.w	r3, r3, #3
 80041f2:	f043 0201 	orr.w	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80041fa:	e001      	b.n	8004200 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <HAL_ADC_Start_DMA+0x1e>
 800422e:	2302      	movs	r3, #2
 8004230:	e0bc      	b.n	80043ac <HAL_ADC_Start_DMA+0x198>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d018      	beq.n	800427a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689a      	ldr	r2, [r3, #8]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004258:	4b56      	ldr	r3, [pc, #344]	@ (80043b4 <HAL_ADC_Start_DMA+0x1a0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a56      	ldr	r2, [pc, #344]	@ (80043b8 <HAL_ADC_Start_DMA+0x1a4>)
 800425e:	fba2 2303 	umull	r2, r3, r2, r3
 8004262:	0c9a      	lsrs	r2, r3, #18
 8004264:	4613      	mov	r3, r2
 8004266:	005b      	lsls	r3, r3, #1
 8004268:	4413      	add	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 800426c:	e002      	b.n	8004274 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	3b01      	subs	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
    while(counter != 0U)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1f9      	bne.n	800426e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 0301 	and.w	r3, r3, #1
 8004284:	2b01      	cmp	r3, #1
 8004286:	f040 8084 	bne.w	8004392 <HAL_ADC_Start_DMA+0x17e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d007      	beq.n	80042bc <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80042b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80042c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c8:	d106      	bne.n	80042d8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ce:	f023 0206 	bic.w	r2, r3, #6
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	645a      	str	r2, [r3, #68]	@ 0x44
 80042d6:	e002      	b.n	80042de <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ea:	4a34      	ldr	r2, [pc, #208]	@ (80043bc <HAL_ADC_Start_DMA+0x1a8>)
 80042ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042f2:	4a33      	ldr	r2, [pc, #204]	@ (80043c0 <HAL_ADC_Start_DMA+0x1ac>)
 80042f4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042fa:	4a32      	ldr	r2, [pc, #200]	@ (80043c4 <HAL_ADC_Start_DMA+0x1b0>)
 80042fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8004306:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8004316:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004326:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	334c      	adds	r3, #76	@ 0x4c
 8004332:	4619      	mov	r1, r3
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f000 fcc0 	bl	8004cbc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800433c:	4b22      	ldr	r3, [pc, #136]	@ (80043c8 <HAL_ADC_Start_DMA+0x1b4>)
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10f      	bne.n	8004368 <HAL_ADC_Start_DMA+0x154>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d129      	bne.n	80043aa <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8004364:	609a      	str	r2, [r3, #8]
 8004366:	e020      	b.n	80043aa <HAL_ADC_Start_DMA+0x196>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a17      	ldr	r2, [pc, #92]	@ (80043cc <HAL_ADC_Start_DMA+0x1b8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d11b      	bne.n	80043aa <HAL_ADC_Start_DMA+0x196>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d114      	bne.n	80043aa <HAL_ADC_Start_DMA+0x196>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	e00b      	b.n	80043aa <HAL_ADC_Start_DMA+0x196>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	f043 0210 	orr.w	r2, r3, #16
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043a2:	f043 0201 	orr.w	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000028 	.word	0x20000028
 80043b8:	431bde83 	.word	0x431bde83
 80043bc:	08004841 	.word	0x08004841
 80043c0:	080048fb 	.word	0x080048fb
 80043c4:	08004917 	.word	0x08004917
 80043c8:	40012300 	.word	0x40012300
 80043cc:	40012000 	.word	0x40012000

080043d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80043d8:	bf00      	nop
 80043da:	370c      	adds	r7, #12
 80043dc:	46bd      	mov	sp, r7
 80043de:	bc80      	pop	{r7}
 80043e0:	4770      	bx	lr

080043e2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bc80      	pop	{r7}
 80043f2:	4770      	bx	lr

080043f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80043fe:	2300      	movs	r3, #0
 8004400:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_ADC_ConfigChannel+0x1c>
 800440c:	2302      	movs	r3, #2
 800440e:	e103      	b.n	8004618 <HAL_ADC_ConfigChannel+0x224>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b09      	cmp	r3, #9
 800441e:	d925      	bls.n	800446c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	68d9      	ldr	r1, [r3, #12]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	4613      	mov	r3, r2
 8004430:	005b      	lsls	r3, r3, #1
 8004432:	4413      	add	r3, r2
 8004434:	3b1e      	subs	r3, #30
 8004436:	2207      	movs	r2, #7
 8004438:	fa02 f303 	lsl.w	r3, r2, r3
 800443c:	43da      	mvns	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	400a      	ands	r2, r1
 8004444:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68d9      	ldr	r1, [r3, #12]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	b29b      	uxth	r3, r3
 8004456:	4618      	mov	r0, r3
 8004458:	4603      	mov	r3, r0
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4403      	add	r3, r0
 800445e:	3b1e      	subs	r3, #30
 8004460:	409a      	lsls	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	e022      	b.n	80044b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6919      	ldr	r1, [r3, #16]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	b29b      	uxth	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	4613      	mov	r3, r2
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	4413      	add	r3, r2
 8004480:	2207      	movs	r2, #7
 8004482:	fa02 f303 	lsl.w	r3, r2, r3
 8004486:	43da      	mvns	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	400a      	ands	r2, r1
 800448e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	6919      	ldr	r1, [r3, #16]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	4618      	mov	r0, r3
 80044a2:	4603      	mov	r3, r0
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4403      	add	r3, r0
 80044a8:	409a      	lsls	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b06      	cmp	r3, #6
 80044b8:	d824      	bhi.n	8004504 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685a      	ldr	r2, [r3, #4]
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	3b05      	subs	r3, #5
 80044cc:	221f      	movs	r2, #31
 80044ce:	fa02 f303 	lsl.w	r3, r2, r3
 80044d2:	43da      	mvns	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	400a      	ands	r2, r1
 80044da:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	4618      	mov	r0, r3
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	3b05      	subs	r3, #5
 80044f6:	fa00 f203 	lsl.w	r2, r0, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	635a      	str	r2, [r3, #52]	@ 0x34
 8004502:	e04c      	b.n	800459e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b0c      	cmp	r3, #12
 800450a:	d824      	bhi.n	8004556 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	3b23      	subs	r3, #35	@ 0x23
 800451e:	221f      	movs	r2, #31
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43da      	mvns	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	400a      	ands	r2, r1
 800452c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	b29b      	uxth	r3, r3
 800453a:	4618      	mov	r0, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4413      	add	r3, r2
 8004546:	3b23      	subs	r3, #35	@ 0x23
 8004548:	fa00 f203 	lsl.w	r2, r0, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	430a      	orrs	r2, r1
 8004552:	631a      	str	r2, [r3, #48]	@ 0x30
 8004554:	e023      	b.n	800459e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	4613      	mov	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4413      	add	r3, r2
 8004566:	3b41      	subs	r3, #65	@ 0x41
 8004568:	221f      	movs	r2, #31
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43da      	mvns	r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	400a      	ands	r2, r1
 8004576:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	b29b      	uxth	r3, r3
 8004584:	4618      	mov	r0, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	3b41      	subs	r3, #65	@ 0x41
 8004592:	fa00 f203 	lsl.w	r2, r0, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a20      	ldr	r2, [pc, #128]	@ (8004624 <HAL_ADC_ConfigChannel+0x230>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d109      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x1c8>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b12      	cmp	r3, #18
 80045ae:	d105      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80045b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <HAL_ADC_ConfigChannel+0x234>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004628 <HAL_ADC_ConfigChannel+0x234>)
 80045b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045ba:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a18      	ldr	r2, [pc, #96]	@ (8004624 <HAL_ADC_ConfigChannel+0x230>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d123      	bne.n	800460e <HAL_ADC_ConfigChannel+0x21a>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d003      	beq.n	80045d6 <HAL_ADC_ConfigChannel+0x1e2>
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b11      	cmp	r3, #17
 80045d4:	d11b      	bne.n	800460e <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80045d6:	4b14      	ldr	r3, [pc, #80]	@ (8004628 <HAL_ADC_ConfigChannel+0x234>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4a13      	ldr	r2, [pc, #76]	@ (8004628 <HAL_ADC_ConfigChannel+0x234>)
 80045dc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80045e0:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b10      	cmp	r3, #16
 80045e8:	d111      	bne.n	800460e <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80045ea:	4b10      	ldr	r3, [pc, #64]	@ (800462c <HAL_ADC_ConfigChannel+0x238>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a10      	ldr	r2, [pc, #64]	@ (8004630 <HAL_ADC_ConfigChannel+0x23c>)
 80045f0:	fba2 2303 	umull	r2, r3, r2, r3
 80045f4:	0c9a      	lsrs	r2, r3, #18
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004600:	e002      	b.n	8004608 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	3b01      	subs	r3, #1
 8004606:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f9      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40012000 	.word	0x40012000
 8004628:	40012300 	.word	0x40012300
 800462c:	20000028 	.word	0x20000028
 8004630:	431bde83 	.word	0x431bde83

08004634 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800463c:	4b7e      	ldr	r3, [pc, #504]	@ (8004838 <ADC_Init+0x204>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4a7d      	ldr	r2, [pc, #500]	@ (8004838 <ADC_Init+0x204>)
 8004642:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004646:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004648:	4b7b      	ldr	r3, [pc, #492]	@ (8004838 <ADC_Init+0x204>)
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	4979      	ldr	r1, [pc, #484]	@ (8004838 <ADC_Init+0x204>)
 8004652:	4313      	orrs	r3, r2
 8004654:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	021a      	lsls	r2, r3, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004688:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6899      	ldr	r1, [r3, #8]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	4a5e      	ldr	r2, [pc, #376]	@ (800483c <ADC_Init+0x208>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d022      	beq.n	800470e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80046d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6899      	ldr	r1, [r3, #8]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80046f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6899      	ldr	r1, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	609a      	str	r2, [r3, #8]
 800470c:	e00f      	b.n	800472e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689a      	ldr	r2, [r3, #8]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800471c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	689a      	ldr	r2, [r3, #8]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800472c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	689a      	ldr	r2, [r3, #8]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0202 	bic.w	r2, r2, #2
 800473c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6899      	ldr	r1, [r3, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7e1b      	ldrb	r3, [r3, #24]
 8004748:	005a      	lsls	r2, r3, #1
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	430a      	orrs	r2, r1
 8004750:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d027      	beq.n	80047ac <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	685a      	ldr	r2, [r3, #4]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800476a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800477a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004780:	3b01      	subs	r3, #1
 8004782:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8004786:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	fa92 f2a2 	rbit	r2, r2
 800478e:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	fab2 f282 	clz	r2, r2
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	fa03 f102 	lsl.w	r1, r3, r2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685a      	ldr	r2, [r3, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
 80047aa:	e007      	b.n	80047bc <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80047ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	051a      	lsls	r2, r3, #20
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689a      	ldr	r2, [r3, #8]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80047f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6899      	ldr	r1, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047fe:	025a      	lsls	r2, r3, #9
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	430a      	orrs	r2, r1
 8004806:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004816:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6899      	ldr	r1, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	695b      	ldr	r3, [r3, #20]
 8004822:	029a      	lsls	r2, r3, #10
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]
}
 800482c:	bf00      	nop
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	bc80      	pop	{r7}
 8004834:	4770      	bx	lr
 8004836:	bf00      	nop
 8004838:	40012300 	.word	0x40012300
 800483c:	0f000001 	.word	0x0f000001

08004840 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004852:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004856:	2b00      	cmp	r3, #0
 8004858:	d13c      	bne.n	80048d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F2, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d12b      	bne.n	80048cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004878:	2b00      	cmp	r3, #0
 800487a:	d127      	bne.n	80048cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004886:	2b00      	cmp	r3, #0
 8004888:	d006      	beq.n	8004898 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004894:	2b00      	cmp	r3, #0
 8004896:	d119      	bne.n	80048cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f022 0220 	bic.w	r2, r2, #32
 80048a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c4:	f043 0201 	orr.w	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f7fd fd51 	bl	8002374 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80048d2:	e00e      	b.n	80048f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	f003 0310 	and.w	r3, r3, #16
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f7ff fd7e 	bl	80043e2 <HAL_ADC_ErrorCallback>
}
 80048e6:	e004      	b.n	80048f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	4798      	blx	r3
}
 80048f2:	bf00      	nop
 80048f4:	3710      	adds	r7, #16
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}

080048fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80048fa:	b580      	push	{r7, lr}
 80048fc:	b084      	sub	sp, #16
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004906:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f7ff fd61 	bl	80043d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004922:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2240      	movs	r2, #64	@ 0x40
 8004928:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	f043 0204 	orr.w	r2, r3, #4
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	645a      	str	r2, [r3, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7ff fd53 	bl	80043e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004954:	4b0c      	ldr	r3, [pc, #48]	@ (8004988 <__NVIC_SetPriorityGrouping+0x44>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800495a:	68ba      	ldr	r2, [r7, #8]
 800495c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004960:	4013      	ands	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800496c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004976:	4a04      	ldr	r2, [pc, #16]	@ (8004988 <__NVIC_SetPriorityGrouping+0x44>)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	60d3      	str	r3, [r2, #12]
}
 800497c:	bf00      	nop
 800497e:	3714      	adds	r7, #20
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004990:	4b04      	ldr	r3, [pc, #16]	@ (80049a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	0a1b      	lsrs	r3, r3, #8
 8004996:	f003 0307 	and.w	r3, r3, #7
}
 800499a:	4618      	mov	r0, r3
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	e000ed00 	.word	0xe000ed00

080049a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	db0b      	blt.n	80049d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049ba:	79fb      	ldrb	r3, [r7, #7]
 80049bc:	f003 021f 	and.w	r2, r3, #31
 80049c0:	4906      	ldr	r1, [pc, #24]	@ (80049dc <__NVIC_EnableIRQ+0x34>)
 80049c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	2001      	movs	r0, #1
 80049ca:	fa00 f202 	lsl.w	r2, r0, r2
 80049ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	e000e100 	.word	0xe000e100

080049e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	6039      	str	r1, [r7, #0]
 80049ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	db0a      	blt.n	8004a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	490c      	ldr	r1, [pc, #48]	@ (8004a2c <__NVIC_SetPriority+0x4c>)
 80049fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049fe:	0112      	lsls	r2, r2, #4
 8004a00:	b2d2      	uxtb	r2, r2
 8004a02:	440b      	add	r3, r1
 8004a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004a08:	e00a      	b.n	8004a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	4908      	ldr	r1, [pc, #32]	@ (8004a30 <__NVIC_SetPriority+0x50>)
 8004a10:	79fb      	ldrb	r3, [r7, #7]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	3b04      	subs	r3, #4
 8004a18:	0112      	lsls	r2, r2, #4
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	761a      	strb	r2, [r3, #24]
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bc80      	pop	{r7}
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	e000e100 	.word	0xe000e100
 8004a30:	e000ed00 	.word	0xe000ed00

08004a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b089      	sub	sp, #36	@ 0x24
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	60b9      	str	r1, [r7, #8]
 8004a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	f1c3 0307 	rsb	r3, r3, #7
 8004a4e:	2b04      	cmp	r3, #4
 8004a50:	bf28      	it	cs
 8004a52:	2304      	movcs	r3, #4
 8004a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	3304      	adds	r3, #4
 8004a5a:	2b06      	cmp	r3, #6
 8004a5c:	d902      	bls.n	8004a64 <NVIC_EncodePriority+0x30>
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3b03      	subs	r3, #3
 8004a62:	e000      	b.n	8004a66 <NVIC_EncodePriority+0x32>
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a68:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a72:	43da      	mvns	r2, r3
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	401a      	ands	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	fa01 f303 	lsl.w	r3, r1, r3
 8004a86:	43d9      	mvns	r1, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a8c:	4313      	orrs	r3, r2
         );
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3724      	adds	r7, #36	@ 0x24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr

08004a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004aa8:	d301      	bcc.n	8004aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e00f      	b.n	8004ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aae:	4a0a      	ldr	r2, [pc, #40]	@ (8004ad8 <SysTick_Config+0x40>)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ab6:	210f      	movs	r1, #15
 8004ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8004abc:	f7ff ff90 	bl	80049e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ac0:	4b05      	ldr	r3, [pc, #20]	@ (8004ad8 <SysTick_Config+0x40>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ac6:	4b04      	ldr	r3, [pc, #16]	@ (8004ad8 <SysTick_Config+0x40>)
 8004ac8:	2207      	movs	r2, #7
 8004aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	e000e010 	.word	0xe000e010

08004adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ff2d 	bl	8004944 <__NVIC_SetPriorityGrouping>
}
 8004aea:	bf00      	nop
 8004aec:	3708      	adds	r7, #8
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b086      	sub	sp, #24
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	4603      	mov	r3, r0
 8004afa:	60b9      	str	r1, [r7, #8]
 8004afc:	607a      	str	r2, [r7, #4]
 8004afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004b04:	f7ff ff42 	bl	800498c <__NVIC_GetPriorityGrouping>
 8004b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	6978      	ldr	r0, [r7, #20]
 8004b10:	f7ff ff90 	bl	8004a34 <NVIC_EncodePriority>
 8004b14:	4602      	mov	r2, r0
 8004b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7ff ff5f 	bl	80049e0 <__NVIC_SetPriority>
}
 8004b22:	bf00      	nop
 8004b24:	3718      	adds	r7, #24
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b082      	sub	sp, #8
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	4603      	mov	r3, r0
 8004b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff35 	bl	80049a8 <__NVIC_EnableIRQ>
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7ff ffa2 	bl	8004a98 <SysTick_Config>
 8004b54:	4603      	mov	r3, r0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3708      	adds	r7, #8
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
	...

08004b60 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b6c:	f7ff fb04 	bl	8004178 <HAL_GetTick>
 8004b70:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e099      	b.n	8004cb0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2202      	movs	r2, #2
 8004b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0201 	bic.w	r2, r2, #1
 8004b9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b9c:	e00f      	b.n	8004bbe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b9e:	f7ff faeb 	bl	8004178 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b05      	cmp	r3, #5
 8004baa:	d908      	bls.n	8004bbe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2203      	movs	r2, #3
 8004bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e078      	b.n	8004cb0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e8      	bne.n	8004b9e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	4b38      	ldr	r3, [pc, #224]	@ (8004cb8 <HAL_DMA_Init+0x158>)
 8004bd8:	4013      	ands	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004c02:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c14:	2b04      	cmp	r3, #4
 8004c16:	d107      	bne.n	8004c28 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c20:	4313      	orrs	r3, r2
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f023 0307 	bic.w	r3, r3, #7
 8004c3e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d117      	bne.n	8004c82 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	697a      	ldr	r2, [r7, #20]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00e      	beq.n	8004c82 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 fa6d 	bl	8005144 <DMA_CheckFifoParam>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d008      	beq.n	8004c82 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2240      	movs	r2, #64	@ 0x40
 8004c74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2201      	movs	r2, #1
 8004c7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e016      	b.n	8004cb0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 fa26 	bl	80050dc <DMA_CalcBaseAndBitshift>
 8004c90:	4603      	mov	r3, r0
 8004c92:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c98:	223f      	movs	r2, #63	@ 0x3f
 8004c9a:	409a      	lsls	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	f010803f 	.word	0xf010803f

08004cbc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cd2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_DMA_Start_IT+0x26>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e040      	b.n	8004d64 <HAL_DMA_Start_IT+0xa8>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d12f      	bne.n	8004d56 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f9b8 	bl	8005080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d14:	223f      	movs	r2, #63	@ 0x3f
 8004d16:	409a      	lsls	r2, r3
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f042 0216 	orr.w	r2, r2, #22
 8004d2a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0208 	orr.w	r2, r2, #8
 8004d42:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]
 8004d54:	e005      	b.n	8004d62 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d5e:	2302      	movs	r3, #2
 8004d60:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d62:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3718      	adds	r7, #24
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d78:	4b8e      	ldr	r3, [pc, #568]	@ (8004fb4 <HAL_DMA_IRQHandler+0x248>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a8e      	ldr	r2, [pc, #568]	@ (8004fb8 <HAL_DMA_IRQHandler+0x24c>)
 8004d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d82:	0a9b      	lsrs	r3, r3, #10
 8004d84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d96:	2208      	movs	r2, #8
 8004d98:	409a      	lsls	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d01a      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d013      	beq.n	8004dd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0204 	bic.w	r2, r2, #4
 8004dbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc4:	2208      	movs	r2, #8
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dd0:	f043 0201 	orr.w	r2, r3, #1
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ddc:	2201      	movs	r2, #1
 8004dde:	409a      	lsls	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4013      	ands	r3, r2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d012      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00b      	beq.n	8004e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	409a      	lsls	r2, r3
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e06:	f043 0202 	orr.w	r2, r3, #2
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e12:	2204      	movs	r2, #4
 8004e14:	409a      	lsls	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d012      	beq.n	8004e44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00b      	beq.n	8004e44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e30:	2204      	movs	r2, #4
 8004e32:	409a      	lsls	r2, r3
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e3c:	f043 0204 	orr.w	r2, r3, #4
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e48:	2210      	movs	r2, #16
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d043      	beq.n	8004edc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 0308 	and.w	r3, r3, #8
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d03c      	beq.n	8004edc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e66:	2210      	movs	r2, #16
 8004e68:	409a      	lsls	r2, r3
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d018      	beq.n	8004eae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d108      	bne.n	8004e9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d024      	beq.n	8004edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
 8004e9a:	e01f      	b.n	8004edc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d01b      	beq.n	8004edc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	4798      	blx	r3
 8004eac:	e016      	b.n	8004edc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d107      	bne.n	8004ecc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0208 	bic.w	r2, r2, #8
 8004eca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d003      	beq.n	8004edc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 808f 	beq.w	800500c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0310 	and.w	r3, r3, #16
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 8087 	beq.w	800500c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f02:	2220      	movs	r2, #32
 8004f04:	409a      	lsls	r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	2b05      	cmp	r3, #5
 8004f14:	d136      	bne.n	8004f84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 0216 	bic.w	r2, r2, #22
 8004f24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	695a      	ldr	r2, [r3, #20]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d103      	bne.n	8004f46 <HAL_DMA_IRQHandler+0x1da>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0208 	bic.w	r2, r2, #8
 8004f54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f5a:	223f      	movs	r2, #63	@ 0x3f
 8004f5c:	409a      	lsls	r2, r3
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d07e      	beq.n	8005078 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	4798      	blx	r3
        }
        return;
 8004f82:	e079      	b.n	8005078 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01d      	beq.n	8004fce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10d      	bne.n	8004fbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d031      	beq.n	800500c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	4798      	blx	r3
 8004fb0:	e02c      	b.n	800500c <HAL_DMA_IRQHandler+0x2a0>
 8004fb2:	bf00      	nop
 8004fb4:	20000028 	.word	0x20000028
 8004fb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d023      	beq.n	800500c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
 8004fcc:	e01e      	b.n	800500c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10f      	bne.n	8004ffc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 0210 	bic.w	r2, r2, #16
 8004fea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d003      	beq.n	800500c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005010:	2b00      	cmp	r3, #0
 8005012:	d032      	beq.n	800507a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005018:	f003 0301 	and.w	r3, r3, #1
 800501c:	2b00      	cmp	r3, #0
 800501e:	d022      	beq.n	8005066 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2205      	movs	r2, #5
 8005024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 0201 	bic.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	3301      	adds	r3, #1
 800503c:	60bb      	str	r3, [r7, #8]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	429a      	cmp	r2, r3
 8005042:	d307      	bcc.n	8005054 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1f2      	bne.n	8005038 <HAL_DMA_IRQHandler+0x2cc>
 8005052:	e000      	b.n	8005056 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005054:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800506a:	2b00      	cmp	r3, #0
 800506c:	d005      	beq.n	800507a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	4798      	blx	r3
 8005076:	e000      	b.n	800507a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005078:	bf00      	nop
    }
  }
}
 800507a:	3718      	adds	r7, #24
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005080:	b480      	push	{r7}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800509c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	2b40      	cmp	r3, #64	@ 0x40
 80050ac:	d108      	bne.n	80050c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050be:	e007      	b.n	80050d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	60da      	str	r2, [r3, #12]
}
 80050d0:	bf00      	nop
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bc80      	pop	{r7}
 80050d8:	4770      	bx	lr
	...

080050dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	3b10      	subs	r3, #16
 80050ec:	4a13      	ldr	r2, [pc, #76]	@ (800513c <DMA_CalcBaseAndBitshift+0x60>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	091b      	lsrs	r3, r3, #4
 80050f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80050f6:	4a12      	ldr	r2, [pc, #72]	@ (8005140 <DMA_CalcBaseAndBitshift+0x64>)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	461a      	mov	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2b03      	cmp	r3, #3
 8005108:	d909      	bls.n	800511e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005112:	f023 0303 	bic.w	r3, r3, #3
 8005116:	1d1a      	adds	r2, r3, #4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	659a      	str	r2, [r3, #88]	@ 0x58
 800511c:	e007      	b.n	800512e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005126:	f023 0303 	bic.w	r3, r3, #3
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	bc80      	pop	{r7}
 800513a:	4770      	bx	lr
 800513c:	aaaaaaab 	.word	0xaaaaaaab
 8005140:	080084f0 	.word	0x080084f0

08005144 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005154:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d11f      	bne.n	800519e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b03      	cmp	r3, #3
 8005162:	d856      	bhi.n	8005212 <DMA_CheckFifoParam+0xce>
 8005164:	a201      	add	r2, pc, #4	@ (adr r2, 800516c <DMA_CheckFifoParam+0x28>)
 8005166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800516a:	bf00      	nop
 800516c:	0800517d 	.word	0x0800517d
 8005170:	0800518f 	.word	0x0800518f
 8005174:	0800517d 	.word	0x0800517d
 8005178:	08005213 	.word	0x08005213
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d046      	beq.n	8005216 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800518c:	e043      	b.n	8005216 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005192:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005196:	d140      	bne.n	800521a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800519c:	e03d      	b.n	800521a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051a6:	d121      	bne.n	80051ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d837      	bhi.n	800521e <DMA_CheckFifoParam+0xda>
 80051ae:	a201      	add	r2, pc, #4	@ (adr r2, 80051b4 <DMA_CheckFifoParam+0x70>)
 80051b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b4:	080051c5 	.word	0x080051c5
 80051b8:	080051cb 	.word	0x080051cb
 80051bc:	080051c5 	.word	0x080051c5
 80051c0:	080051dd 	.word	0x080051dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
      break;
 80051c8:	e030      	b.n	800522c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d025      	beq.n	8005222 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051da:	e022      	b.n	8005222 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051e4:	d11f      	bne.n	8005226 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80051ea:	e01c      	b.n	8005226 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d903      	bls.n	80051fa <DMA_CheckFifoParam+0xb6>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b03      	cmp	r3, #3
 80051f6:	d003      	beq.n	8005200 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051f8:	e018      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	73fb      	strb	r3, [r7, #15]
      break;
 80051fe:	e015      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00e      	beq.n	800522a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	73fb      	strb	r3, [r7, #15]
      break;
 8005210:	e00b      	b.n	800522a <DMA_CheckFifoParam+0xe6>
      break;
 8005212:	bf00      	nop
 8005214:	e00a      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;
 8005216:	bf00      	nop
 8005218:	e008      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;
 800521a:	bf00      	nop
 800521c:	e006      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;
 800521e:	bf00      	nop
 8005220:	e004      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;
 8005222:	bf00      	nop
 8005224:	e002      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;   
 8005226:	bf00      	nop
 8005228:	e000      	b.n	800522c <DMA_CheckFifoParam+0xe8>
      break;
 800522a:	bf00      	nop
    }
  } 
  
  return status; 
 800522c:	7bfb      	ldrb	r3, [r7, #15]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	bc80      	pop	{r7}
 8005236:	4770      	bx	lr

08005238 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005246:	e16f      	b.n	8005528 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	2101      	movs	r1, #1
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	fa01 f303 	lsl.w	r3, r1, r3
 8005254:	4013      	ands	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 8161 	beq.w	8005522 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d005      	beq.n	8005278 <HAL_GPIO_Init+0x40>
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d130      	bne.n	80052da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	2203      	movs	r2, #3
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	43db      	mvns	r3, r3
 800528a:	693a      	ldr	r2, [r7, #16]
 800528c:	4013      	ands	r3, r2
 800528e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	fa02 f303 	lsl.w	r3, r2, r3
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052ae:	2201      	movs	r2, #1
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	fa02 f303 	lsl.w	r3, r2, r3
 80052b6:	43db      	mvns	r3, r3
 80052b8:	693a      	ldr	r2, [r7, #16]
 80052ba:	4013      	ands	r3, r2
 80052bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	091b      	lsrs	r3, r3, #4
 80052c4:	f003 0201 	and.w	r2, r3, #1
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	fa02 f303 	lsl.w	r3, r2, r3
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f003 0303 	and.w	r3, r3, #3
 80052e2:	2b03      	cmp	r3, #3
 80052e4:	d017      	beq.n	8005316 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	2203      	movs	r2, #3
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	43db      	mvns	r3, r3
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4013      	ands	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	005b      	lsls	r3, r3, #1
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4313      	orrs	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d123      	bne.n	800536a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	08da      	lsrs	r2, r3, #3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	3208      	adds	r2, #8
 800532a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800532e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	220f      	movs	r2, #15
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43db      	mvns	r3, r3
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4013      	ands	r3, r2
 8005344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	691a      	ldr	r2, [r3, #16]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	fa02 f303 	lsl.w	r3, r2, r3
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	08da      	lsrs	r2, r3, #3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	3208      	adds	r2, #8
 8005364:	6939      	ldr	r1, [r7, #16]
 8005366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	2203      	movs	r2, #3
 8005376:	fa02 f303 	lsl.w	r3, r2, r3
 800537a:	43db      	mvns	r3, r3
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4013      	ands	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	f003 0203 	and.w	r2, r3, #3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	005b      	lsls	r3, r3, #1
 800538e:	fa02 f303 	lsl.w	r3, r2, r3
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80bb 	beq.w	8005522 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ac:	2300      	movs	r3, #0
 80053ae:	60bb      	str	r3, [r7, #8]
 80053b0:	4b64      	ldr	r3, [pc, #400]	@ (8005544 <HAL_GPIO_Init+0x30c>)
 80053b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b4:	4a63      	ldr	r2, [pc, #396]	@ (8005544 <HAL_GPIO_Init+0x30c>)
 80053b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80053bc:	4b61      	ldr	r3, [pc, #388]	@ (8005544 <HAL_GPIO_Init+0x30c>)
 80053be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80053c4:	60bb      	str	r3, [r7, #8]
 80053c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80053c8:	4a5f      	ldr	r2, [pc, #380]	@ (8005548 <HAL_GPIO_Init+0x310>)
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	089b      	lsrs	r3, r3, #2
 80053ce:	3302      	adds	r3, #2
 80053d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	f003 0303 	and.w	r3, r3, #3
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	220f      	movs	r2, #15
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	4013      	ands	r3, r2
 80053ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a57      	ldr	r2, [pc, #348]	@ (800554c <HAL_GPIO_Init+0x314>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d031      	beq.n	8005458 <HAL_GPIO_Init+0x220>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a56      	ldr	r2, [pc, #344]	@ (8005550 <HAL_GPIO_Init+0x318>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d02b      	beq.n	8005454 <HAL_GPIO_Init+0x21c>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a55      	ldr	r2, [pc, #340]	@ (8005554 <HAL_GPIO_Init+0x31c>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d025      	beq.n	8005450 <HAL_GPIO_Init+0x218>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a54      	ldr	r2, [pc, #336]	@ (8005558 <HAL_GPIO_Init+0x320>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d01f      	beq.n	800544c <HAL_GPIO_Init+0x214>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a53      	ldr	r2, [pc, #332]	@ (800555c <HAL_GPIO_Init+0x324>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d019      	beq.n	8005448 <HAL_GPIO_Init+0x210>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a52      	ldr	r2, [pc, #328]	@ (8005560 <HAL_GPIO_Init+0x328>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d013      	beq.n	8005444 <HAL_GPIO_Init+0x20c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a51      	ldr	r2, [pc, #324]	@ (8005564 <HAL_GPIO_Init+0x32c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00d      	beq.n	8005440 <HAL_GPIO_Init+0x208>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a50      	ldr	r2, [pc, #320]	@ (8005568 <HAL_GPIO_Init+0x330>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d007      	beq.n	800543c <HAL_GPIO_Init+0x204>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a4f      	ldr	r2, [pc, #316]	@ (800556c <HAL_GPIO_Init+0x334>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d101      	bne.n	8005438 <HAL_GPIO_Init+0x200>
 8005434:	2308      	movs	r3, #8
 8005436:	e010      	b.n	800545a <HAL_GPIO_Init+0x222>
 8005438:	2309      	movs	r3, #9
 800543a:	e00e      	b.n	800545a <HAL_GPIO_Init+0x222>
 800543c:	2307      	movs	r3, #7
 800543e:	e00c      	b.n	800545a <HAL_GPIO_Init+0x222>
 8005440:	2306      	movs	r3, #6
 8005442:	e00a      	b.n	800545a <HAL_GPIO_Init+0x222>
 8005444:	2305      	movs	r3, #5
 8005446:	e008      	b.n	800545a <HAL_GPIO_Init+0x222>
 8005448:	2304      	movs	r3, #4
 800544a:	e006      	b.n	800545a <HAL_GPIO_Init+0x222>
 800544c:	2303      	movs	r3, #3
 800544e:	e004      	b.n	800545a <HAL_GPIO_Init+0x222>
 8005450:	2302      	movs	r3, #2
 8005452:	e002      	b.n	800545a <HAL_GPIO_Init+0x222>
 8005454:	2301      	movs	r3, #1
 8005456:	e000      	b.n	800545a <HAL_GPIO_Init+0x222>
 8005458:	2300      	movs	r3, #0
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	f002 0203 	and.w	r2, r2, #3
 8005460:	0092      	lsls	r2, r2, #2
 8005462:	4093      	lsls	r3, r2
 8005464:	461a      	mov	r2, r3
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800546c:	4936      	ldr	r1, [pc, #216]	@ (8005548 <HAL_GPIO_Init+0x310>)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	089b      	lsrs	r3, r3, #2
 8005472:	3302      	adds	r3, #2
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800547a:	4b3d      	ldr	r3, [pc, #244]	@ (8005570 <HAL_GPIO_Init+0x338>)
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	43db      	mvns	r3, r3
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4013      	ands	r3, r2
 8005488:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800549e:	4a34      	ldr	r2, [pc, #208]	@ (8005570 <HAL_GPIO_Init+0x338>)
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054a4:	4b32      	ldr	r3, [pc, #200]	@ (8005570 <HAL_GPIO_Init+0x338>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	43db      	mvns	r3, r3
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4013      	ands	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d003      	beq.n	80054c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80054c8:	4a29      	ldr	r2, [pc, #164]	@ (8005570 <HAL_GPIO_Init+0x338>)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054ce:	4b28      	ldr	r3, [pc, #160]	@ (8005570 <HAL_GPIO_Init+0x338>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	43db      	mvns	r3, r3
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	4013      	ands	r3, r2
 80054dc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80054f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005570 <HAL_GPIO_Init+0x338>)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054f8:	4b1d      	ldr	r3, [pc, #116]	@ (8005570 <HAL_GPIO_Init+0x338>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	43db      	mvns	r3, r3
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4013      	ands	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800551c:	4a14      	ldr	r2, [pc, #80]	@ (8005570 <HAL_GPIO_Init+0x338>)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	3301      	adds	r3, #1
 8005526:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	fa22 f303 	lsr.w	r3, r2, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	f47f ae88 	bne.w	8005248 <HAL_GPIO_Init+0x10>
  }
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	bc80      	pop	{r7}
 8005542:	4770      	bx	lr
 8005544:	40023800 	.word	0x40023800
 8005548:	40013800 	.word	0x40013800
 800554c:	40020000 	.word	0x40020000
 8005550:	40020400 	.word	0x40020400
 8005554:	40020800 	.word	0x40020800
 8005558:	40020c00 	.word	0x40020c00
 800555c:	40021000 	.word	0x40021000
 8005560:	40021400 	.word	0x40021400
 8005564:	40021800 	.word	0x40021800
 8005568:	40021c00 	.word	0x40021c00
 800556c:	40022000 	.word	0x40022000
 8005570:	40013c00 	.word	0x40013c00

08005574 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691a      	ldr	r2, [r3, #16]
 8005584:	887b      	ldrh	r3, [r7, #2]
 8005586:	4013      	ands	r3, r2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800558c:	2301      	movs	r3, #1
 800558e:	73fb      	strb	r3, [r7, #15]
 8005590:	e001      	b.n	8005596 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005596:	7bfb      	ldrb	r3, [r7, #15]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	bc80      	pop	{r7}
 80055a0:	4770      	bx	lr

080055a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	807b      	strh	r3, [r7, #2]
 80055ae:	4613      	mov	r3, r2
 80055b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055b2:	787b      	ldrb	r3, [r7, #1]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80055b8:	887a      	ldrh	r2, [r7, #2]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80055be:	e003      	b.n	80055c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80055c0:	887b      	ldrh	r3, [r7, #2]
 80055c2:	041a      	lsls	r2, r3, #16
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	619a      	str	r2, [r3, #24]
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bc80      	pop	{r7}
 80055d0:	4770      	bx	lr
	...

080055d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d101      	bne.n	80055e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	e12b      	b.n	800583e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d106      	bne.n	8005600 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fe faaa 	bl	8003b54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2224      	movs	r2, #36	@ 0x24
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f022 0201 	bic.w	r2, r2, #1
 8005616:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005626:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005636:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005638:	f001 fd2e 	bl	8007098 <HAL_RCC_GetPCLK1Freq>
 800563c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4a81      	ldr	r2, [pc, #516]	@ (8005848 <HAL_I2C_Init+0x274>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d807      	bhi.n	8005658 <HAL_I2C_Init+0x84>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4a80      	ldr	r2, [pc, #512]	@ (800584c <HAL_I2C_Init+0x278>)
 800564c:	4293      	cmp	r3, r2
 800564e:	bf94      	ite	ls
 8005650:	2301      	movls	r3, #1
 8005652:	2300      	movhi	r3, #0
 8005654:	b2db      	uxtb	r3, r3
 8005656:	e006      	b.n	8005666 <HAL_I2C_Init+0x92>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a7d      	ldr	r2, [pc, #500]	@ (8005850 <HAL_I2C_Init+0x27c>)
 800565c:	4293      	cmp	r3, r2
 800565e:	bf94      	ite	ls
 8005660:	2301      	movls	r3, #1
 8005662:	2300      	movhi	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e0e7      	b.n	800583e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	4a78      	ldr	r2, [pc, #480]	@ (8005854 <HAL_I2C_Init+0x280>)
 8005672:	fba2 2303 	umull	r2, r3, r2, r3
 8005676:	0c9b      	lsrs	r3, r3, #18
 8005678:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	4a6a      	ldr	r2, [pc, #424]	@ (8005848 <HAL_I2C_Init+0x274>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d802      	bhi.n	80056a8 <HAL_I2C_Init+0xd4>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	3301      	adds	r3, #1
 80056a6:	e009      	b.n	80056bc <HAL_I2C_Init+0xe8>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80056ae:	fb02 f303 	mul.w	r3, r2, r3
 80056b2:	4a69      	ldr	r2, [pc, #420]	@ (8005858 <HAL_I2C_Init+0x284>)
 80056b4:	fba2 2303 	umull	r2, r3, r2, r3
 80056b8:	099b      	lsrs	r3, r3, #6
 80056ba:	3301      	adds	r3, #1
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	6812      	ldr	r2, [r2, #0]
 80056c0:	430b      	orrs	r3, r1
 80056c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80056ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	495c      	ldr	r1, [pc, #368]	@ (8005848 <HAL_I2C_Init+0x274>)
 80056d8:	428b      	cmp	r3, r1
 80056da:	d819      	bhi.n	8005710 <HAL_I2C_Init+0x13c>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	1e59      	subs	r1, r3, #1
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056ea:	1c59      	adds	r1, r3, #1
 80056ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80056f0:	400b      	ands	r3, r1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_I2C_Init+0x138>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	1e59      	subs	r1, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	fbb1 f3f3 	udiv	r3, r1, r3
 8005704:	3301      	adds	r3, #1
 8005706:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800570a:	e051      	b.n	80057b0 <HAL_I2C_Init+0x1dc>
 800570c:	2304      	movs	r3, #4
 800570e:	e04f      	b.n	80057b0 <HAL_I2C_Init+0x1dc>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d111      	bne.n	800573c <HAL_I2C_Init+0x168>
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	1e58      	subs	r0, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6859      	ldr	r1, [r3, #4]
 8005720:	460b      	mov	r3, r1
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	440b      	add	r3, r1
 8005726:	fbb0 f3f3 	udiv	r3, r0, r3
 800572a:	3301      	adds	r3, #1
 800572c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005730:	2b00      	cmp	r3, #0
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	e012      	b.n	8005762 <HAL_I2C_Init+0x18e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	1e58      	subs	r0, r3, #1
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6859      	ldr	r1, [r3, #4]
 8005744:	460b      	mov	r3, r1
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	0099      	lsls	r1, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005752:	3301      	adds	r3, #1
 8005754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005758:	2b00      	cmp	r3, #0
 800575a:	bf0c      	ite	eq
 800575c:	2301      	moveq	r3, #1
 800575e:	2300      	movne	r3, #0
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d001      	beq.n	800576a <HAL_I2C_Init+0x196>
 8005766:	2301      	movs	r3, #1
 8005768:	e022      	b.n	80057b0 <HAL_I2C_Init+0x1dc>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10e      	bne.n	8005790 <HAL_I2C_Init+0x1bc>
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	1e58      	subs	r0, r3, #1
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6859      	ldr	r1, [r3, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	440b      	add	r3, r1
 8005780:	fbb0 f3f3 	udiv	r3, r0, r3
 8005784:	3301      	adds	r3, #1
 8005786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800578a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800578e:	e00f      	b.n	80057b0 <HAL_I2C_Init+0x1dc>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	1e58      	subs	r0, r3, #1
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6859      	ldr	r1, [r3, #4]
 8005798:	460b      	mov	r3, r1
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	0099      	lsls	r1, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057a6:	3301      	adds	r3, #1
 80057a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	6809      	ldr	r1, [r1, #0]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69da      	ldr	r2, [r3, #28]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	431a      	orrs	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	430a      	orrs	r2, r1
 80057d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80057de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6911      	ldr	r1, [r2, #16]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	68d2      	ldr	r2, [r2, #12]
 80057ea:	4311      	orrs	r1, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6812      	ldr	r2, [r2, #0]
 80057f0:	430b      	orrs	r3, r1
 80057f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	431a      	orrs	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	430a      	orrs	r2, r1
 800580e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0201 	orr.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	000186a0 	.word	0x000186a0
 800584c:	001e847f 	.word	0x001e847f
 8005850:	003d08ff 	.word	0x003d08ff
 8005854:	431bde83 	.word	0x431bde83
 8005858:	10624dd3 	.word	0x10624dd3

0800585c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b088      	sub	sp, #32
 8005860:	af02      	add	r7, sp, #8
 8005862:	60f8      	str	r0, [r7, #12]
 8005864:	4608      	mov	r0, r1
 8005866:	4611      	mov	r1, r2
 8005868:	461a      	mov	r2, r3
 800586a:	4603      	mov	r3, r0
 800586c:	817b      	strh	r3, [r7, #10]
 800586e:	460b      	mov	r3, r1
 8005870:	813b      	strh	r3, [r7, #8]
 8005872:	4613      	mov	r3, r2
 8005874:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005876:	f7fe fc7f 	bl	8004178 <HAL_GetTick>
 800587a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005882:	b2db      	uxtb	r3, r3
 8005884:	2b20      	cmp	r3, #32
 8005886:	f040 80d9 	bne.w	8005a3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	9300      	str	r3, [sp, #0]
 800588e:	2319      	movs	r3, #25
 8005890:	2201      	movs	r2, #1
 8005892:	496d      	ldr	r1, [pc, #436]	@ (8005a48 <HAL_I2C_Mem_Write+0x1ec>)
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f000 fdb9 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d001      	beq.n	80058a4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80058a0:	2302      	movs	r3, #2
 80058a2:	e0cc      	b.n	8005a3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_I2C_Mem_Write+0x56>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e0c5      	b.n	8005a3e <HAL_I2C_Mem_Write+0x1e2>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d007      	beq.n	80058d8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058e6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2221      	movs	r2, #33	@ 0x21
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2240      	movs	r2, #64	@ 0x40
 80058f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a3a      	ldr	r2, [r7, #32]
 8005902:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005908:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a4d      	ldr	r2, [pc, #308]	@ (8005a4c <HAL_I2C_Mem_Write+0x1f0>)
 8005918:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800591a:	88f8      	ldrh	r0, [r7, #6]
 800591c:	893a      	ldrh	r2, [r7, #8]
 800591e:	8979      	ldrh	r1, [r7, #10]
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	9301      	str	r3, [sp, #4]
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	4603      	mov	r3, r0
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 fbf0 	bl	8006110 <I2C_RequestMemoryWrite>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d052      	beq.n	80059dc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e081      	b.n	8005a3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 fe7e 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00d      	beq.n	8005966 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	2b04      	cmp	r3, #4
 8005950:	d107      	bne.n	8005962 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005960:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e06b      	b.n	8005a3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	781a      	ldrb	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b04      	cmp	r3, #4
 80059a2:	d11b      	bne.n	80059dc <HAL_I2C_Mem_Write+0x180>
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d017      	beq.n	80059dc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	781a      	ldrb	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c6:	3b01      	subs	r3, #1
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d1aa      	bne.n	800593a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f000 fe71 	bl	80066d0 <I2C_WaitOnBTFFlagUntilTimeout>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00d      	beq.n	8005a10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f8:	2b04      	cmp	r3, #4
 80059fa:	d107      	bne.n	8005a0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e016      	b.n	8005a3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	e000      	b.n	8005a3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005a3c:	2302      	movs	r3, #2
  }
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3718      	adds	r7, #24
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	00100002 	.word	0x00100002
 8005a4c:	ffff0000 	.word	0xffff0000

08005a50 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08c      	sub	sp, #48	@ 0x30
 8005a54:	af02      	add	r7, sp, #8
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	4608      	mov	r0, r1
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	4603      	mov	r3, r0
 8005a60:	817b      	strh	r3, [r7, #10]
 8005a62:	460b      	mov	r3, r1
 8005a64:	813b      	strh	r3, [r7, #8]
 8005a66:	4613      	mov	r3, r2
 8005a68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a6a:	f7fe fb85 	bl	8004178 <HAL_GetTick>
 8005a6e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b20      	cmp	r3, #32
 8005a7a:	f040 8214 	bne.w	8005ea6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	2319      	movs	r3, #25
 8005a84:	2201      	movs	r2, #1
 8005a86:	497b      	ldr	r1, [pc, #492]	@ (8005c74 <HAL_I2C_Mem_Read+0x224>)
 8005a88:	68f8      	ldr	r0, [r7, #12]
 8005a8a:	f000 fcbf 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
 8005a96:	e207      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d101      	bne.n	8005aa6 <HAL_I2C_Mem_Read+0x56>
 8005aa2:	2302      	movs	r3, #2
 8005aa4:	e200      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x458>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d007      	beq.n	8005acc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ada:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2222      	movs	r2, #34	@ 0x22
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2240      	movs	r2, #64	@ 0x40
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005afc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a5b      	ldr	r2, [pc, #364]	@ (8005c78 <HAL_I2C_Mem_Read+0x228>)
 8005b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b0e:	88f8      	ldrh	r0, [r7, #6]
 8005b10:	893a      	ldrh	r2, [r7, #8]
 8005b12:	8979      	ldrh	r1, [r7, #10]
 8005b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b16:	9301      	str	r3, [sp, #4]
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fb8c 	bl	800623c <I2C_RequestMemoryRead>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e1bc      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d113      	bne.n	8005b5e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b36:	2300      	movs	r3, #0
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	695b      	ldr	r3, [r3, #20]
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	699b      	ldr	r3, [r3, #24]
 8005b48:	623b      	str	r3, [r7, #32]
 8005b4a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e190      	b.n	8005e80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d11b      	bne.n	8005b9e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b76:	2300      	movs	r3, #0
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	61fb      	str	r3, [r7, #28]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e170      	b.n	8005e80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d11b      	bne.n	8005bde <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005bc4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	e150      	b.n	8005e80 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bde:	2300      	movs	r3, #0
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699b      	ldr	r3, [r3, #24]
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005bf4:	e144      	b.n	8005e80 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	f200 80f1 	bhi.w	8005de2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d123      	bne.n	8005c50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 fda7 	bl	8006760 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	e145      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	691a      	ldr	r2, [r3, #16]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c4e:	e117      	b.n	8005e80 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d14e      	bne.n	8005cf6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	2200      	movs	r2, #0
 8005c60:	4906      	ldr	r1, [pc, #24]	@ (8005c7c <HAL_I2C_Mem_Read+0x22c>)
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fbd2 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d008      	beq.n	8005c80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e11a      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x458>
 8005c72:	bf00      	nop
 8005c74:	00100002 	.word	0x00100002
 8005c78:	ffff0000 	.word	0xffff0000
 8005c7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691a      	ldr	r2, [r3, #16]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9a:	b2d2      	uxtb	r2, r2
 8005c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	b29a      	uxth	r2, r3
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd4:	1c5a      	adds	r2, r3, #1
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b29a      	uxth	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005cf4:	e0c4      	b.n	8005e80 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	496c      	ldr	r1, [pc, #432]	@ (8005eb0 <HAL_I2C_Mem_Read+0x460>)
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 fb83 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0cb      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691a      	ldr	r2, [r3, #16]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d2a:	b2d2      	uxtb	r2, r2
 8005d2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3c:	3b01      	subs	r3, #1
 8005d3e:	b29a      	uxth	r2, r3
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	9300      	str	r3, [sp, #0]
 8005d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d58:	2200      	movs	r2, #0
 8005d5a:	4955      	ldr	r1, [pc, #340]	@ (8005eb0 <HAL_I2C_Mem_Read+0x460>)
 8005d5c:	68f8      	ldr	r0, [r7, #12]
 8005d5e:	f000 fb55 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d001      	beq.n	8005d6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e09d      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d86:	b2d2      	uxtb	r2, r2
 8005d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005da4:	b29b      	uxth	r3, r3
 8005da6:	3b01      	subs	r3, #1
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005de0:	e04e      	b.n	8005e80 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005de4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 fcba 	bl	8006760 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e058      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691a      	ldr	r2, [r3, #16]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e00:	b2d2      	uxtb	r2, r2
 8005e02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e12:	3b01      	subs	r3, #1
 8005e14:	b29a      	uxth	r2, r3
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	3b01      	subs	r3, #1
 8005e22:	b29a      	uxth	r2, r3
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	695b      	ldr	r3, [r3, #20]
 8005e2e:	f003 0304 	and.w	r3, r3, #4
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	d124      	bne.n	8005e80 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e3a:	2b03      	cmp	r3, #3
 8005e3c:	d107      	bne.n	8005e4e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e4c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f47f aeb6 	bne.w	8005bf6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	e000      	b.n	8005ea8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005ea6:	2302      	movs	r3, #2
  }
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3728      	adds	r7, #40	@ 0x28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	00010004 	.word	0x00010004

08005eb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08a      	sub	sp, #40	@ 0x28
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	607a      	str	r2, [r7, #4]
 8005ebe:	603b      	str	r3, [r7, #0]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005ec4:	f7fe f958 	bl	8004178 <HAL_GetTick>
 8005ec8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	f040 8111 	bne.w	80060fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	2319      	movs	r3, #25
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	4988      	ldr	r1, [pc, #544]	@ (8006108 <HAL_I2C_IsDeviceReady+0x254>)
 8005ee6:	68f8      	ldr	r0, [r7, #12]
 8005ee8:	f000 fa90 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e104      	b.n	8006100 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <HAL_I2C_IsDeviceReady+0x50>
 8005f00:	2302      	movs	r3, #2
 8005f02:	e0fd      	b.n	8006100 <HAL_I2C_IsDeviceReady+0x24c>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d007      	beq.n	8005f2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0201 	orr.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2224      	movs	r2, #36	@ 0x24
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4a70      	ldr	r2, [pc, #448]	@ (800610c <HAL_I2C_IsDeviceReady+0x258>)
 8005f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	9300      	str	r3, [sp, #0]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f000 fa4e 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00d      	beq.n	8005f92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f84:	d103      	bne.n	8005f8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f8c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e0b6      	b.n	8006100 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f92:	897b      	ldrh	r3, [r7, #10]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fa0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005fa2:	f7fe f8e9 	bl	8004178 <HAL_GetTick>
 8005fa6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	bf0c      	ite	eq
 8005fb6:	2301      	moveq	r3, #1
 8005fb8:	2300      	movne	r3, #0
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fcc:	bf0c      	ite	eq
 8005fce:	2301      	moveq	r3, #1
 8005fd0:	2300      	movne	r3, #0
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005fd6:	e025      	b.n	8006024 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fd8:	f7fe f8ce 	bl	8004178 <HAL_GetTick>
 8005fdc:	4602      	mov	r2, r0
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d302      	bcc.n	8005fee <HAL_I2C_IsDeviceReady+0x13a>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d103      	bne.n	8005ff6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	22a0      	movs	r2, #160	@ 0xa0
 8005ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b02      	cmp	r3, #2
 8006002:	bf0c      	ite	eq
 8006004:	2301      	moveq	r3, #1
 8006006:	2300      	movne	r3, #0
 8006008:	b2db      	uxtb	r3, r3
 800600a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800601a:	bf0c      	ite	eq
 800601c:	2301      	moveq	r3, #1
 800601e:	2300      	movne	r3, #0
 8006020:	b2db      	uxtb	r3, r3
 8006022:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2ba0      	cmp	r3, #160	@ 0xa0
 800602e:	d005      	beq.n	800603c <HAL_I2C_IsDeviceReady+0x188>
 8006030:	7dfb      	ldrb	r3, [r7, #23]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <HAL_I2C_IsDeviceReady+0x188>
 8006036:	7dbb      	ldrb	r3, [r7, #22]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d0cd      	beq.n	8005fd8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b02      	cmp	r3, #2
 8006050:	d129      	bne.n	80060a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006060:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006062:	2300      	movs	r3, #0
 8006064:	613b      	str	r3, [r7, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	613b      	str	r3, [r7, #16]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	699b      	ldr	r3, [r3, #24]
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	9300      	str	r3, [sp, #0]
 800607c:	2319      	movs	r3, #25
 800607e:	2201      	movs	r2, #1
 8006080:	4921      	ldr	r1, [pc, #132]	@ (8006108 <HAL_I2C_IsDeviceReady+0x254>)
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f000 f9c2 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8006088:	4603      	mov	r3, r0
 800608a:	2b00      	cmp	r3, #0
 800608c:	d001      	beq.n	8006092 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e036      	b.n	8006100 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2220      	movs	r2, #32
 8006096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2200      	movs	r2, #0
 800609e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80060a2:	2300      	movs	r3, #0
 80060a4:	e02c      	b.n	8006100 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80060be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	2319      	movs	r3, #25
 80060c6:	2201      	movs	r2, #1
 80060c8:	490f      	ldr	r1, [pc, #60]	@ (8006108 <HAL_I2C_IsDeviceReady+0x254>)
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f000 f99e 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e012      	b.n	8006100 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	3301      	adds	r3, #1
 80060de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	f4ff af32 	bcc.w	8005f4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2220      	movs	r2, #32
 80060ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e000      	b.n	8006100 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
  }
}
 8006100:	4618      	mov	r0, r3
 8006102:	3720      	adds	r7, #32
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	00100002 	.word	0x00100002
 800610c:	ffff0000 	.word	0xffff0000

08006110 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	4608      	mov	r0, r1
 800611a:	4611      	mov	r1, r2
 800611c:	461a      	mov	r2, r3
 800611e:	4603      	mov	r3, r0
 8006120:	817b      	strh	r3, [r7, #10]
 8006122:	460b      	mov	r3, r1
 8006124:	813b      	strh	r3, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006138:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	2200      	movs	r2, #0
 8006142:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 f960 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00d      	beq.n	800616e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800615c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006160:	d103      	bne.n	800616a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006168:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800616a:	2303      	movs	r3, #3
 800616c:	e05f      	b.n	800622e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800616e:	897b      	ldrh	r3, [r7, #10]
 8006170:	b2db      	uxtb	r3, r3
 8006172:	461a      	mov	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800617c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	6a3a      	ldr	r2, [r7, #32]
 8006182:	492d      	ldr	r1, [pc, #180]	@ (8006238 <I2C_RequestMemoryWrite+0x128>)
 8006184:	68f8      	ldr	r0, [r7, #12]
 8006186:	f000 f9bb 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e04c      	b.n	800622e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061ac:	6a39      	ldr	r1, [r7, #32]
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f000 fa46 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00d      	beq.n	80061d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d107      	bne.n	80061d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	e02b      	b.n	800622e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061d6:	88fb      	ldrh	r3, [r7, #6]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d105      	bne.n	80061e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061dc:	893b      	ldrh	r3, [r7, #8]
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	611a      	str	r2, [r3, #16]
 80061e6:	e021      	b.n	800622c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061e8:	893b      	ldrh	r3, [r7, #8]
 80061ea:	0a1b      	lsrs	r3, r3, #8
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f8:	6a39      	ldr	r1, [r7, #32]
 80061fa:	68f8      	ldr	r0, [r7, #12]
 80061fc:	f000 fa20 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d00d      	beq.n	8006222 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800620a:	2b04      	cmp	r3, #4
 800620c:	d107      	bne.n	800621e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800621c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e005      	b.n	800622e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006222:	893b      	ldrh	r3, [r7, #8]
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3718      	adds	r7, #24
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}
 8006236:	bf00      	nop
 8006238:	00010002 	.word	0x00010002

0800623c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b088      	sub	sp, #32
 8006240:	af02      	add	r7, sp, #8
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	4608      	mov	r0, r1
 8006246:	4611      	mov	r1, r2
 8006248:	461a      	mov	r2, r3
 800624a:	4603      	mov	r3, r0
 800624c:	817b      	strh	r3, [r7, #10]
 800624e:	460b      	mov	r3, r1
 8006250:	813b      	strh	r3, [r7, #8]
 8006252:	4613      	mov	r3, r2
 8006254:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006264:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006274:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	2200      	movs	r2, #0
 800627e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f8c2 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00d      	beq.n	80062aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800629c:	d103      	bne.n	80062a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e0aa      	b.n	8006400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80062aa:	897b      	ldrh	r3, [r7, #10]
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	461a      	mov	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80062b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	6a3a      	ldr	r2, [r7, #32]
 80062be:	4952      	ldr	r1, [pc, #328]	@ (8006408 <I2C_RequestMemoryRead+0x1cc>)
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f91d 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e097      	b.n	8006400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062d0:	2300      	movs	r3, #0
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e8:	6a39      	ldr	r1, [r7, #32]
 80062ea:	68f8      	ldr	r0, [r7, #12]
 80062ec:	f000 f9a8 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00d      	beq.n	8006312 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d107      	bne.n	800630e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800630c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e076      	b.n	8006400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d105      	bne.n	8006324 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006318:	893b      	ldrh	r3, [r7, #8]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	611a      	str	r2, [r3, #16]
 8006322:	e021      	b.n	8006368 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006324:	893b      	ldrh	r3, [r7, #8]
 8006326:	0a1b      	lsrs	r3, r3, #8
 8006328:	b29b      	uxth	r3, r3
 800632a:	b2da      	uxtb	r2, r3
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006334:	6a39      	ldr	r1, [r7, #32]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f982 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00d      	beq.n	800635e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006346:	2b04      	cmp	r3, #4
 8006348:	d107      	bne.n	800635a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006358:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e050      	b.n	8006400 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800635e:	893b      	ldrh	r3, [r7, #8]
 8006360:	b2da      	uxtb	r2, r3
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800636a:	6a39      	ldr	r1, [r7, #32]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 f967 	bl	8006640 <I2C_WaitOnTXEFlagUntilTimeout>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d00d      	beq.n	8006394 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800637c:	2b04      	cmp	r3, #4
 800637e:	d107      	bne.n	8006390 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800638e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e035      	b.n	8006400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80063a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	9300      	str	r3, [sp, #0]
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f82b 	bl	800640c <I2C_WaitOnFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00d      	beq.n	80063d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ca:	d103      	bne.n	80063d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e013      	b.n	8006400 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063d8:	897b      	ldrh	r3, [r7, #10]
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	f043 0301 	orr.w	r3, r3, #1
 80063e0:	b2da      	uxtb	r2, r3
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ea:	6a3a      	ldr	r2, [r7, #32]
 80063ec:	4906      	ldr	r1, [pc, #24]	@ (8006408 <I2C_RequestMemoryRead+0x1cc>)
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f000 f886 	bl	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d001      	beq.n	80063fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	00010002 	.word	0x00010002

0800640c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	603b      	str	r3, [r7, #0]
 8006418:	4613      	mov	r3, r2
 800641a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800641c:	e048      	b.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d044      	beq.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006426:	f7fd fea7 	bl	8004178 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d139      	bne.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	0c1b      	lsrs	r3, r3, #16
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b01      	cmp	r3, #1
 8006444:	d10d      	bne.n	8006462 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	43da      	mvns	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	4013      	ands	r3, r2
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	bf0c      	ite	eq
 8006458:	2301      	moveq	r3, #1
 800645a:	2300      	movne	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	461a      	mov	r2, r3
 8006460:	e00c      	b.n	800647c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	43da      	mvns	r2, r3
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	4013      	ands	r3, r2
 800646e:	b29b      	uxth	r3, r3
 8006470:	2b00      	cmp	r3, #0
 8006472:	bf0c      	ite	eq
 8006474:	2301      	moveq	r3, #1
 8006476:	2300      	movne	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	461a      	mov	r2, r3
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	429a      	cmp	r2, r3
 8006480:	d116      	bne.n	80064b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2200      	movs	r2, #0
 8006486:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	f043 0220 	orr.w	r2, r3, #32
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e023      	b.n	80064f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d10d      	bne.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	43da      	mvns	r2, r3
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	4013      	ands	r3, r2
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	bf0c      	ite	eq
 80064cc:	2301      	moveq	r3, #1
 80064ce:	2300      	movne	r3, #0
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	e00c      	b.n	80064f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	43da      	mvns	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	4013      	ands	r3, r2
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bf0c      	ite	eq
 80064e8:	2301      	moveq	r3, #1
 80064ea:	2300      	movne	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	461a      	mov	r2, r3
 80064f0:	79fb      	ldrb	r3, [r7, #7]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d093      	beq.n	800641e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064f6:	2300      	movs	r3, #0
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800650e:	e071      	b.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800651a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800651e:	d123      	bne.n	8006568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800652e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006538:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2220      	movs	r2, #32
 8006544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006554:	f043 0204 	orr.w	r2, r3, #4
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e067      	b.n	8006638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d041      	beq.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006570:	f7fd fe02 	bl	8004178 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	429a      	cmp	r2, r3
 800657e:	d302      	bcc.n	8006586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d136      	bne.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	0c1b      	lsrs	r3, r3, #16
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b01      	cmp	r3, #1
 800658e:	d10c      	bne.n	80065aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	43da      	mvns	r2, r3
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	4013      	ands	r3, r2
 800659c:	b29b      	uxth	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	bf14      	ite	ne
 80065a2:	2301      	movne	r3, #1
 80065a4:	2300      	moveq	r3, #0
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	e00b      	b.n	80065c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	43da      	mvns	r2, r3
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	4013      	ands	r3, r2
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf14      	ite	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	2300      	moveq	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d016      	beq.n	80065f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2220      	movs	r2, #32
 80065d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e0:	f043 0220 	orr.w	r2, r3, #32
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e021      	b.n	8006638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d10c      	bne.n	8006618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	43da      	mvns	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4013      	ands	r3, r2
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf14      	ite	ne
 8006610:	2301      	movne	r3, #1
 8006612:	2300      	moveq	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	e00b      	b.n	8006630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	43da      	mvns	r2, r3
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	4013      	ands	r3, r2
 8006624:	b29b      	uxth	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	bf14      	ite	ne
 800662a:	2301      	movne	r3, #1
 800662c:	2300      	moveq	r3, #0
 800662e:	b2db      	uxtb	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	f47f af6d 	bne.w	8006510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006636:	2300      	movs	r3, #0
}
 8006638:	4618      	mov	r0, r3
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800664c:	e034      	b.n	80066b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f8e3 	bl	800681a <I2C_IsAcknowledgeFailed>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e034      	b.n	80066c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006664:	d028      	beq.n	80066b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006666:	f7fd fd87 	bl	8004178 <HAL_GetTick>
 800666a:	4602      	mov	r2, r0
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	429a      	cmp	r2, r3
 8006674:	d302      	bcc.n	800667c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d11d      	bne.n	80066b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006686:	2b80      	cmp	r3, #128	@ 0x80
 8006688:	d016      	beq.n	80066b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2200      	movs	r2, #0
 800668e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a4:	f043 0220 	orr.w	r2, r3, #32
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e007      	b.n	80066c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c2:	2b80      	cmp	r3, #128	@ 0x80
 80066c4:	d1c3      	bne.n	800664e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066dc:	e034      	b.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066de:	68f8      	ldr	r0, [r7, #12]
 80066e0:	f000 f89b 	bl	800681a <I2C_IsAcknowledgeFailed>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	e034      	b.n	8006758 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d028      	beq.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f6:	f7fd fd3f 	bl	8004178 <HAL_GetTick>
 80066fa:	4602      	mov	r2, r0
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	68ba      	ldr	r2, [r7, #8]
 8006702:	429a      	cmp	r2, r3
 8006704:	d302      	bcc.n	800670c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d11d      	bne.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	f003 0304 	and.w	r3, r3, #4
 8006716:	2b04      	cmp	r3, #4
 8006718:	d016      	beq.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	f043 0220 	orr.w	r2, r3, #32
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e007      	b.n	8006758 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b04      	cmp	r3, #4
 8006754:	d1c3      	bne.n	80066de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3710      	adds	r7, #16
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800676c:	e049      	b.n	8006802 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	f003 0310 	and.w	r3, r3, #16
 8006778:	2b10      	cmp	r3, #16
 800677a:	d119      	bne.n	80067b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f06f 0210 	mvn.w	r2, #16
 8006784:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e030      	b.n	8006812 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067b0:	f7fd fce2 	bl	8004178 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d302      	bcc.n	80067c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d11d      	bne.n	8006802 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d0:	2b40      	cmp	r3, #64	@ 0x40
 80067d2:	d016      	beq.n	8006802 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ee:	f043 0220 	orr.w	r2, r3, #32
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e007      	b.n	8006812 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	695b      	ldr	r3, [r3, #20]
 8006808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800680c:	2b40      	cmp	r3, #64	@ 0x40
 800680e:	d1ae      	bne.n	800676e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800681a:	b480      	push	{r7}
 800681c:	b083      	sub	sp, #12
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	695b      	ldr	r3, [r3, #20]
 8006828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006830:	d11b      	bne.n	800686a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800683a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006856:	f043 0204 	orr.w	r2, r3, #4
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e000      	b.n	800686c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	bc80      	pop	{r7}
 8006874:	4770      	bx	lr
	...

08006878 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	@ 0x28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e23b      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d050      	beq.n	8006938 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006896:	4b9e      	ldr	r3, [pc, #632]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 030c 	and.w	r3, r3, #12
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d00c      	beq.n	80068bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068a2:	4b9b      	ldr	r3, [pc, #620]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068aa:	2b08      	cmp	r3, #8
 80068ac:	d112      	bne.n	80068d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ae:	4b98      	ldr	r3, [pc, #608]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80068ba:	d10b      	bne.n	80068d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068bc:	4b94      	ldr	r3, [pc, #592]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d036      	beq.n	8006936 <HAL_RCC_OscConfig+0xbe>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d132      	bne.n	8006936 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e216      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	4b8e      	ldr	r3, [pc, #568]	@ (8006b14 <HAL_RCC_OscConfig+0x29c>)
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d013      	beq.n	800690e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068e6:	f7fd fc47 	bl	8004178 <HAL_GetTick>
 80068ea:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ec:	e008      	b.n	8006900 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ee:	f7fd fc43 	bl	8004178 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b64      	cmp	r3, #100	@ 0x64
 80068fa:	d901      	bls.n	8006900 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e200      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006900:	4b83      	ldr	r3, [pc, #524]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0f0      	beq.n	80068ee <HAL_RCC_OscConfig+0x76>
 800690c:	e014      	b.n	8006938 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800690e:	f7fd fc33 	bl	8004178 <HAL_GetTick>
 8006912:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006914:	e008      	b.n	8006928 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006916:	f7fd fc2f 	bl	8004178 <HAL_GetTick>
 800691a:	4602      	mov	r2, r0
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	1ad3      	subs	r3, r2, r3
 8006920:	2b64      	cmp	r3, #100	@ 0x64
 8006922:	d901      	bls.n	8006928 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8006924:	2303      	movs	r3, #3
 8006926:	e1ec      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006928:	4b79      	ldr	r3, [pc, #484]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1f0      	bne.n	8006916 <HAL_RCC_OscConfig+0x9e>
 8006934:	e000      	b.n	8006938 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006936:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b00      	cmp	r3, #0
 8006942:	d077      	beq.n	8006a34 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006944:	4b72      	ldr	r3, [pc, #456]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	f003 030c 	and.w	r3, r3, #12
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006950:	4b6f      	ldr	r3, [pc, #444]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006958:	2b08      	cmp	r3, #8
 800695a:	d126      	bne.n	80069aa <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800695c:	4b6c      	ldr	r3, [pc, #432]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d120      	bne.n	80069aa <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006968:	4b69      	ldr	r3, [pc, #420]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_OscConfig+0x108>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d001      	beq.n	8006980 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e1c0      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006980:	4b63      	ldr	r3, [pc, #396]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	21f8      	movs	r1, #248	@ 0xf8
 800698e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006990:	69b9      	ldr	r1, [r7, #24]
 8006992:	fa91 f1a1 	rbit	r1, r1
 8006996:	6179      	str	r1, [r7, #20]
  return result;
 8006998:	6979      	ldr	r1, [r7, #20]
 800699a:	fab1 f181 	clz	r1, r1
 800699e:	b2c9      	uxtb	r1, r1
 80069a0:	408b      	lsls	r3, r1
 80069a2:	495b      	ldr	r1, [pc, #364]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 80069a4:	4313      	orrs	r3, r2
 80069a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069a8:	e044      	b.n	8006a34 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d02a      	beq.n	8006a08 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069b2:	4b59      	ldr	r3, [pc, #356]	@ (8006b18 <HAL_RCC_OscConfig+0x2a0>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069b8:	f7fd fbde 	bl	8004178 <HAL_GetTick>
 80069bc:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069c0:	f7fd fbda 	bl	8004178 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e197      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069de:	4b4c      	ldr	r3, [pc, #304]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	21f8      	movs	r1, #248	@ 0xf8
 80069ec:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ee:	6939      	ldr	r1, [r7, #16]
 80069f0:	fa91 f1a1 	rbit	r1, r1
 80069f4:	60f9      	str	r1, [r7, #12]
  return result;
 80069f6:	68f9      	ldr	r1, [r7, #12]
 80069f8:	fab1 f181 	clz	r1, r1
 80069fc:	b2c9      	uxtb	r1, r1
 80069fe:	408b      	lsls	r3, r1
 8006a00:	4943      	ldr	r1, [pc, #268]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	600b      	str	r3, [r1, #0]
 8006a06:	e015      	b.n	8006a34 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a08:	4b43      	ldr	r3, [pc, #268]	@ (8006b18 <HAL_RCC_OscConfig+0x2a0>)
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a0e:	f7fd fbb3 	bl	8004178 <HAL_GetTick>
 8006a12:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a14:	e008      	b.n	8006a28 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a16:	f7fd fbaf 	bl	8004178 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e16c      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a28:	4b39      	ldr	r3, [pc, #228]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1f0      	bne.n	8006a16 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0308 	and.w	r3, r3, #8
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d030      	beq.n	8006aa2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695b      	ldr	r3, [r3, #20]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d016      	beq.n	8006a76 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a48:	4b34      	ldr	r3, [pc, #208]	@ (8006b1c <HAL_RCC_OscConfig+0x2a4>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a4e:	f7fd fb93 	bl	8004178 <HAL_GetTick>
 8006a52:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a54:	e008      	b.n	8006a68 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a56:	f7fd fb8f 	bl	8004178 <HAL_GetTick>
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	1ad3      	subs	r3, r2, r3
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d901      	bls.n	8006a68 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8006a64:	2303      	movs	r3, #3
 8006a66:	e14c      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a68:	4b29      	ldr	r3, [pc, #164]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006a6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a6c:	f003 0302 	and.w	r3, r3, #2
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d0f0      	beq.n	8006a56 <HAL_RCC_OscConfig+0x1de>
 8006a74:	e015      	b.n	8006aa2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a76:	4b29      	ldr	r3, [pc, #164]	@ (8006b1c <HAL_RCC_OscConfig+0x2a4>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a7c:	f7fd fb7c 	bl	8004178 <HAL_GetTick>
 8006a80:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a84:	f7fd fb78 	bl	8004178 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e135      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a96:	4b1e      	ldr	r3, [pc, #120]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006a98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1f0      	bne.n	8006a84 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	f000 8087 	beq.w	8006bbe <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ab6:	4b16      	ldr	r3, [pc, #88]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d110      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	60bb      	str	r3, [r7, #8]
 8006ac6:	4b12      	ldr	r3, [pc, #72]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aca:	4a11      	ldr	r2, [pc, #68]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006ad2:	4b0f      	ldr	r3, [pc, #60]	@ (8006b10 <HAL_RCC_OscConfig+0x298>)
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ada:	60bb      	str	r3, [r7, #8]
 8006adc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8006b20 <HAL_RCC_OscConfig+0x2a8>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8006b20 <HAL_RCC_OscConfig+0x2a8>)
 8006aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006aee:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006af0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b20 <HAL_RCC_OscConfig+0x2a8>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d122      	bne.n	8006b42 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006afc:	4b08      	ldr	r3, [pc, #32]	@ (8006b20 <HAL_RCC_OscConfig+0x2a8>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a07      	ldr	r2, [pc, #28]	@ (8006b20 <HAL_RCC_OscConfig+0x2a8>)
 8006b02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b08:	f7fd fb36 	bl	8004178 <HAL_GetTick>
 8006b0c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b0e:	e012      	b.n	8006b36 <HAL_RCC_OscConfig+0x2be>
 8006b10:	40023800 	.word	0x40023800
 8006b14:	40023802 	.word	0x40023802
 8006b18:	42470000 	.word	0x42470000
 8006b1c:	42470e80 	.word	0x42470e80
 8006b20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b24:	f7fd fb28 	bl	8004178 <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	6a3b      	ldr	r3, [r7, #32]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e0e5      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b36:	4b75      	ldr	r3, [pc, #468]	@ (8006d0c <HAL_RCC_OscConfig+0x494>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0f0      	beq.n	8006b24 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	689a      	ldr	r2, [r3, #8]
 8006b46:	4b72      	ldr	r3, [pc, #456]	@ (8006d10 <HAL_RCC_OscConfig+0x498>)
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d015      	beq.n	8006b80 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b54:	f7fd fb10 	bl	8004178 <HAL_GetTick>
 8006b58:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5a:	e00a      	b.n	8006b72 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b5c:	f7fd fb0c 	bl	8004178 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d901      	bls.n	8006b72 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	e0c7      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b72:	4b68      	ldr	r3, [pc, #416]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b76:	f003 0302 	and.w	r3, r3, #2
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d0ee      	beq.n	8006b5c <HAL_RCC_OscConfig+0x2e4>
 8006b7e:	e014      	b.n	8006baa <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b80:	f7fd fafa 	bl	8004178 <HAL_GetTick>
 8006b84:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b86:	e00a      	b.n	8006b9e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b88:	f7fd faf6 	bl	8004178 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	6a3b      	ldr	r3, [r7, #32]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e0b1      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1ee      	bne.n	8006b88 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006baa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d105      	bne.n	8006bbe <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bb2:	4b58      	ldr	r3, [pc, #352]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb6:	4a57      	ldr	r2, [pc, #348]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006bb8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bbc:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 809c 	beq.w	8006d00 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bc8:	4b52      	ldr	r3, [pc, #328]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f003 030c 	and.w	r3, r3, #12
 8006bd0:	2b08      	cmp	r3, #8
 8006bd2:	d061      	beq.n	8006c98 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d146      	bne.n	8006c6a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8006d18 <HAL_RCC_OscConfig+0x4a0>)
 8006bde:	2200      	movs	r2, #0
 8006be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be2:	f7fd fac9 	bl	8004178 <HAL_GetTick>
 8006be6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be8:	e008      	b.n	8006bfc <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bea:	f7fd fac5 	bl	8004178 <HAL_GetTick>
 8006bee:	4602      	mov	r2, r0
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	1ad3      	subs	r3, r2, r3
 8006bf4:	2b64      	cmp	r3, #100	@ 0x64
 8006bf6:	d901      	bls.n	8006bfc <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e082      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bfc:	4b45      	ldr	r3, [pc, #276]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1f0      	bne.n	8006bea <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c08:	4b42      	ldr	r3, [pc, #264]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	4b43      	ldr	r3, [pc, #268]	@ (8006d1c <HAL_RCC_OscConfig+0x4a4>)
 8006c0e:	4013      	ands	r3, r2
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	69d1      	ldr	r1, [r2, #28]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6a12      	ldr	r2, [r2, #32]
 8006c18:	4311      	orrs	r1, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c1e:	0192      	lsls	r2, r2, #6
 8006c20:	4311      	orrs	r1, r2
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006c26:	0612      	lsls	r2, r2, #24
 8006c28:	4311      	orrs	r1, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006c2e:	0852      	lsrs	r2, r2, #1
 8006c30:	3a01      	subs	r2, #1
 8006c32:	0412      	lsls	r2, r2, #16
 8006c34:	430a      	orrs	r2, r1
 8006c36:	4937      	ldr	r1, [pc, #220]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c3c:	4b36      	ldr	r3, [pc, #216]	@ (8006d18 <HAL_RCC_OscConfig+0x4a0>)
 8006c3e:	2201      	movs	r2, #1
 8006c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c42:	f7fd fa99 	bl	8004178 <HAL_GetTick>
 8006c46:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c48:	e008      	b.n	8006c5c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c4a:	f7fd fa95 	bl	8004178 <HAL_GetTick>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b64      	cmp	r3, #100	@ 0x64
 8006c56:	d901      	bls.n	8006c5c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e052      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c5c:	4b2d      	ldr	r3, [pc, #180]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0f0      	beq.n	8006c4a <HAL_RCC_OscConfig+0x3d2>
 8006c68:	e04a      	b.n	8006d00 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8006d18 <HAL_RCC_OscConfig+0x4a0>)
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c70:	f7fd fa82 	bl	8004178 <HAL_GetTick>
 8006c74:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c76:	e008      	b.n	8006c8a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c78:	f7fd fa7e 	bl	8004178 <HAL_GetTick>
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	1ad3      	subs	r3, r2, r3
 8006c82:	2b64      	cmp	r3, #100	@ 0x64
 8006c84:	d901      	bls.n	8006c8a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8006c86:	2303      	movs	r3, #3
 8006c88:	e03b      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c8a:	4b22      	ldr	r3, [pc, #136]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1f0      	bne.n	8006c78 <HAL_RCC_OscConfig+0x400>
 8006c96:	e033      	b.n	8006d00 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	699b      	ldr	r3, [r3, #24]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e02e      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8006ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d14 <HAL_RCC_OscConfig+0x49c>)
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	69db      	ldr	r3, [r3, #28]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d121      	bne.n	8006cfc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d11a      	bne.n	8006cfc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006ccc:	4013      	ands	r3, r2
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cd2:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d111      	bne.n	8006cfc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce2:	085b      	lsrs	r3, r3, #1
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d107      	bne.n	8006cfc <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf6:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d001      	beq.n	8006d00 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e000      	b.n	8006d02 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3728      	adds	r7, #40	@ 0x28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40007000 	.word	0x40007000
 8006d10:	40023870 	.word	0x40023870
 8006d14:	40023800 	.word	0x40023800
 8006d18:	42470060 	.word	0x42470060
 8006d1c:	f0bc8000 	.word	0xf0bc8000

08006d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b086      	sub	sp, #24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
 8006d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d101      	bne.n	8006d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d30:	2301      	movs	r3, #1
 8006d32:	e0d2      	b.n	8006eda <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d34:	4b6b      	ldr	r3, [pc, #428]	@ (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d90c      	bls.n	8006d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d42:	4b68      	ldr	r3, [pc, #416]	@ (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4a:	4b66      	ldr	r3, [pc, #408]	@ (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	683a      	ldr	r2, [r7, #0]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d001      	beq.n	8006d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0be      	b.n	8006eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0302 	and.w	r3, r3, #2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d020      	beq.n	8006daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d74:	4b5c      	ldr	r3, [pc, #368]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	4a5b      	ldr	r2, [pc, #364]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8006d8c:	4b56      	ldr	r3, [pc, #344]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	4a55      	ldr	r2, [pc, #340]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d98:	4b53      	ldr	r3, [pc, #332]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	4950      	ldr	r1, [pc, #320]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006da6:	4313      	orrs	r3, r2
 8006da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 0301 	and.w	r3, r3, #1
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d040      	beq.n	8006e38 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d107      	bne.n	8006dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d115      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e085      	b.n	8006eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2b02      	cmp	r3, #2
 8006dd4:	d107      	bne.n	8006de6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dd6:	4b44      	ldr	r3, [pc, #272]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d109      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	e079      	b.n	8006eda <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006de6:	4b40      	ldr	r3, [pc, #256]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d101      	bne.n	8006df6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e071      	b.n	8006eda <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006df6:	4b3c      	ldr	r3, [pc, #240]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f023 0203 	bic.w	r2, r3, #3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	4939      	ldr	r1, [pc, #228]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e08:	f7fd f9b6 	bl	8004178 <HAL_GetTick>
 8006e0c:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e0e:	e00a      	b.n	8006e26 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e10:	f7fd f9b2 	bl	8004178 <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e059      	b.n	8006eda <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e26:	4b30      	ldr	r3, [pc, #192]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 020c 	and.w	r2, r3, #12
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d1eb      	bne.n	8006e10 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e38:	4b2a      	ldr	r3, [pc, #168]	@ (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 030f 	and.w	r3, r3, #15
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	d20c      	bcs.n	8006e60 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e46:	4b27      	ldr	r3, [pc, #156]	@ (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e48:	683a      	ldr	r2, [r7, #0]
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e4e:	4b25      	ldr	r3, [pc, #148]	@ (8006ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f003 030f 	and.w	r3, r3, #15
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d001      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e03c      	b.n	8006eda <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d008      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	491b      	ldr	r1, [pc, #108]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d009      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e8a:	4b17      	ldr	r3, [pc, #92]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	00db      	lsls	r3, r3, #3
 8006e98:	4913      	ldr	r1, [pc, #76]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8006e9e:	f000 f82b 	bl	8006ef8 <HAL_RCC_GetSysClockFreq>
 8006ea2:	4601      	mov	r1, r0
 8006ea4:	4b10      	ldr	r3, [pc, #64]	@ (8006ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006eac:	22f0      	movs	r2, #240	@ 0xf0
 8006eae:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	fa92 f2a2 	rbit	r2, r2
 8006eb6:	60fa      	str	r2, [r7, #12]
  return result;
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	fab2 f282 	clz	r2, r2
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	40d3      	lsrs	r3, r2
 8006ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8006eec <HAL_RCC_ClockConfig+0x1cc>)
 8006ec4:	5cd3      	ldrb	r3, [r2, r3]
 8006ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8006eca:	4a09      	ldr	r2, [pc, #36]	@ (8006ef0 <HAL_RCC_ClockConfig+0x1d0>)
 8006ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ece:	4b09      	ldr	r3, [pc, #36]	@ (8006ef4 <HAL_RCC_ClockConfig+0x1d4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	f7fd f90e 	bl	80040f4 <HAL_InitTick>

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3718      	adds	r7, #24
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	40023c00 	.word	0x40023c00
 8006ee8:	40023800 	.word	0x40023800
 8006eec:	080084d8 	.word	0x080084d8
 8006ef0:	20000028 	.word	0x20000028
 8006ef4:	20000034 	.word	0x20000034

08006ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006efc:	b090      	sub	sp, #64	@ 0x40
 8006efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f04:	2300      	movs	r3, #0
 8006f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f08:	2300      	movs	r3, #0
 8006f0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f10:	4b59      	ldr	r3, [pc, #356]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	f003 030c 	and.w	r3, r3, #12
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d00d      	beq.n	8006f38 <HAL_RCC_GetSysClockFreq+0x40>
 8006f1c:	2b08      	cmp	r3, #8
 8006f1e:	f200 80a2 	bhi.w	8007066 <HAL_RCC_GetSysClockFreq+0x16e>
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d002      	beq.n	8006f2c <HAL_RCC_GetSysClockFreq+0x34>
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	d003      	beq.n	8006f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8006f2a:	e09c      	b.n	8007066 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f2c:	4b53      	ldr	r3, [pc, #332]	@ (800707c <HAL_RCC_GetSysClockFreq+0x184>)
 8006f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8006f30:	e09c      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f32:	4b53      	ldr	r3, [pc, #332]	@ (8007080 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006f36:	e099      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f38:	4b4f      	ldr	r3, [pc, #316]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f40:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f42:	4b4d      	ldr	r3, [pc, #308]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d027      	beq.n	8006f9e <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	099b      	lsrs	r3, r3, #6
 8006f54:	2200      	movs	r2, #0
 8006f56:	623b      	str	r3, [r7, #32]
 8006f58:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006f60:	2100      	movs	r1, #0
 8006f62:	4b47      	ldr	r3, [pc, #284]	@ (8007080 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f64:	fb03 f201 	mul.w	r2, r3, r1
 8006f68:	2300      	movs	r3, #0
 8006f6a:	fb00 f303 	mul.w	r3, r0, r3
 8006f6e:	4413      	add	r3, r2
 8006f70:	4a43      	ldr	r2, [pc, #268]	@ (8007080 <HAL_RCC_GetSysClockFreq+0x188>)
 8006f72:	fba0 2102 	umull	r2, r1, r0, r2
 8006f76:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006f78:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006f7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f7c:	4413      	add	r3, r2
 8006f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f82:	2200      	movs	r2, #0
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	61fa      	str	r2, [r7, #28]
 8006f88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006f90:	f7fa f902 	bl	8001198 <__aeabi_uldivmod>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4613      	mov	r3, r2
 8006f9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f9c:	e055      	b.n	800704a <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f9e:	4b36      	ldr	r3, [pc, #216]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x180>)
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	099b      	lsrs	r3, r3, #6
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	617a      	str	r2, [r7, #20]
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006fb0:	f04f 0b00 	mov.w	fp, #0
 8006fb4:	4652      	mov	r2, sl
 8006fb6:	465b      	mov	r3, fp
 8006fb8:	f04f 0000 	mov.w	r0, #0
 8006fbc:	f04f 0100 	mov.w	r1, #0
 8006fc0:	0159      	lsls	r1, r3, #5
 8006fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fc6:	0150      	lsls	r0, r2, #5
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	ebb2 080a 	subs.w	r8, r2, sl
 8006fd0:	eb63 090b 	sbc.w	r9, r3, fp
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006fe0:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006fe4:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006fe8:	ebb2 0408 	subs.w	r4, r2, r8
 8006fec:	eb63 0509 	sbc.w	r5, r3, r9
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	00eb      	lsls	r3, r5, #3
 8006ffa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ffe:	00e2      	lsls	r2, r4, #3
 8007000:	4614      	mov	r4, r2
 8007002:	461d      	mov	r5, r3
 8007004:	eb14 030a 	adds.w	r3, r4, sl
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	eb45 030b 	adc.w	r3, r5, fp
 800700e:	607b      	str	r3, [r7, #4]
 8007010:	f04f 0200 	mov.w	r2, #0
 8007014:	f04f 0300 	mov.w	r3, #0
 8007018:	e9d7 4500 	ldrd	r4, r5, [r7]
 800701c:	4629      	mov	r1, r5
 800701e:	028b      	lsls	r3, r1, #10
 8007020:	4620      	mov	r0, r4
 8007022:	4629      	mov	r1, r5
 8007024:	4604      	mov	r4, r0
 8007026:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 800702a:	4601      	mov	r1, r0
 800702c:	028a      	lsls	r2, r1, #10
 800702e:	4610      	mov	r0, r2
 8007030:	4619      	mov	r1, r3
 8007032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007034:	2200      	movs	r2, #0
 8007036:	60bb      	str	r3, [r7, #8]
 8007038:	60fa      	str	r2, [r7, #12]
 800703a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800703e:	f7fa f8ab 	bl	8001198 <__aeabi_uldivmod>
 8007042:	4602      	mov	r2, r0
 8007044:	460b      	mov	r3, r1
 8007046:	4613      	mov	r3, r2
 8007048:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800704a:	4b0b      	ldr	r3, [pc, #44]	@ (8007078 <HAL_RCC_GetSysClockFreq+0x180>)
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	0c1b      	lsrs	r3, r3, #16
 8007050:	f003 0303 	and.w	r3, r3, #3
 8007054:	3301      	adds	r3, #1
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800705a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007062:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007064:	e002      	b.n	800706c <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007066:	4b05      	ldr	r3, [pc, #20]	@ (800707c <HAL_RCC_GetSysClockFreq+0x184>)
 8007068:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800706a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800706c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800706e:	4618      	mov	r0, r3
 8007070:	3740      	adds	r7, #64	@ 0x40
 8007072:	46bd      	mov	sp, r7
 8007074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007078:	40023800 	.word	0x40023800
 800707c:	00f42400 	.word	0x00f42400
 8007080:	017d7840 	.word	0x017d7840

08007084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007088:	4b02      	ldr	r3, [pc, #8]	@ (8007094 <HAL_RCC_GetHCLKFreq+0x10>)
 800708a:	681b      	ldr	r3, [r3, #0]
}
 800708c:	4618      	mov	r0, r3
 800708e:	46bd      	mov	sp, r7
 8007090:	bc80      	pop	{r7}
 8007092:	4770      	bx	lr
 8007094:	20000028 	.word	0x20000028

08007098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800709e:	f7ff fff1 	bl	8007084 <HAL_RCC_GetHCLKFreq>
 80070a2:	4601      	mov	r1, r0
 80070a4:	4b0b      	ldr	r3, [pc, #44]	@ (80070d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80070ac:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 80070b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	fa92 f2a2 	rbit	r2, r2
 80070b8:	603a      	str	r2, [r7, #0]
  return result;
 80070ba:	683a      	ldr	r2, [r7, #0]
 80070bc:	fab2 f282 	clz	r2, r2
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	40d3      	lsrs	r3, r2
 80070c4:	4a04      	ldr	r2, [pc, #16]	@ (80070d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80070c6:	5cd3      	ldrb	r3, [r2, r3]
 80070c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40023800 	.word	0x40023800
 80070d8:	080084e8 	.word	0x080084e8

080070dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b082      	sub	sp, #8
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e041      	b.n	8007172 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d106      	bne.n	8007108 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7fc fe14 	bl	8003d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2202      	movs	r2, #2
 800710c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3304      	adds	r3, #4
 8007118:	4619      	mov	r1, r3
 800711a:	4610      	mov	r0, r2
 800711c:	f000 fd2e 	bl	8007b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	3708      	adds	r7, #8
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b01      	cmp	r3, #1
 800718e:	d001      	beq.n	8007194 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e046      	b.n	8007222 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2202      	movs	r2, #2
 8007198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a22      	ldr	r2, [pc, #136]	@ (800722c <HAL_TIM_Base_Start+0xb0>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d022      	beq.n	80071ec <HAL_TIM_Base_Start+0x70>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071ae:	d01d      	beq.n	80071ec <HAL_TIM_Base_Start+0x70>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a1e      	ldr	r2, [pc, #120]	@ (8007230 <HAL_TIM_Base_Start+0xb4>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d018      	beq.n	80071ec <HAL_TIM_Base_Start+0x70>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a1d      	ldr	r2, [pc, #116]	@ (8007234 <HAL_TIM_Base_Start+0xb8>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d013      	beq.n	80071ec <HAL_TIM_Base_Start+0x70>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007238 <HAL_TIM_Base_Start+0xbc>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d00e      	beq.n	80071ec <HAL_TIM_Base_Start+0x70>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a1a      	ldr	r2, [pc, #104]	@ (800723c <HAL_TIM_Base_Start+0xc0>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d009      	beq.n	80071ec <HAL_TIM_Base_Start+0x70>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a18      	ldr	r2, [pc, #96]	@ (8007240 <HAL_TIM_Base_Start+0xc4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d004      	beq.n	80071ec <HAL_TIM_Base_Start+0x70>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a17      	ldr	r2, [pc, #92]	@ (8007244 <HAL_TIM_Base_Start+0xc8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d111      	bne.n	8007210 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	f003 0307 	and.w	r3, r3, #7
 80071f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2b06      	cmp	r3, #6
 80071fc:	d010      	beq.n	8007220 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0201 	orr.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720e:	e007      	b.n	8007220 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	bc80      	pop	{r7}
 800722a:	4770      	bx	lr
 800722c:	40010000 	.word	0x40010000
 8007230:	40000400 	.word	0x40000400
 8007234:	40000800 	.word	0x40000800
 8007238:	40000c00 	.word	0x40000c00
 800723c:	40010400 	.word	0x40010400
 8007240:	40014000 	.word	0x40014000
 8007244:	40001800 	.word	0x40001800

08007248 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b01      	cmp	r3, #1
 800725a:	d001      	beq.n	8007260 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e04e      	b.n	80072fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f042 0201 	orr.w	r2, r2, #1
 8007276:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a22      	ldr	r2, [pc, #136]	@ (8007308 <HAL_TIM_Base_Start_IT+0xc0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d022      	beq.n	80072c8 <HAL_TIM_Base_Start_IT+0x80>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800728a:	d01d      	beq.n	80072c8 <HAL_TIM_Base_Start_IT+0x80>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1e      	ldr	r2, [pc, #120]	@ (800730c <HAL_TIM_Base_Start_IT+0xc4>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d018      	beq.n	80072c8 <HAL_TIM_Base_Start_IT+0x80>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1d      	ldr	r2, [pc, #116]	@ (8007310 <HAL_TIM_Base_Start_IT+0xc8>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d013      	beq.n	80072c8 <HAL_TIM_Base_Start_IT+0x80>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007314 <HAL_TIM_Base_Start_IT+0xcc>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d00e      	beq.n	80072c8 <HAL_TIM_Base_Start_IT+0x80>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007318 <HAL_TIM_Base_Start_IT+0xd0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d009      	beq.n	80072c8 <HAL_TIM_Base_Start_IT+0x80>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a18      	ldr	r2, [pc, #96]	@ (800731c <HAL_TIM_Base_Start_IT+0xd4>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d004      	beq.n	80072c8 <HAL_TIM_Base_Start_IT+0x80>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a17      	ldr	r2, [pc, #92]	@ (8007320 <HAL_TIM_Base_Start_IT+0xd8>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d111      	bne.n	80072ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	f003 0307 	and.w	r3, r3, #7
 80072d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b06      	cmp	r3, #6
 80072d8:	d010      	beq.n	80072fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0201 	orr.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ea:	e007      	b.n	80072fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0201 	orr.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	bc80      	pop	{r7}
 8007306:	4770      	bx	lr
 8007308:	40010000 	.word	0x40010000
 800730c:	40000400 	.word	0x40000400
 8007310:	40000800 	.word	0x40000800
 8007314:	40000c00 	.word	0x40000c00
 8007318:	40010400 	.word	0x40010400
 800731c:	40014000 	.word	0x40014000
 8007320:	40001800 	.word	0x40001800

08007324 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b082      	sub	sp, #8
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e041      	b.n	80073ba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800733c:	b2db      	uxtb	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d106      	bne.n	8007350 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7fc fc4a 	bl	8003be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2202      	movs	r2, #2
 8007354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	3304      	adds	r3, #4
 8007360:	4619      	mov	r1, r3
 8007362:	4610      	mov	r0, r2
 8007364:	f000 fc0a 	bl	8007b7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3708      	adds	r7, #8
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
	...

080073c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b084      	sub	sp, #16
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d109      	bne.n	80073e8 <HAL_TIM_PWM_Start+0x24>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b01      	cmp	r3, #1
 80073de:	bf14      	ite	ne
 80073e0:	2301      	movne	r3, #1
 80073e2:	2300      	moveq	r3, #0
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	e022      	b.n	800742e <HAL_TIM_PWM_Start+0x6a>
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	2b04      	cmp	r3, #4
 80073ec:	d109      	bne.n	8007402 <HAL_TIM_PWM_Start+0x3e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	bf14      	ite	ne
 80073fa:	2301      	movne	r3, #1
 80073fc:	2300      	moveq	r3, #0
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	e015      	b.n	800742e <HAL_TIM_PWM_Start+0x6a>
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b08      	cmp	r3, #8
 8007406:	d109      	bne.n	800741c <HAL_TIM_PWM_Start+0x58>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	bf14      	ite	ne
 8007414:	2301      	movne	r3, #1
 8007416:	2300      	moveq	r3, #0
 8007418:	b2db      	uxtb	r3, r3
 800741a:	e008      	b.n	800742e <HAL_TIM_PWM_Start+0x6a>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007422:	b2db      	uxtb	r3, r3
 8007424:	2b01      	cmp	r3, #1
 8007426:	bf14      	ite	ne
 8007428:	2301      	movne	r3, #1
 800742a:	2300      	moveq	r3, #0
 800742c:	b2db      	uxtb	r3, r3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d001      	beq.n	8007436 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e07c      	b.n	8007530 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <HAL_TIM_PWM_Start+0x82>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007444:	e013      	b.n	800746e <HAL_TIM_PWM_Start+0xaa>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b04      	cmp	r3, #4
 800744a:	d104      	bne.n	8007456 <HAL_TIM_PWM_Start+0x92>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007454:	e00b      	b.n	800746e <HAL_TIM_PWM_Start+0xaa>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b08      	cmp	r3, #8
 800745a:	d104      	bne.n	8007466 <HAL_TIM_PWM_Start+0xa2>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007464:	e003      	b.n	800746e <HAL_TIM_PWM_Start+0xaa>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2202      	movs	r2, #2
 800746a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2201      	movs	r2, #1
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	4618      	mov	r0, r3
 8007478:	f000 fdd6 	bl	8008028 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4a2d      	ldr	r2, [pc, #180]	@ (8007538 <HAL_TIM_PWM_Start+0x174>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d004      	beq.n	8007490 <HAL_TIM_PWM_Start+0xcc>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4a2c      	ldr	r2, [pc, #176]	@ (800753c <HAL_TIM_PWM_Start+0x178>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d101      	bne.n	8007494 <HAL_TIM_PWM_Start+0xd0>
 8007490:	2301      	movs	r3, #1
 8007492:	e000      	b.n	8007496 <HAL_TIM_PWM_Start+0xd2>
 8007494:	2300      	movs	r3, #0
 8007496:	2b00      	cmp	r3, #0
 8007498:	d007      	beq.n	80074aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a22      	ldr	r2, [pc, #136]	@ (8007538 <HAL_TIM_PWM_Start+0x174>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d022      	beq.n	80074fa <HAL_TIM_PWM_Start+0x136>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074bc:	d01d      	beq.n	80074fa <HAL_TIM_PWM_Start+0x136>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007540 <HAL_TIM_PWM_Start+0x17c>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d018      	beq.n	80074fa <HAL_TIM_PWM_Start+0x136>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a1d      	ldr	r2, [pc, #116]	@ (8007544 <HAL_TIM_PWM_Start+0x180>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d013      	beq.n	80074fa <HAL_TIM_PWM_Start+0x136>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a1c      	ldr	r2, [pc, #112]	@ (8007548 <HAL_TIM_PWM_Start+0x184>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d00e      	beq.n	80074fa <HAL_TIM_PWM_Start+0x136>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a16      	ldr	r2, [pc, #88]	@ (800753c <HAL_TIM_PWM_Start+0x178>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d009      	beq.n	80074fa <HAL_TIM_PWM_Start+0x136>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a18      	ldr	r2, [pc, #96]	@ (800754c <HAL_TIM_PWM_Start+0x188>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d004      	beq.n	80074fa <HAL_TIM_PWM_Start+0x136>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a16      	ldr	r2, [pc, #88]	@ (8007550 <HAL_TIM_PWM_Start+0x18c>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d111      	bne.n	800751e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f003 0307 	and.w	r3, r3, #7
 8007504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2b06      	cmp	r3, #6
 800750a:	d010      	beq.n	800752e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0201 	orr.w	r2, r2, #1
 800751a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751c:	e007      	b.n	800752e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f042 0201 	orr.w	r2, r2, #1
 800752c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800752e:	2300      	movs	r3, #0
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}
 8007538:	40010000 	.word	0x40010000
 800753c:	40010400 	.word	0x40010400
 8007540:	40000400 	.word	0x40000400
 8007544:	40000800 	.word	0x40000800
 8007548:	40000c00 	.word	0x40000c00
 800754c:	40014000 	.word	0x40014000
 8007550:	40001800 	.word	0x40001800

08007554 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e097      	b.n	8007698 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800756e:	b2db      	uxtb	r3, r3
 8007570:	2b00      	cmp	r3, #0
 8007572:	d106      	bne.n	8007582 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7fc fb59 	bl	8003c34 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2202      	movs	r2, #2
 8007586:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007598:	f023 0307 	bic.w	r3, r3, #7
 800759c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681a      	ldr	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	3304      	adds	r3, #4
 80075a6:	4619      	mov	r1, r3
 80075a8:	4610      	mov	r0, r2
 80075aa:	f000 fae7 	bl	8007b7c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6a1b      	ldr	r3, [r3, #32]
 80075c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	4313      	orrs	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075d6:	f023 0303 	bic.w	r3, r3, #3
 80075da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	689a      	ldr	r2, [r3, #8]
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	021b      	lsls	r3, r3, #8
 80075e6:	4313      	orrs	r3, r2
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80075f4:	f023 030c 	bic.w	r3, r3, #12
 80075f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007600:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68da      	ldr	r2, [r3, #12]
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	4313      	orrs	r3, r2
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	4313      	orrs	r3, r2
 8007616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	011a      	lsls	r2, r3, #4
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	031b      	lsls	r3, r3, #12
 8007624:	4313      	orrs	r3, r2
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	4313      	orrs	r3, r2
 800762a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8007632:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800763a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	695b      	ldr	r3, [r3, #20]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	4313      	orrs	r3, r2
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4313      	orrs	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	693a      	ldr	r2, [r7, #16]
 800765c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2201      	movs	r2, #1
 8007672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2201      	movs	r2, #1
 8007682:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80076b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80076b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80076c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d110      	bne.n	80076f2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80076d0:	7bfb      	ldrb	r3, [r7, #15]
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d102      	bne.n	80076dc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80076d6:	7b7b      	ldrb	r3, [r7, #13]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d001      	beq.n	80076e0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e069      	b.n	80077b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2202      	movs	r2, #2
 80076ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076f0:	e031      	b.n	8007756 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	2b04      	cmp	r3, #4
 80076f6:	d110      	bne.n	800771a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d102      	bne.n	8007704 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80076fe:	7b3b      	ldrb	r3, [r7, #12]
 8007700:	2b01      	cmp	r3, #1
 8007702:	d001      	beq.n	8007708 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e055      	b.n	80077b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2202      	movs	r2, #2
 800770c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2202      	movs	r2, #2
 8007714:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007718:	e01d      	b.n	8007756 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d108      	bne.n	8007732 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d105      	bne.n	8007732 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007726:	7b7b      	ldrb	r3, [r7, #13]
 8007728:	2b01      	cmp	r3, #1
 800772a:	d102      	bne.n	8007732 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800772c:	7b3b      	ldrb	r3, [r7, #12]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d001      	beq.n	8007736 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e03e      	b.n	80077b4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2202      	movs	r2, #2
 8007742:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2202      	movs	r2, #2
 800774a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <HAL_TIM_Encoder_Start+0xc4>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b04      	cmp	r3, #4
 8007760:	d008      	beq.n	8007774 <HAL_TIM_Encoder_Start+0xd4>
 8007762:	e00f      	b.n	8007784 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2201      	movs	r2, #1
 800776a:	2100      	movs	r1, #0
 800776c:	4618      	mov	r0, r3
 800776e:	f000 fc5b 	bl	8008028 <TIM_CCxChannelCmd>
      break;
 8007772:	e016      	b.n	80077a2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2201      	movs	r2, #1
 800777a:	2104      	movs	r1, #4
 800777c:	4618      	mov	r0, r3
 800777e:	f000 fc53 	bl	8008028 <TIM_CCxChannelCmd>
      break;
 8007782:	e00e      	b.n	80077a2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2201      	movs	r2, #1
 800778a:	2100      	movs	r1, #0
 800778c:	4618      	mov	r0, r3
 800778e:	f000 fc4b 	bl	8008028 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2201      	movs	r2, #1
 8007798:	2104      	movs	r1, #4
 800779a:	4618      	mov	r0, r3
 800779c:	f000 fc44 	bl	8008028 <TIM_CCxChannelCmd>
      break;
 80077a0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f042 0201 	orr.w	r2, r2, #1
 80077b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3710      	adds	r7, #16
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d020      	beq.n	8007820 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f003 0302 	and.w	r3, r3, #2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d01b      	beq.n	8007820 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f06f 0202 	mvn.w	r2, #2
 80077f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2201      	movs	r2, #1
 80077f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d003      	beq.n	800780e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f000 f99c 	bl	8007b44 <HAL_TIM_IC_CaptureCallback>
 800780c:	e005      	b.n	800781a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f98f 	bl	8007b32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f99e 	bl	8007b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	f003 0304 	and.w	r3, r3, #4
 8007826:	2b00      	cmp	r3, #0
 8007828:	d020      	beq.n	800786c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f003 0304 	and.w	r3, r3, #4
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01b      	beq.n	800786c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f06f 0204 	mvn.w	r2, #4
 800783c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2202      	movs	r2, #2
 8007842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699b      	ldr	r3, [r3, #24]
 800784a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f000 f976 	bl	8007b44 <HAL_TIM_IC_CaptureCallback>
 8007858:	e005      	b.n	8007866 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 f969 	bl	8007b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f978 	bl	8007b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f003 0308 	and.w	r3, r3, #8
 8007872:	2b00      	cmp	r3, #0
 8007874:	d020      	beq.n	80078b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f003 0308 	and.w	r3, r3, #8
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01b      	beq.n	80078b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f06f 0208 	mvn.w	r2, #8
 8007888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2204      	movs	r2, #4
 800788e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	69db      	ldr	r3, [r3, #28]
 8007896:	f003 0303 	and.w	r3, r3, #3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f950 	bl	8007b44 <HAL_TIM_IC_CaptureCallback>
 80078a4:	e005      	b.n	80078b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 f943 	bl	8007b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f952 	bl	8007b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f003 0310 	and.w	r3, r3, #16
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d020      	beq.n	8007904 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f003 0310 	and.w	r3, r3, #16
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01b      	beq.n	8007904 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f06f 0210 	mvn.w	r2, #16
 80078d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2208      	movs	r2, #8
 80078da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	69db      	ldr	r3, [r3, #28]
 80078e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f92a 	bl	8007b44 <HAL_TIM_IC_CaptureCallback>
 80078f0:	e005      	b.n	80078fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 f91d 	bl	8007b32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f000 f92c 	bl	8007b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00c      	beq.n	8007928 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	2b00      	cmp	r3, #0
 8007916:	d007      	beq.n	8007928 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f06f 0201 	mvn.w	r2, #1
 8007920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 f8fc 	bl	8007b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00c      	beq.n	800794c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007938:	2b00      	cmp	r3, #0
 800793a:	d007      	beq.n	800794c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 fc66 	bl	8008218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00c      	beq.n	8007970 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f8fc 	bl	8007b68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f003 0320 	and.w	r3, r3, #32
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00c      	beq.n	8007994 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f003 0320 	and.w	r3, r3, #32
 8007980:	2b00      	cmp	r3, #0
 8007982:	d007      	beq.n	8007994 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f06f 0220 	mvn.w	r2, #32
 800798c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 fc39 	bl	8008206 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007994:	bf00      	nop
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079a8:	2300      	movs	r3, #0
 80079aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e0ae      	b.n	8007b18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2201      	movs	r2, #1
 80079be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b0c      	cmp	r3, #12
 80079c6:	f200 809f 	bhi.w	8007b08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80079ca:	a201      	add	r2, pc, #4	@ (adr r2, 80079d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	08007a05 	.word	0x08007a05
 80079d4:	08007b09 	.word	0x08007b09
 80079d8:	08007b09 	.word	0x08007b09
 80079dc:	08007b09 	.word	0x08007b09
 80079e0:	08007a45 	.word	0x08007a45
 80079e4:	08007b09 	.word	0x08007b09
 80079e8:	08007b09 	.word	0x08007b09
 80079ec:	08007b09 	.word	0x08007b09
 80079f0:	08007a87 	.word	0x08007a87
 80079f4:	08007b09 	.word	0x08007b09
 80079f8:	08007b09 	.word	0x08007b09
 80079fc:	08007b09 	.word	0x08007b09
 8007a00:	08007ac7 	.word	0x08007ac7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68b9      	ldr	r1, [r7, #8]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 f960 	bl	8007cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699a      	ldr	r2, [r3, #24]
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f042 0208 	orr.w	r2, r2, #8
 8007a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699a      	ldr	r2, [r3, #24]
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0204 	bic.w	r2, r2, #4
 8007a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6999      	ldr	r1, [r3, #24]
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	691a      	ldr	r2, [r3, #16]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	619a      	str	r2, [r3, #24]
      break;
 8007a42:	e064      	b.n	8007b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68b9      	ldr	r1, [r7, #8]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 f9b0 	bl	8007db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	699a      	ldr	r2, [r3, #24]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6999      	ldr	r1, [r3, #24]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	021a      	lsls	r2, r3, #8
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	619a      	str	r2, [r3, #24]
      break;
 8007a84:	e043      	b.n	8007b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68b9      	ldr	r1, [r7, #8]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 fa03 	bl	8007e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69da      	ldr	r2, [r3, #28]
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0208 	orr.w	r2, r2, #8
 8007aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f022 0204 	bic.w	r2, r2, #4
 8007ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	69d9      	ldr	r1, [r3, #28]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	691a      	ldr	r2, [r3, #16]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	430a      	orrs	r2, r1
 8007ac2:	61da      	str	r2, [r3, #28]
      break;
 8007ac4:	e023      	b.n	8007b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	68b9      	ldr	r1, [r7, #8]
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fa57 	bl	8007f80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69da      	ldr	r2, [r3, #28]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69d9      	ldr	r1, [r3, #28]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	021a      	lsls	r2, r3, #8
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	61da      	str	r2, [r3, #28]
      break;
 8007b06:	e002      	b.n	8007b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3718      	adds	r7, #24
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bc80      	pop	{r7}
 8007b30:	4770      	bx	lr

08007b32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bc80      	pop	{r7}
 8007b42:	4770      	bx	lr

08007b44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b4c:	bf00      	nop
 8007b4e:	370c      	adds	r7, #12
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bc80      	pop	{r7}
 8007b54:	4770      	bx	lr

08007b56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b56:	b480      	push	{r7}
 8007b58:	b083      	sub	sp, #12
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bc80      	pop	{r7}
 8007b66:	4770      	bx	lr

08007b68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b68:	b480      	push	{r7}
 8007b6a:	b083      	sub	sp, #12
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bc80      	pop	{r7}
 8007b78:	4770      	bx	lr
	...

08007b7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a45      	ldr	r2, [pc, #276]	@ (8007ca4 <TIM_Base_SetConfig+0x128>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d013      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b9a:	d00f      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a42      	ldr	r2, [pc, #264]	@ (8007ca8 <TIM_Base_SetConfig+0x12c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d00b      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a41      	ldr	r2, [pc, #260]	@ (8007cac <TIM_Base_SetConfig+0x130>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d007      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a40      	ldr	r2, [pc, #256]	@ (8007cb0 <TIM_Base_SetConfig+0x134>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d003      	beq.n	8007bbc <TIM_Base_SetConfig+0x40>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a3f      	ldr	r2, [pc, #252]	@ (8007cb4 <TIM_Base_SetConfig+0x138>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d108      	bne.n	8007bce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a34      	ldr	r2, [pc, #208]	@ (8007ca4 <TIM_Base_SetConfig+0x128>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d02b      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007bdc:	d027      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a31      	ldr	r2, [pc, #196]	@ (8007ca8 <TIM_Base_SetConfig+0x12c>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d023      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a30      	ldr	r2, [pc, #192]	@ (8007cac <TIM_Base_SetConfig+0x130>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01f      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8007cb0 <TIM_Base_SetConfig+0x134>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d01b      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a2e      	ldr	r2, [pc, #184]	@ (8007cb4 <TIM_Base_SetConfig+0x138>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d017      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a2d      	ldr	r2, [pc, #180]	@ (8007cb8 <TIM_Base_SetConfig+0x13c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d013      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a2c      	ldr	r2, [pc, #176]	@ (8007cbc <TIM_Base_SetConfig+0x140>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00f      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a2b      	ldr	r2, [pc, #172]	@ (8007cc0 <TIM_Base_SetConfig+0x144>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d00b      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a2a      	ldr	r2, [pc, #168]	@ (8007cc4 <TIM_Base_SetConfig+0x148>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d007      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a29      	ldr	r2, [pc, #164]	@ (8007cc8 <TIM_Base_SetConfig+0x14c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_Base_SetConfig+0xb2>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a28      	ldr	r2, [pc, #160]	@ (8007ccc <TIM_Base_SetConfig+0x150>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d108      	bne.n	8007c40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	68fa      	ldr	r2, [r7, #12]
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	689a      	ldr	r2, [r3, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a0f      	ldr	r2, [pc, #60]	@ (8007ca4 <TIM_Base_SetConfig+0x128>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d003      	beq.n	8007c74 <TIM_Base_SetConfig+0xf8>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	4a11      	ldr	r2, [pc, #68]	@ (8007cb4 <TIM_Base_SetConfig+0x138>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d103      	bne.n	8007c7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	691a      	ldr	r2, [r3, #16]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d105      	bne.n	8007c9a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	691b      	ldr	r3, [r3, #16]
 8007c92:	f023 0201 	bic.w	r2, r3, #1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	611a      	str	r2, [r3, #16]
  }
}
 8007c9a:	bf00      	nop
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bc80      	pop	{r7}
 8007ca2:	4770      	bx	lr
 8007ca4:	40010000 	.word	0x40010000
 8007ca8:	40000400 	.word	0x40000400
 8007cac:	40000800 	.word	0x40000800
 8007cb0:	40000c00 	.word	0x40000c00
 8007cb4:	40010400 	.word	0x40010400
 8007cb8:	40014000 	.word	0x40014000
 8007cbc:	40014400 	.word	0x40014400
 8007cc0:	40014800 	.word	0x40014800
 8007cc4:	40001800 	.word	0x40001800
 8007cc8:	40001c00 	.word	0x40001c00
 8007ccc:	40002000 	.word	0x40002000

08007cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b087      	sub	sp, #28
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a1b      	ldr	r3, [r3, #32]
 8007cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	f023 0201 	bic.w	r2, r3, #1
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f023 0303 	bic.w	r3, r3, #3
 8007d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68fa      	ldr	r2, [r7, #12]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	f023 0302 	bic.w	r3, r3, #2
 8007d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4313      	orrs	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a20      	ldr	r2, [pc, #128]	@ (8007da8 <TIM_OC1_SetConfig+0xd8>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d003      	beq.n	8007d34 <TIM_OC1_SetConfig+0x64>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007dac <TIM_OC1_SetConfig+0xdc>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d10c      	bne.n	8007d4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f023 0308 	bic.w	r3, r3, #8
 8007d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	697a      	ldr	r2, [r7, #20]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	f023 0304 	bic.w	r3, r3, #4
 8007d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a15      	ldr	r2, [pc, #84]	@ (8007da8 <TIM_OC1_SetConfig+0xd8>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d003      	beq.n	8007d5e <TIM_OC1_SetConfig+0x8e>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4a14      	ldr	r2, [pc, #80]	@ (8007dac <TIM_OC1_SetConfig+0xdc>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d111      	bne.n	8007d82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	693a      	ldr	r2, [r7, #16]
 8007d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	685a      	ldr	r2, [r3, #4]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	621a      	str	r2, [r3, #32]
}
 8007d9c:	bf00      	nop
 8007d9e:	371c      	adds	r7, #28
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bc80      	pop	{r7}
 8007da4:	4770      	bx	lr
 8007da6:	bf00      	nop
 8007da8:	40010000 	.word	0x40010000
 8007dac:	40010400 	.word	0x40010400

08007db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b087      	sub	sp, #28
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6a1b      	ldr	r3, [r3, #32]
 8007dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	f023 0210 	bic.w	r2, r3, #16
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	021b      	lsls	r3, r3, #8
 8007dee:	68fa      	ldr	r2, [r7, #12]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	f023 0320 	bic.w	r3, r3, #32
 8007dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	011b      	lsls	r3, r3, #4
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a21      	ldr	r2, [pc, #132]	@ (8007e90 <TIM_OC2_SetConfig+0xe0>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d003      	beq.n	8007e18 <TIM_OC2_SetConfig+0x68>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a20      	ldr	r2, [pc, #128]	@ (8007e94 <TIM_OC2_SetConfig+0xe4>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d10d      	bne.n	8007e34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	011b      	lsls	r3, r3, #4
 8007e26:	697a      	ldr	r2, [r7, #20]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e32:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a16      	ldr	r2, [pc, #88]	@ (8007e90 <TIM_OC2_SetConfig+0xe0>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d003      	beq.n	8007e44 <TIM_OC2_SetConfig+0x94>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a15      	ldr	r2, [pc, #84]	@ (8007e94 <TIM_OC2_SetConfig+0xe4>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d113      	bne.n	8007e6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	009b      	lsls	r3, r3, #2
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	693a      	ldr	r2, [r7, #16]
 8007e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68fa      	ldr	r2, [r7, #12]
 8007e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	621a      	str	r2, [r3, #32]
}
 8007e86:	bf00      	nop
 8007e88:	371c      	adds	r7, #28
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr
 8007e90:	40010000 	.word	0x40010000
 8007e94:	40010400 	.word	0x40010400

08007e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0303 	bic.w	r3, r3, #3
 8007ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	68fa      	ldr	r2, [r7, #12]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ee0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	021b      	lsls	r3, r3, #8
 8007ee8:	697a      	ldr	r2, [r7, #20]
 8007eea:	4313      	orrs	r3, r2
 8007eec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a21      	ldr	r2, [pc, #132]	@ (8007f78 <TIM_OC3_SetConfig+0xe0>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d003      	beq.n	8007efe <TIM_OC3_SetConfig+0x66>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a20      	ldr	r2, [pc, #128]	@ (8007f7c <TIM_OC3_SetConfig+0xe4>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d10d      	bne.n	8007f1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68db      	ldr	r3, [r3, #12]
 8007f0a:	021b      	lsls	r3, r3, #8
 8007f0c:	697a      	ldr	r2, [r7, #20]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4a16      	ldr	r2, [pc, #88]	@ (8007f78 <TIM_OC3_SetConfig+0xe0>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d003      	beq.n	8007f2a <TIM_OC3_SetConfig+0x92>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a15      	ldr	r2, [pc, #84]	@ (8007f7c <TIM_OC3_SetConfig+0xe4>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d113      	bne.n	8007f52 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	695b      	ldr	r3, [r3, #20]
 8007f3e:	011b      	lsls	r3, r3, #4
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	011b      	lsls	r3, r3, #4
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	685a      	ldr	r2, [r3, #4]
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	621a      	str	r2, [r3, #32]
}
 8007f6c:	bf00      	nop
 8007f6e:	371c      	adds	r7, #28
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bc80      	pop	{r7}
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	40010000 	.word	0x40010000
 8007f7c:	40010400 	.word	0x40010400

08007f80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b087      	sub	sp, #28
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	021b      	lsls	r3, r3, #8
 8007fbe:	68fa      	ldr	r2, [r7, #12]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007fca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	031b      	lsls	r3, r3, #12
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a11      	ldr	r2, [pc, #68]	@ (8008020 <TIM_OC4_SetConfig+0xa0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d003      	beq.n	8007fe8 <TIM_OC4_SetConfig+0x68>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a10      	ldr	r2, [pc, #64]	@ (8008024 <TIM_OC4_SetConfig+0xa4>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d109      	bne.n	8007ffc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007fee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	019b      	lsls	r3, r3, #6
 8007ff6:	697a      	ldr	r2, [r7, #20]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	697a      	ldr	r2, [r7, #20]
 8008000:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	621a      	str	r2, [r3, #32]
}
 8008016:	bf00      	nop
 8008018:	371c      	adds	r7, #28
 800801a:	46bd      	mov	sp, r7
 800801c:	bc80      	pop	{r7}
 800801e:	4770      	bx	lr
 8008020:	40010000 	.word	0x40010000
 8008024:	40010400 	.word	0x40010400

08008028 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008028:	b480      	push	{r7}
 800802a:	b087      	sub	sp, #28
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	f003 031f 	and.w	r3, r3, #31
 800803a:	2201      	movs	r2, #1
 800803c:	fa02 f303 	lsl.w	r3, r2, r3
 8008040:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6a1a      	ldr	r2, [r3, #32]
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	43db      	mvns	r3, r3
 800804a:	401a      	ands	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6a1a      	ldr	r2, [r3, #32]
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	fa01 f303 	lsl.w	r3, r1, r3
 8008060:	431a      	orrs	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	621a      	str	r2, [r3, #32]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	bc80      	pop	{r7}
 800806e:	4770      	bx	lr

08008070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008080:	2b01      	cmp	r3, #1
 8008082:	d101      	bne.n	8008088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008084:	2302      	movs	r3, #2
 8008086:	e05a      	b.n	800813e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2202      	movs	r2, #2
 8008094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68fa      	ldr	r2, [r7, #12]
 80080c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a20      	ldr	r2, [pc, #128]	@ (8008148 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d022      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d4:	d01d      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a1c      	ldr	r2, [pc, #112]	@ (800814c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d018      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1a      	ldr	r2, [pc, #104]	@ (8008150 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d013      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4a19      	ldr	r2, [pc, #100]	@ (8008154 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d00e      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a17      	ldr	r2, [pc, #92]	@ (8008158 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d009      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a16      	ldr	r2, [pc, #88]	@ (800815c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d004      	beq.n	8008112 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a14      	ldr	r2, [pc, #80]	@ (8008160 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d10c      	bne.n	800812c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008118:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	4313      	orrs	r3, r2
 8008122:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68ba      	ldr	r2, [r7, #8]
 800812a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2201      	movs	r2, #1
 8008130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2200      	movs	r2, #0
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3714      	adds	r7, #20
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr
 8008148:	40010000 	.word	0x40010000
 800814c:	40000400 	.word	0x40000400
 8008150:	40000800 	.word	0x40000800
 8008154:	40000c00 	.word	0x40000c00
 8008158:	40010400 	.word	0x40010400
 800815c:	40014000 	.word	0x40014000
 8008160:	40001800 	.word	0x40001800

08008164 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008164:	b480      	push	{r7}
 8008166:	b085      	sub	sp, #20
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800817c:	2302      	movs	r3, #2
 800817e:	e03d      	b.n	80081fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	4313      	orrs	r3, r2
 8008194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4313      	orrs	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	4313      	orrs	r3, r2
 80081da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	3714      	adds	r7, #20
 8008200:	46bd      	mov	sp, r7
 8008202:	bc80      	pop	{r7}
 8008204:	4770      	bx	lr

08008206 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008206:	b480      	push	{r7}
 8008208:	b083      	sub	sp, #12
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800820e:	bf00      	nop
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	bc80      	pop	{r7}
 8008216:	4770      	bx	lr

08008218 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr
	...

0800822c <malloc>:
 800822c:	4b02      	ldr	r3, [pc, #8]	@ (8008238 <malloc+0xc>)
 800822e:	4601      	mov	r1, r0
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	f000 b82d 	b.w	8008290 <_malloc_r>
 8008236:	bf00      	nop
 8008238:	2000003c 	.word	0x2000003c

0800823c <free>:
 800823c:	4b02      	ldr	r3, [pc, #8]	@ (8008248 <free+0xc>)
 800823e:	4601      	mov	r1, r0
 8008240:	6818      	ldr	r0, [r3, #0]
 8008242:	f000 b8f5 	b.w	8008430 <_free_r>
 8008246:	bf00      	nop
 8008248:	2000003c 	.word	0x2000003c

0800824c <sbrk_aligned>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	4e0f      	ldr	r6, [pc, #60]	@ (800828c <sbrk_aligned+0x40>)
 8008250:	460c      	mov	r4, r1
 8008252:	6831      	ldr	r1, [r6, #0]
 8008254:	4605      	mov	r5, r0
 8008256:	b911      	cbnz	r1, 800825e <sbrk_aligned+0x12>
 8008258:	f000 f8ae 	bl	80083b8 <_sbrk_r>
 800825c:	6030      	str	r0, [r6, #0]
 800825e:	4621      	mov	r1, r4
 8008260:	4628      	mov	r0, r5
 8008262:	f000 f8a9 	bl	80083b8 <_sbrk_r>
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	d103      	bne.n	8008272 <sbrk_aligned+0x26>
 800826a:	f04f 34ff 	mov.w	r4, #4294967295
 800826e:	4620      	mov	r0, r4
 8008270:	bd70      	pop	{r4, r5, r6, pc}
 8008272:	1cc4      	adds	r4, r0, #3
 8008274:	f024 0403 	bic.w	r4, r4, #3
 8008278:	42a0      	cmp	r0, r4
 800827a:	d0f8      	beq.n	800826e <sbrk_aligned+0x22>
 800827c:	1a21      	subs	r1, r4, r0
 800827e:	4628      	mov	r0, r5
 8008280:	f000 f89a 	bl	80083b8 <_sbrk_r>
 8008284:	3001      	adds	r0, #1
 8008286:	d1f2      	bne.n	800826e <sbrk_aligned+0x22>
 8008288:	e7ef      	b.n	800826a <sbrk_aligned+0x1e>
 800828a:	bf00      	nop
 800828c:	2000244c 	.word	0x2000244c

08008290 <_malloc_r>:
 8008290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008294:	1ccd      	adds	r5, r1, #3
 8008296:	f025 0503 	bic.w	r5, r5, #3
 800829a:	3508      	adds	r5, #8
 800829c:	2d0c      	cmp	r5, #12
 800829e:	bf38      	it	cc
 80082a0:	250c      	movcc	r5, #12
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	4606      	mov	r6, r0
 80082a6:	db01      	blt.n	80082ac <_malloc_r+0x1c>
 80082a8:	42a9      	cmp	r1, r5
 80082aa:	d904      	bls.n	80082b6 <_malloc_r+0x26>
 80082ac:	230c      	movs	r3, #12
 80082ae:	6033      	str	r3, [r6, #0]
 80082b0:	2000      	movs	r0, #0
 80082b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800838c <_malloc_r+0xfc>
 80082ba:	f000 f869 	bl	8008390 <__malloc_lock>
 80082be:	f8d8 3000 	ldr.w	r3, [r8]
 80082c2:	461c      	mov	r4, r3
 80082c4:	bb44      	cbnz	r4, 8008318 <_malloc_r+0x88>
 80082c6:	4629      	mov	r1, r5
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7ff ffbf 	bl	800824c <sbrk_aligned>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	4604      	mov	r4, r0
 80082d2:	d158      	bne.n	8008386 <_malloc_r+0xf6>
 80082d4:	f8d8 4000 	ldr.w	r4, [r8]
 80082d8:	4627      	mov	r7, r4
 80082da:	2f00      	cmp	r7, #0
 80082dc:	d143      	bne.n	8008366 <_malloc_r+0xd6>
 80082de:	2c00      	cmp	r4, #0
 80082e0:	d04b      	beq.n	800837a <_malloc_r+0xea>
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	4639      	mov	r1, r7
 80082e6:	4630      	mov	r0, r6
 80082e8:	eb04 0903 	add.w	r9, r4, r3
 80082ec:	f000 f864 	bl	80083b8 <_sbrk_r>
 80082f0:	4581      	cmp	r9, r0
 80082f2:	d142      	bne.n	800837a <_malloc_r+0xea>
 80082f4:	6821      	ldr	r1, [r4, #0]
 80082f6:	4630      	mov	r0, r6
 80082f8:	1a6d      	subs	r5, r5, r1
 80082fa:	4629      	mov	r1, r5
 80082fc:	f7ff ffa6 	bl	800824c <sbrk_aligned>
 8008300:	3001      	adds	r0, #1
 8008302:	d03a      	beq.n	800837a <_malloc_r+0xea>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	442b      	add	r3, r5
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	f8d8 3000 	ldr.w	r3, [r8]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	bb62      	cbnz	r2, 800836c <_malloc_r+0xdc>
 8008312:	f8c8 7000 	str.w	r7, [r8]
 8008316:	e00f      	b.n	8008338 <_malloc_r+0xa8>
 8008318:	6822      	ldr	r2, [r4, #0]
 800831a:	1b52      	subs	r2, r2, r5
 800831c:	d420      	bmi.n	8008360 <_malloc_r+0xd0>
 800831e:	2a0b      	cmp	r2, #11
 8008320:	d917      	bls.n	8008352 <_malloc_r+0xc2>
 8008322:	1961      	adds	r1, r4, r5
 8008324:	42a3      	cmp	r3, r4
 8008326:	6025      	str	r5, [r4, #0]
 8008328:	bf18      	it	ne
 800832a:	6059      	strne	r1, [r3, #4]
 800832c:	6863      	ldr	r3, [r4, #4]
 800832e:	bf08      	it	eq
 8008330:	f8c8 1000 	streq.w	r1, [r8]
 8008334:	5162      	str	r2, [r4, r5]
 8008336:	604b      	str	r3, [r1, #4]
 8008338:	4630      	mov	r0, r6
 800833a:	f000 f82f 	bl	800839c <__malloc_unlock>
 800833e:	f104 000b 	add.w	r0, r4, #11
 8008342:	1d23      	adds	r3, r4, #4
 8008344:	f020 0007 	bic.w	r0, r0, #7
 8008348:	1ac2      	subs	r2, r0, r3
 800834a:	bf1c      	itt	ne
 800834c:	1a1b      	subne	r3, r3, r0
 800834e:	50a3      	strne	r3, [r4, r2]
 8008350:	e7af      	b.n	80082b2 <_malloc_r+0x22>
 8008352:	6862      	ldr	r2, [r4, #4]
 8008354:	42a3      	cmp	r3, r4
 8008356:	bf0c      	ite	eq
 8008358:	f8c8 2000 	streq.w	r2, [r8]
 800835c:	605a      	strne	r2, [r3, #4]
 800835e:	e7eb      	b.n	8008338 <_malloc_r+0xa8>
 8008360:	4623      	mov	r3, r4
 8008362:	6864      	ldr	r4, [r4, #4]
 8008364:	e7ae      	b.n	80082c4 <_malloc_r+0x34>
 8008366:	463c      	mov	r4, r7
 8008368:	687f      	ldr	r7, [r7, #4]
 800836a:	e7b6      	b.n	80082da <_malloc_r+0x4a>
 800836c:	461a      	mov	r2, r3
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	42a3      	cmp	r3, r4
 8008372:	d1fb      	bne.n	800836c <_malloc_r+0xdc>
 8008374:	2300      	movs	r3, #0
 8008376:	6053      	str	r3, [r2, #4]
 8008378:	e7de      	b.n	8008338 <_malloc_r+0xa8>
 800837a:	230c      	movs	r3, #12
 800837c:	4630      	mov	r0, r6
 800837e:	6033      	str	r3, [r6, #0]
 8008380:	f000 f80c 	bl	800839c <__malloc_unlock>
 8008384:	e794      	b.n	80082b0 <_malloc_r+0x20>
 8008386:	6005      	str	r5, [r0, #0]
 8008388:	e7d6      	b.n	8008338 <_malloc_r+0xa8>
 800838a:	bf00      	nop
 800838c:	20002450 	.word	0x20002450

08008390 <__malloc_lock>:
 8008390:	4801      	ldr	r0, [pc, #4]	@ (8008398 <__malloc_lock+0x8>)
 8008392:	f000 b84b 	b.w	800842c <__retarget_lock_acquire_recursive>
 8008396:	bf00      	nop
 8008398:	20002590 	.word	0x20002590

0800839c <__malloc_unlock>:
 800839c:	4801      	ldr	r0, [pc, #4]	@ (80083a4 <__malloc_unlock+0x8>)
 800839e:	f000 b846 	b.w	800842e <__retarget_lock_release_recursive>
 80083a2:	bf00      	nop
 80083a4:	20002590 	.word	0x20002590

080083a8 <memset>:
 80083a8:	4603      	mov	r3, r0
 80083aa:	4402      	add	r2, r0
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d100      	bne.n	80083b2 <memset+0xa>
 80083b0:	4770      	bx	lr
 80083b2:	f803 1b01 	strb.w	r1, [r3], #1
 80083b6:	e7f9      	b.n	80083ac <memset+0x4>

080083b8 <_sbrk_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	2300      	movs	r3, #0
 80083bc:	4d05      	ldr	r5, [pc, #20]	@ (80083d4 <_sbrk_r+0x1c>)
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7fb fd84 	bl	8003ed0 <_sbrk>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_sbrk_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_sbrk_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	2000258c 	.word	0x2000258c

080083d8 <__errno>:
 80083d8:	4b01      	ldr	r3, [pc, #4]	@ (80083e0 <__errno+0x8>)
 80083da:	6818      	ldr	r0, [r3, #0]
 80083dc:	4770      	bx	lr
 80083de:	bf00      	nop
 80083e0:	2000003c 	.word	0x2000003c

080083e4 <__libc_init_array>:
 80083e4:	b570      	push	{r4, r5, r6, lr}
 80083e6:	2600      	movs	r6, #0
 80083e8:	4d0c      	ldr	r5, [pc, #48]	@ (800841c <__libc_init_array+0x38>)
 80083ea:	4c0d      	ldr	r4, [pc, #52]	@ (8008420 <__libc_init_array+0x3c>)
 80083ec:	1b64      	subs	r4, r4, r5
 80083ee:	10a4      	asrs	r4, r4, #2
 80083f0:	42a6      	cmp	r6, r4
 80083f2:	d109      	bne.n	8008408 <__libc_init_array+0x24>
 80083f4:	f000 f864 	bl	80084c0 <_init>
 80083f8:	2600      	movs	r6, #0
 80083fa:	4d0a      	ldr	r5, [pc, #40]	@ (8008424 <__libc_init_array+0x40>)
 80083fc:	4c0a      	ldr	r4, [pc, #40]	@ (8008428 <__libc_init_array+0x44>)
 80083fe:	1b64      	subs	r4, r4, r5
 8008400:	10a4      	asrs	r4, r4, #2
 8008402:	42a6      	cmp	r6, r4
 8008404:	d105      	bne.n	8008412 <__libc_init_array+0x2e>
 8008406:	bd70      	pop	{r4, r5, r6, pc}
 8008408:	f855 3b04 	ldr.w	r3, [r5], #4
 800840c:	4798      	blx	r3
 800840e:	3601      	adds	r6, #1
 8008410:	e7ee      	b.n	80083f0 <__libc_init_array+0xc>
 8008412:	f855 3b04 	ldr.w	r3, [r5], #4
 8008416:	4798      	blx	r3
 8008418:	3601      	adds	r6, #1
 800841a:	e7f2      	b.n	8008402 <__libc_init_array+0x1e>
 800841c:	08008500 	.word	0x08008500
 8008420:	08008500 	.word	0x08008500
 8008424:	08008500 	.word	0x08008500
 8008428:	08008504 	.word	0x08008504

0800842c <__retarget_lock_acquire_recursive>:
 800842c:	4770      	bx	lr

0800842e <__retarget_lock_release_recursive>:
 800842e:	4770      	bx	lr

08008430 <_free_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	4605      	mov	r5, r0
 8008434:	2900      	cmp	r1, #0
 8008436:	d040      	beq.n	80084ba <_free_r+0x8a>
 8008438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800843c:	1f0c      	subs	r4, r1, #4
 800843e:	2b00      	cmp	r3, #0
 8008440:	bfb8      	it	lt
 8008442:	18e4      	addlt	r4, r4, r3
 8008444:	f7ff ffa4 	bl	8008390 <__malloc_lock>
 8008448:	4a1c      	ldr	r2, [pc, #112]	@ (80084bc <_free_r+0x8c>)
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	b933      	cbnz	r3, 800845c <_free_r+0x2c>
 800844e:	6063      	str	r3, [r4, #4]
 8008450:	6014      	str	r4, [r2, #0]
 8008452:	4628      	mov	r0, r5
 8008454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008458:	f7ff bfa0 	b.w	800839c <__malloc_unlock>
 800845c:	42a3      	cmp	r3, r4
 800845e:	d908      	bls.n	8008472 <_free_r+0x42>
 8008460:	6820      	ldr	r0, [r4, #0]
 8008462:	1821      	adds	r1, r4, r0
 8008464:	428b      	cmp	r3, r1
 8008466:	bf01      	itttt	eq
 8008468:	6819      	ldreq	r1, [r3, #0]
 800846a:	685b      	ldreq	r3, [r3, #4]
 800846c:	1809      	addeq	r1, r1, r0
 800846e:	6021      	streq	r1, [r4, #0]
 8008470:	e7ed      	b.n	800844e <_free_r+0x1e>
 8008472:	461a      	mov	r2, r3
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	b10b      	cbz	r3, 800847c <_free_r+0x4c>
 8008478:	42a3      	cmp	r3, r4
 800847a:	d9fa      	bls.n	8008472 <_free_r+0x42>
 800847c:	6811      	ldr	r1, [r2, #0]
 800847e:	1850      	adds	r0, r2, r1
 8008480:	42a0      	cmp	r0, r4
 8008482:	d10b      	bne.n	800849c <_free_r+0x6c>
 8008484:	6820      	ldr	r0, [r4, #0]
 8008486:	4401      	add	r1, r0
 8008488:	1850      	adds	r0, r2, r1
 800848a:	4283      	cmp	r3, r0
 800848c:	6011      	str	r1, [r2, #0]
 800848e:	d1e0      	bne.n	8008452 <_free_r+0x22>
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	4408      	add	r0, r1
 8008496:	6010      	str	r0, [r2, #0]
 8008498:	6053      	str	r3, [r2, #4]
 800849a:	e7da      	b.n	8008452 <_free_r+0x22>
 800849c:	d902      	bls.n	80084a4 <_free_r+0x74>
 800849e:	230c      	movs	r3, #12
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	e7d6      	b.n	8008452 <_free_r+0x22>
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	1821      	adds	r1, r4, r0
 80084a8:	428b      	cmp	r3, r1
 80084aa:	bf01      	itttt	eq
 80084ac:	6819      	ldreq	r1, [r3, #0]
 80084ae:	685b      	ldreq	r3, [r3, #4]
 80084b0:	1809      	addeq	r1, r1, r0
 80084b2:	6021      	streq	r1, [r4, #0]
 80084b4:	6063      	str	r3, [r4, #4]
 80084b6:	6054      	str	r4, [r2, #4]
 80084b8:	e7cb      	b.n	8008452 <_free_r+0x22>
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	20002450 	.word	0x20002450

080084c0 <_init>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr

080084cc <_fini>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr
