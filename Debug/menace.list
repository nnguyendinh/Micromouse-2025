
menace.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bf0  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006d78  08006d78  00007d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d98  08006d98  0000800c  2**0
                  CONTENTS
  4 .ARM          00000008  08006d98  08006d98  00007d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006da0  08006da0  0000800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006da0  08006da0  00007da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006da4  08006da4  00007da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08006da8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000000c  08006db4  0000800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08006db4  00008334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee01  00000000  00000000  00008035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e9  00000000  00000000  00016e36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00019520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf5  00000000  00000000  0001a488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f702  00000000  00000000  0001b07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014415  00000000  00000000  0003a77f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd0e8  00000000  00000000  0004eb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010bc7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004344  00000000  00000000  0010bcc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00110004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006d60 	.word	0x08006d60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08006d60 	.word	0x08006d60

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2f>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a7c:	bf24      	itt	cs
 8000a7e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a82:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a86:	d90d      	bls.n	8000aa4 <__aeabi_d2f+0x30>
 8000a88:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a8c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a90:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a94:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a98:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a9c:	bf08      	it	eq
 8000a9e:	f020 0001 	biceq.w	r0, r0, #1
 8000aa2:	4770      	bx	lr
 8000aa4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000aa8:	d121      	bne.n	8000aee <__aeabi_d2f+0x7a>
 8000aaa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aae:	bfbc      	itt	lt
 8000ab0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	4770      	bxlt	lr
 8000ab6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000aba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000abe:	f1c2 0218 	rsb	r2, r2, #24
 8000ac2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ac6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aca:	fa20 f002 	lsr.w	r0, r0, r2
 8000ace:	bf18      	it	ne
 8000ad0:	f040 0001 	orrne.w	r0, r0, #1
 8000ad4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000adc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae0:	ea40 000c 	orr.w	r0, r0, ip
 8000ae4:	fa23 f302 	lsr.w	r3, r3, r2
 8000ae8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aec:	e7cc      	b.n	8000a88 <__aeabi_d2f+0x14>
 8000aee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af2:	d107      	bne.n	8000b04 <__aeabi_d2f+0x90>
 8000af4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000af8:	bf1e      	ittt	ne
 8000afa:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000afe:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b02:	4770      	bxne	lr
 8000b04:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d82:	2afd      	cmp	r2, #253	@ 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	@ 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	@ 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	@ 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <__gesf2>:
 8000fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fd6:	bf00      	nop

08000fd8 <__lesf2>:
 8000fd8:	f04f 0c01 	mov.w	ip, #1
 8000fdc:	e002      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__cmpsf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff4:	bf18      	it	ne
 8000ff6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffa:	d011      	beq.n	8001020 <__cmpsf2+0x40>
 8000ffc:	b001      	add	sp, #4
 8000ffe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001002:	bf18      	it	ne
 8001004:	ea90 0f01 	teqne	r0, r1
 8001008:	bf58      	it	pl
 800100a:	ebb2 0003 	subspl.w	r0, r2, r3
 800100e:	bf88      	it	hi
 8001010:	17c8      	asrhi	r0, r1, #31
 8001012:	bf38      	it	cc
 8001014:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001018:	bf18      	it	ne
 800101a:	f040 0001 	orrne.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001024:	d102      	bne.n	800102c <__cmpsf2+0x4c>
 8001026:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102a:	d105      	bne.n	8001038 <__cmpsf2+0x58>
 800102c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001030:	d1e4      	bne.n	8000ffc <__cmpsf2+0x1c>
 8001032:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001036:	d0e1      	beq.n	8000ffc <__cmpsf2+0x1c>
 8001038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_cfrcmple>:
 8001040:	4684      	mov	ip, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4661      	mov	r1, ip
 8001046:	e7ff      	b.n	8001048 <__aeabi_cfcmpeq>

08001048 <__aeabi_cfcmpeq>:
 8001048:	b50f      	push	{r0, r1, r2, r3, lr}
 800104a:	f7ff ffc9 	bl	8000fe0 <__cmpsf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	bf48      	it	mi
 8001052:	f110 0f00 	cmnmi.w	r0, #0
 8001056:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001058 <__aeabi_fcmpeq>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff fff4 	bl	8001048 <__aeabi_cfcmpeq>
 8001060:	bf0c      	ite	eq
 8001062:	2001      	moveq	r0, #1
 8001064:	2000      	movne	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmplt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffea 	bl	8001048 <__aeabi_cfcmpeq>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmple>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffe0 	bl	8001048 <__aeabi_cfcmpeq>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpge>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffd2 	bl	8001040 <__aeabi_cfrcmple>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpgt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffc8 	bl	8001040 <__aeabi_cfrcmple>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_f2uiz>:
 80010bc:	0042      	lsls	r2, r0, #1
 80010be:	d20e      	bcs.n	80010de <__aeabi_f2uiz+0x22>
 80010c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010c4:	d30b      	bcc.n	80010de <__aeabi_f2uiz+0x22>
 80010c6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ce:	d409      	bmi.n	80010e4 <__aeabi_f2uiz+0x28>
 80010d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010d8:	fa23 f002 	lsr.w	r0, r3, r2
 80010dc:	4770      	bx	lr
 80010de:	f04f 0000 	mov.w	r0, #0
 80010e2:	4770      	bx	lr
 80010e4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010e8:	d101      	bne.n	80010ee <__aeabi_f2uiz+0x32>
 80010ea:	0242      	lsls	r2, r0, #9
 80010ec:	d102      	bne.n	80010f4 <__aeabi_f2uiz+0x38>
 80010ee:	f04f 30ff 	mov.w	r0, #4294967295
 80010f2:	4770      	bx	lr
 80010f4:	f04f 0000 	mov.w	r0, #0
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop

080010fc <__aeabi_uldivmod>:
 80010fc:	b953      	cbnz	r3, 8001114 <__aeabi_uldivmod+0x18>
 80010fe:	b94a      	cbnz	r2, 8001114 <__aeabi_uldivmod+0x18>
 8001100:	2900      	cmp	r1, #0
 8001102:	bf08      	it	eq
 8001104:	2800      	cmpeq	r0, #0
 8001106:	bf1c      	itt	ne
 8001108:	f04f 31ff 	movne.w	r1, #4294967295
 800110c:	f04f 30ff 	movne.w	r0, #4294967295
 8001110:	f000 b968 	b.w	80013e4 <__aeabi_idiv0>
 8001114:	f1ad 0c08 	sub.w	ip, sp, #8
 8001118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800111c:	f000 f806 	bl	800112c <__udivmoddi4>
 8001120:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001128:	b004      	add	sp, #16
 800112a:	4770      	bx	lr

0800112c <__udivmoddi4>:
 800112c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001130:	9d08      	ldr	r5, [sp, #32]
 8001132:	460c      	mov	r4, r1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d14e      	bne.n	80011d6 <__udivmoddi4+0xaa>
 8001138:	4694      	mov	ip, r2
 800113a:	458c      	cmp	ip, r1
 800113c:	4686      	mov	lr, r0
 800113e:	fab2 f282 	clz	r2, r2
 8001142:	d962      	bls.n	800120a <__udivmoddi4+0xde>
 8001144:	b14a      	cbz	r2, 800115a <__udivmoddi4+0x2e>
 8001146:	f1c2 0320 	rsb	r3, r2, #32
 800114a:	4091      	lsls	r1, r2
 800114c:	fa20 f303 	lsr.w	r3, r0, r3
 8001150:	fa0c fc02 	lsl.w	ip, ip, r2
 8001154:	4319      	orrs	r1, r3
 8001156:	fa00 fe02 	lsl.w	lr, r0, r2
 800115a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800115e:	fbb1 f4f7 	udiv	r4, r1, r7
 8001162:	fb07 1114 	mls	r1, r7, r4, r1
 8001166:	fa1f f68c 	uxth.w	r6, ip
 800116a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800116e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001172:	fb04 f106 	mul.w	r1, r4, r6
 8001176:	4299      	cmp	r1, r3
 8001178:	d90a      	bls.n	8001190 <__udivmoddi4+0x64>
 800117a:	eb1c 0303 	adds.w	r3, ip, r3
 800117e:	f104 30ff 	add.w	r0, r4, #4294967295
 8001182:	f080 8110 	bcs.w	80013a6 <__udivmoddi4+0x27a>
 8001186:	4299      	cmp	r1, r3
 8001188:	f240 810d 	bls.w	80013a6 <__udivmoddi4+0x27a>
 800118c:	3c02      	subs	r4, #2
 800118e:	4463      	add	r3, ip
 8001190:	1a59      	subs	r1, r3, r1
 8001192:	fbb1 f0f7 	udiv	r0, r1, r7
 8001196:	fb07 1110 	mls	r1, r7, r0, r1
 800119a:	fb00 f606 	mul.w	r6, r0, r6
 800119e:	fa1f f38e 	uxth.w	r3, lr
 80011a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011a6:	429e      	cmp	r6, r3
 80011a8:	d90a      	bls.n	80011c0 <__udivmoddi4+0x94>
 80011aa:	eb1c 0303 	adds.w	r3, ip, r3
 80011ae:	f100 31ff 	add.w	r1, r0, #4294967295
 80011b2:	f080 80fa 	bcs.w	80013aa <__udivmoddi4+0x27e>
 80011b6:	429e      	cmp	r6, r3
 80011b8:	f240 80f7 	bls.w	80013aa <__udivmoddi4+0x27e>
 80011bc:	4463      	add	r3, ip
 80011be:	3802      	subs	r0, #2
 80011c0:	2100      	movs	r1, #0
 80011c2:	1b9b      	subs	r3, r3, r6
 80011c4:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80011c8:	b11d      	cbz	r5, 80011d2 <__udivmoddi4+0xa6>
 80011ca:	40d3      	lsrs	r3, r2
 80011cc:	2200      	movs	r2, #0
 80011ce:	e9c5 3200 	strd	r3, r2, [r5]
 80011d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d6:	428b      	cmp	r3, r1
 80011d8:	d905      	bls.n	80011e6 <__udivmoddi4+0xba>
 80011da:	b10d      	cbz	r5, 80011e0 <__udivmoddi4+0xb4>
 80011dc:	e9c5 0100 	strd	r0, r1, [r5]
 80011e0:	2100      	movs	r1, #0
 80011e2:	4608      	mov	r0, r1
 80011e4:	e7f5      	b.n	80011d2 <__udivmoddi4+0xa6>
 80011e6:	fab3 f183 	clz	r1, r3
 80011ea:	2900      	cmp	r1, #0
 80011ec:	d146      	bne.n	800127c <__udivmoddi4+0x150>
 80011ee:	42a3      	cmp	r3, r4
 80011f0:	d302      	bcc.n	80011f8 <__udivmoddi4+0xcc>
 80011f2:	4290      	cmp	r0, r2
 80011f4:	f0c0 80ee 	bcc.w	80013d4 <__udivmoddi4+0x2a8>
 80011f8:	1a86      	subs	r6, r0, r2
 80011fa:	eb64 0303 	sbc.w	r3, r4, r3
 80011fe:	2001      	movs	r0, #1
 8001200:	2d00      	cmp	r5, #0
 8001202:	d0e6      	beq.n	80011d2 <__udivmoddi4+0xa6>
 8001204:	e9c5 6300 	strd	r6, r3, [r5]
 8001208:	e7e3      	b.n	80011d2 <__udivmoddi4+0xa6>
 800120a:	2a00      	cmp	r2, #0
 800120c:	f040 808f 	bne.w	800132e <__udivmoddi4+0x202>
 8001210:	eba1 040c 	sub.w	r4, r1, ip
 8001214:	2101      	movs	r1, #1
 8001216:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800121a:	fa1f f78c 	uxth.w	r7, ip
 800121e:	fbb4 f6f8 	udiv	r6, r4, r8
 8001222:	fb08 4416 	mls	r4, r8, r6, r4
 8001226:	fb07 f006 	mul.w	r0, r7, r6
 800122a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800122e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8001232:	4298      	cmp	r0, r3
 8001234:	d908      	bls.n	8001248 <__udivmoddi4+0x11c>
 8001236:	eb1c 0303 	adds.w	r3, ip, r3
 800123a:	f106 34ff 	add.w	r4, r6, #4294967295
 800123e:	d202      	bcs.n	8001246 <__udivmoddi4+0x11a>
 8001240:	4298      	cmp	r0, r3
 8001242:	f200 80cb 	bhi.w	80013dc <__udivmoddi4+0x2b0>
 8001246:	4626      	mov	r6, r4
 8001248:	1a1c      	subs	r4, r3, r0
 800124a:	fbb4 f0f8 	udiv	r0, r4, r8
 800124e:	fb08 4410 	mls	r4, r8, r0, r4
 8001252:	fb00 f707 	mul.w	r7, r0, r7
 8001256:	fa1f f38e 	uxth.w	r3, lr
 800125a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800125e:	429f      	cmp	r7, r3
 8001260:	d908      	bls.n	8001274 <__udivmoddi4+0x148>
 8001262:	eb1c 0303 	adds.w	r3, ip, r3
 8001266:	f100 34ff 	add.w	r4, r0, #4294967295
 800126a:	d202      	bcs.n	8001272 <__udivmoddi4+0x146>
 800126c:	429f      	cmp	r7, r3
 800126e:	f200 80ae 	bhi.w	80013ce <__udivmoddi4+0x2a2>
 8001272:	4620      	mov	r0, r4
 8001274:	1bdb      	subs	r3, r3, r7
 8001276:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800127a:	e7a5      	b.n	80011c8 <__udivmoddi4+0x9c>
 800127c:	f1c1 0720 	rsb	r7, r1, #32
 8001280:	408b      	lsls	r3, r1
 8001282:	fa22 fc07 	lsr.w	ip, r2, r7
 8001286:	ea4c 0c03 	orr.w	ip, ip, r3
 800128a:	fa24 f607 	lsr.w	r6, r4, r7
 800128e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001292:	fbb6 f8f9 	udiv	r8, r6, r9
 8001296:	fa1f fe8c 	uxth.w	lr, ip
 800129a:	fb09 6618 	mls	r6, r9, r8, r6
 800129e:	fa20 f307 	lsr.w	r3, r0, r7
 80012a2:	408c      	lsls	r4, r1
 80012a4:	fa00 fa01 	lsl.w	sl, r0, r1
 80012a8:	fb08 f00e 	mul.w	r0, r8, lr
 80012ac:	431c      	orrs	r4, r3
 80012ae:	0c23      	lsrs	r3, r4, #16
 80012b0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80012b4:	4298      	cmp	r0, r3
 80012b6:	fa02 f201 	lsl.w	r2, r2, r1
 80012ba:	d90a      	bls.n	80012d2 <__udivmoddi4+0x1a6>
 80012bc:	eb1c 0303 	adds.w	r3, ip, r3
 80012c0:	f108 36ff 	add.w	r6, r8, #4294967295
 80012c4:	f080 8081 	bcs.w	80013ca <__udivmoddi4+0x29e>
 80012c8:	4298      	cmp	r0, r3
 80012ca:	d97e      	bls.n	80013ca <__udivmoddi4+0x29e>
 80012cc:	f1a8 0802 	sub.w	r8, r8, #2
 80012d0:	4463      	add	r3, ip
 80012d2:	1a1e      	subs	r6, r3, r0
 80012d4:	fbb6 f3f9 	udiv	r3, r6, r9
 80012d8:	fb09 6613 	mls	r6, r9, r3, r6
 80012dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80012e0:	b2a4      	uxth	r4, r4
 80012e2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80012e6:	45a6      	cmp	lr, r4
 80012e8:	d908      	bls.n	80012fc <__udivmoddi4+0x1d0>
 80012ea:	eb1c 0404 	adds.w	r4, ip, r4
 80012ee:	f103 30ff 	add.w	r0, r3, #4294967295
 80012f2:	d266      	bcs.n	80013c2 <__udivmoddi4+0x296>
 80012f4:	45a6      	cmp	lr, r4
 80012f6:	d964      	bls.n	80013c2 <__udivmoddi4+0x296>
 80012f8:	3b02      	subs	r3, #2
 80012fa:	4464      	add	r4, ip
 80012fc:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001300:	fba0 8302 	umull	r8, r3, r0, r2
 8001304:	eba4 040e 	sub.w	r4, r4, lr
 8001308:	429c      	cmp	r4, r3
 800130a:	46c6      	mov	lr, r8
 800130c:	461e      	mov	r6, r3
 800130e:	d350      	bcc.n	80013b2 <__udivmoddi4+0x286>
 8001310:	d04d      	beq.n	80013ae <__udivmoddi4+0x282>
 8001312:	b155      	cbz	r5, 800132a <__udivmoddi4+0x1fe>
 8001314:	ebba 030e 	subs.w	r3, sl, lr
 8001318:	eb64 0406 	sbc.w	r4, r4, r6
 800131c:	fa04 f707 	lsl.w	r7, r4, r7
 8001320:	40cb      	lsrs	r3, r1
 8001322:	431f      	orrs	r7, r3
 8001324:	40cc      	lsrs	r4, r1
 8001326:	e9c5 7400 	strd	r7, r4, [r5]
 800132a:	2100      	movs	r1, #0
 800132c:	e751      	b.n	80011d2 <__udivmoddi4+0xa6>
 800132e:	fa0c fc02 	lsl.w	ip, ip, r2
 8001332:	f1c2 0320 	rsb	r3, r2, #32
 8001336:	40d9      	lsrs	r1, r3
 8001338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800133c:	fa20 f303 	lsr.w	r3, r0, r3
 8001340:	fa00 fe02 	lsl.w	lr, r0, r2
 8001344:	fbb1 f0f8 	udiv	r0, r1, r8
 8001348:	fb08 1110 	mls	r1, r8, r0, r1
 800134c:	4094      	lsls	r4, r2
 800134e:	431c      	orrs	r4, r3
 8001350:	fa1f f78c 	uxth.w	r7, ip
 8001354:	0c23      	lsrs	r3, r4, #16
 8001356:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800135a:	fb00 f107 	mul.w	r1, r0, r7
 800135e:	4299      	cmp	r1, r3
 8001360:	d908      	bls.n	8001374 <__udivmoddi4+0x248>
 8001362:	eb1c 0303 	adds.w	r3, ip, r3
 8001366:	f100 36ff 	add.w	r6, r0, #4294967295
 800136a:	d22c      	bcs.n	80013c6 <__udivmoddi4+0x29a>
 800136c:	4299      	cmp	r1, r3
 800136e:	d92a      	bls.n	80013c6 <__udivmoddi4+0x29a>
 8001370:	3802      	subs	r0, #2
 8001372:	4463      	add	r3, ip
 8001374:	1a5b      	subs	r3, r3, r1
 8001376:	fbb3 f1f8 	udiv	r1, r3, r8
 800137a:	fb08 3311 	mls	r3, r8, r1, r3
 800137e:	b2a4      	uxth	r4, r4
 8001380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001384:	fb01 f307 	mul.w	r3, r1, r7
 8001388:	42a3      	cmp	r3, r4
 800138a:	d908      	bls.n	800139e <__udivmoddi4+0x272>
 800138c:	eb1c 0404 	adds.w	r4, ip, r4
 8001390:	f101 36ff 	add.w	r6, r1, #4294967295
 8001394:	d213      	bcs.n	80013be <__udivmoddi4+0x292>
 8001396:	42a3      	cmp	r3, r4
 8001398:	d911      	bls.n	80013be <__udivmoddi4+0x292>
 800139a:	3902      	subs	r1, #2
 800139c:	4464      	add	r4, ip
 800139e:	1ae4      	subs	r4, r4, r3
 80013a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80013a4:	e73b      	b.n	800121e <__udivmoddi4+0xf2>
 80013a6:	4604      	mov	r4, r0
 80013a8:	e6f2      	b.n	8001190 <__udivmoddi4+0x64>
 80013aa:	4608      	mov	r0, r1
 80013ac:	e708      	b.n	80011c0 <__udivmoddi4+0x94>
 80013ae:	45c2      	cmp	sl, r8
 80013b0:	d2af      	bcs.n	8001312 <__udivmoddi4+0x1e6>
 80013b2:	ebb8 0e02 	subs.w	lr, r8, r2
 80013b6:	eb63 060c 	sbc.w	r6, r3, ip
 80013ba:	3801      	subs	r0, #1
 80013bc:	e7a9      	b.n	8001312 <__udivmoddi4+0x1e6>
 80013be:	4631      	mov	r1, r6
 80013c0:	e7ed      	b.n	800139e <__udivmoddi4+0x272>
 80013c2:	4603      	mov	r3, r0
 80013c4:	e79a      	b.n	80012fc <__udivmoddi4+0x1d0>
 80013c6:	4630      	mov	r0, r6
 80013c8:	e7d4      	b.n	8001374 <__udivmoddi4+0x248>
 80013ca:	46b0      	mov	r8, r6
 80013cc:	e781      	b.n	80012d2 <__udivmoddi4+0x1a6>
 80013ce:	4463      	add	r3, ip
 80013d0:	3802      	subs	r0, #2
 80013d2:	e74f      	b.n	8001274 <__udivmoddi4+0x148>
 80013d4:	4606      	mov	r6, r0
 80013d6:	4623      	mov	r3, r4
 80013d8:	4608      	mov	r0, r1
 80013da:	e711      	b.n	8001200 <__udivmoddi4+0xd4>
 80013dc:	3e02      	subs	r6, #2
 80013de:	4463      	add	r3, ip
 80013e0:	e732      	b.n	8001248 <__udivmoddi4+0x11c>
 80013e2:	bf00      	nop

080013e4 <__aeabi_idiv0>:
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <turn>:
	resetPID();

}


void turn(int16_t degrees) {	// Make n 90 degree turns (no acceleration)
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	80fb      	strh	r3, [r7, #6]


	resetPID();
 80013f2:	f001 fa9d 	bl	8002930 <resetPID>
	setPIDGoalD(0);
 80013f6:	2000      	movs	r0, #0
 80013f8:	f000 fea6 	bl	8002148 <setPIDGoalD>
	setPIDGoalA(degrees);
 80013fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 feb5 	bl	8002170 <setPIDGoalA>

	while(!PIDdone())
 8001406:	bf00      	nop
 8001408:	f001 fa82 	bl	8002910 <PIDdone>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d0fa      	beq.n	8001408 <turn+0x20>
	{

	}

	resetPID();
 8001412:	f001 fa8d 	bl	8002930 <resetPID>

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <delayMicroseconds>:
#include "main.h"
#include "delay.h"

// Delays for us microseconds
void delayMicroseconds(uint16_t us)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]

    TIM10->CNT = 0;
 800142a:	4b0d      	ldr	r3, [pc, #52]	@ (8001460 <delayMicroseconds+0x40>)
 800142c:	2200      	movs	r2, #0
 800142e:	625a      	str	r2, [r3, #36]	@ 0x24
    uint16_t start = (uint16_t) TIM10->CNT;
 8001430:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <delayMicroseconds+0x40>)
 8001432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001434:	81fb      	strh	r3, [r7, #14]

    uint32_t duration = us * 60;	// Our MCU runs at 60 MHz, so each microsecond lasts 60 clock ticks
 8001436:	88fa      	ldrh	r2, [r7, #6]
 8001438:	4613      	mov	r3, r2
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	1a9b      	subs	r3, r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	60bb      	str	r3, [r7, #8]
    while (TIM10->CNT - start < duration);
 8001442:	bf00      	nop
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <delayMicroseconds+0x40>)
 8001446:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001448:	89fb      	ldrh	r3, [r7, #14]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	429a      	cmp	r2, r3
 8001450:	d8f8      	bhi.n	8001444 <delayMicroseconds+0x24>

}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40014400 	.word	0x40014400

08001464 <getRightEncoderCounts>:
 */

#include "main.h"
#include "encoders.h"

int16_t getRightEncoderCounts() {
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM3->CNT);
 8001468:	4b04      	ldr	r3, [pc, #16]	@ (800147c <getRightEncoderCounts+0x18>)
 800146a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146c:	b29b      	uxth	r3, r3
 800146e:	425b      	negs	r3, r3
 8001470:	b29b      	uxth	r3, r3
 8001472:	b21b      	sxth	r3, r3
}
 8001474:	4618      	mov	r0, r3
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	40000400 	.word	0x40000400

08001480 <getLeftEncoderCounts>:

int16_t getLeftEncoderCounts() {
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	return (-1*(int16_t) TIM8->CNT);
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <getLeftEncoderCounts+0x18>)
 8001486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001488:	b29b      	uxth	r3, r3
 800148a:	425b      	negs	r3, r3
 800148c:	b29b      	uxth	r3, r3
 800148e:	b21b      	sxth	r3, r3
}
 8001490:	4618      	mov	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40010400 	.word	0x40010400

0800149c <resetEncoders>:

void resetEncoders() {
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
	TIM3->CNT = (int16_t) 0;
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <resetEncoders+0x18>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM8->CNT = (int16_t) 0;
 80014a6:	4b04      	ldr	r3, [pc, #16]	@ (80014b8 <resetEncoders+0x1c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	40000400 	.word	0x40000400
 80014b8:	40010400 	.word	0x40010400
 80014bc:	00000000 	.word	0x00000000

080014c0 <gyroInit>:
int gyro_initialized = 0;
float Gx_offset = 0;
float Gy_offset = 0;
float Gz_offset = 0;

uint8_t gyroInit(void) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b0ee      	sub	sp, #440	@ 0x1b8
 80014c4:	af04      	add	r7, sp, #16
    if (gyro_initialized) return 1;
 80014c6:	4b90      	ldr	r3, [pc, #576]	@ (8001708 <gyroInit+0x248>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <gyroInit+0x12>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e10c      	b.n	80016ec <gyroInit+0x22c>

    I2C_HandleTypeDef *hi2c1_ptr = Get_I2C1_Ptr();
 80014d2:	f000 fd75 	bl	8001fc0 <Get_I2C1_Ptr>
 80014d6:	f8c7 0198 	str.w	r0, [r7, #408]	@ 0x198

    HAL_StatusTypeDef ret;
    uint8_t temp;

    // establishing connection with the device
    ret = HAL_I2C_IsDeviceReady(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, 1, 1000);
 80014da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014de:	2201      	movs	r2, #1
 80014e0:	21d0      	movs	r1, #208	@ 0xd0
 80014e2:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 80014e6:	f003 fa53 	bl	8004990 <HAL_I2C_IsDeviceReady>
 80014ea:	4603      	mov	r3, r0
 80014ec:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 80014f0:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d002      	beq.n	80014fe <gyroInit+0x3e>
 80014f8:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 80014fc:	e0f6      	b.n	80016ec <gyroInit+0x22c>

    // configuring power management
    temp = 0b00001000;
 80014fe:	2308      	movs	r3, #8
 8001500:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_USER_CTRL, 1, &temp, 1, 100);
 8001504:	2364      	movs	r3, #100	@ 0x64
 8001506:	9302      	str	r3, [sp, #8]
 8001508:	2301      	movs	r3, #1
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	2301      	movs	r3, #1
 8001514:	226b      	movs	r2, #107	@ 0x6b
 8001516:	21d0      	movs	r1, #208	@ 0xd0
 8001518:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 800151c:	f002 ff0c 	bl	8004338 <HAL_I2C_Mem_Write>
 8001520:	4603      	mov	r3, r0
 8001522:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 8001526:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <gyroInit+0x74>
 800152e:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001532:	e0db      	b.n	80016ec <gyroInit+0x22c>

    // configuring gyroscope
    temp = FS_GYRO_500;
 8001534:	2308      	movs	r3, #8
 8001536:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &temp, 1, 100);
 800153a:	2364      	movs	r3, #100	@ 0x64
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2301      	movs	r3, #1
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	221b      	movs	r2, #27
 800154c:	21d0      	movs	r1, #208	@ 0xd0
 800154e:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8001552:	f002 fef1 	bl	8004338 <HAL_I2C_Mem_Write>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 800155c:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <gyroInit+0xaa>
 8001564:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001568:	e0c0      	b.n	80016ec <gyroInit+0x22c>

    // configuring accelerometer
    temp = FS_ACC_2G;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 3196 	strb.w	r3, [r7, #406]	@ 0x196
    ret = HAL_I2C_Mem_Write(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &temp, 1, 100);
 8001570:	2364      	movs	r3, #100	@ 0x64
 8001572:	9302      	str	r3, [sp, #8]
 8001574:	2301      	movs	r3, #1
 8001576:	9301      	str	r3, [sp, #4]
 8001578:	f507 73cb 	add.w	r3, r7, #406	@ 0x196
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2301      	movs	r3, #1
 8001580:	221c      	movs	r2, #28
 8001582:	21d0      	movs	r1, #208	@ 0xd0
 8001584:	f8d7 0198 	ldr.w	r0, [r7, #408]	@ 0x198
 8001588:	f002 fed6 	bl	8004338 <HAL_I2C_Mem_Write>
 800158c:	4603      	mov	r3, r0
 800158e:	f887 3197 	strb.w	r3, [r7, #407]	@ 0x197
    if (ret != HAL_OK) return ret;
 8001592:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 8001596:	2b00      	cmp	r3, #0
 8001598:	d002      	beq.n	80015a0 <gyroInit+0xe0>
 800159a:	f897 3197 	ldrb.w	r3, [r7, #407]	@ 0x197
 800159e:	e0a5      	b.n	80016ec <gyroInit+0x22c>

    gyro_initialized = 1;
 80015a0:	4b59      	ldr	r3, [pc, #356]	@ (8001708 <gyroInit+0x248>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

    // calculating offsets
//    float Gx_readings[10] = { 0.0 };
//    float Gy_readings[10] = { 0.0 };
    float Gz_readings[100] = { 0.0 };
 80015a6:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80015aa:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80015ae:	4618      	mov	r0, r3
 80015b0:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80015b4:	461a      	mov	r2, r3
 80015b6:	2100      	movs	r1, #0
 80015b8:	f005 fba5 	bl	8006d06 <memset>
//    float Gx_sum = 0.0;
//    float Gy_sum = 0.0;
    float Gz_sum = 0.0;
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    while(1) {
    	Gz_offset = 0;
 80015c4:	4b51      	ldr	r3, [pc, #324]	@ (800170c <gyroInit+0x24c>)
 80015c6:	f04f 0200 	mov.w	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
    	Gz_sum = 0;
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    	for (int i = 0; i < 100; ++i) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80015da:	e020      	b.n	800161e <gyroInit+0x15e>
			readGyro(&Gz_readings[i]);
 80015dc:	1d3a      	adds	r2, r7, #4
 80015de:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 f896 	bl	8001718 <readGyro>
	//        Gx_sum += Gx_readings[i];
	//        Gy_sum += Gy_readings[i];
			Gz_sum += Gz_readings[i];
 80015ec:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 80015f0:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80015f4:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8001602:	f7ff fa8d 	bl	8000b20 <__addsf3>
 8001606:	4603      	mov	r3, r0
 8001608:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
			delayMicroseconds(10000);
 800160c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001610:	f7ff ff06 	bl	8001420 <delayMicroseconds>
    	for (int i = 0; i < 100; ++i) {
 8001614:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001618:	3301      	adds	r3, #1
 800161a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800161e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001622:	2b63      	cmp	r3, #99	@ 0x63
 8001624:	ddda      	ble.n	80015dc <gyroInit+0x11c>
		}

	//    Gx_offset = Gx_sum / 10.0;
	//    Gy_offset = Gy_sum / 10.0;
		Gz_offset = Gz_sum / 100.0;
 8001626:	493a      	ldr	r1, [pc, #232]	@ (8001710 <gyroInit+0x250>)
 8001628:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 800162c:	f7ff fc34 	bl	8000e98 <__aeabi_fdiv>
 8001630:	4603      	mov	r3, r0
 8001632:	461a      	mov	r2, r3
 8001634:	4b35      	ldr	r3, [pc, #212]	@ (800170c <gyroInit+0x24c>)
 8001636:	601a      	str	r2, [r3, #0]

		Gz_sum = 0;
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
		for (int i = 0; i < 100; ++i) {
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001646:	e020      	b.n	800168a <gyroInit+0x1ca>
			readGyro(&Gz_readings[i]);
 8001648:	1d3a      	adds	r2, r7, #4
 800164a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f000 f860 	bl	8001718 <readGyro>
			Gz_sum += Gz_readings[i];
 8001658:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 800165c:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001660:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001668:	4619      	mov	r1, r3
 800166a:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 800166e:	f7ff fa57 	bl	8000b20 <__addsf3>
 8001672:	4603      	mov	r3, r0
 8001674:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
			delayMicroseconds(10000);
 8001678:	f242 7010 	movw	r0, #10000	@ 0x2710
 800167c:	f7ff fed0 	bl	8001420 <delayMicroseconds>
		for (int i = 0; i < 100; ++i) {
 8001680:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8001684:	3301      	adds	r3, #1
 8001686:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800168a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800168e:	2b63      	cmp	r3, #99	@ 0x63
 8001690:	ddda      	ble.n	8001648 <gyroInit+0x188>
		}
		if (Gz_sum / 100.0 < 0.1 && Gz_sum / 100.0 > -0.1) {
 8001692:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 8001696:	f7fe fefb 	bl	8000490 <__aeabi_f2d>
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <gyroInit+0x254>)
 80016a0:	f7ff f878 	bl	8000794 <__aeabi_ddiv>
 80016a4:	4602      	mov	r2, r0
 80016a6:	460b      	mov	r3, r1
 80016a8:	4610      	mov	r0, r2
 80016aa:	4619      	mov	r1, r3
 80016ac:	a312      	add	r3, pc, #72	@ (adr r3, 80016f8 <gyroInit+0x238>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7ff f9b7 	bl	8000a24 <__aeabi_dcmplt>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d014      	beq.n	80016e6 <gyroInit+0x226>
 80016bc:	f8d7 01a4 	ldr.w	r0, [r7, #420]	@ 0x1a4
 80016c0:	f7fe fee6 	bl	8000490 <__aeabi_f2d>
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	4b12      	ldr	r3, [pc, #72]	@ (8001714 <gyroInit+0x254>)
 80016ca:	f7ff f863 	bl	8000794 <__aeabi_ddiv>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001700 <gyroInit+0x240>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7ff f9c0 	bl	8000a60 <__aeabi_dcmpgt>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d100      	bne.n	80016e8 <gyroInit+0x228>
    	Gz_offset = 0;
 80016e6:	e76d      	b.n	80015c4 <gyroInit+0x104>
			break;
 80016e8:	bf00      	nop
		}
    }



    return 1;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	9999999a 	.word	0x9999999a
 80016fc:	3fb99999 	.word	0x3fb99999
 8001700:	9999999a 	.word	0x9999999a
 8001704:	bfb99999 	.word	0xbfb99999
 8001708:	20000028 	.word	0x20000028
 800170c:	2000002c 	.word	0x2000002c
 8001710:	42c80000 	.word	0x42c80000
 8001714:	40590000 	.word	0x40590000

08001718 <readGyro>:

void readGyro(/*float* Gx , float* Gy, */float* Gz) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af04      	add	r7, sp, #16
 800171e:	6078      	str	r0, [r7, #4]
    if (!gyro_initialized) {
 8001720:	4b1a      	ldr	r3, [pc, #104]	@ (800178c <readGyro+0x74>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d02d      	beq.n	8001784 <readGyro+0x6c>
        return;
    }

    I2C_HandleTypeDef *hi2c1_ptr = Get_I2C1_Ptr();
 8001728:	f000 fc4a 	bl	8001fc0 <Get_I2C1_Ptr>
 800172c:	60f8      	str	r0, [r7, #12]

//    uint8_t data[6];
    uint8_t data[2];
    HAL_I2C_Mem_Read(hi2c1_ptr, (DEVICE_ADDRESS << 1) + 0, REG_GYRO_DATA, 1, data, 2, 100);
 800172e:	2364      	movs	r3, #100	@ 0x64
 8001730:	9302      	str	r3, [sp, #8]
 8001732:	2302      	movs	r3, #2
 8001734:	9301      	str	r3, [sp, #4]
 8001736:	f107 0308 	add.w	r3, r7, #8
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2301      	movs	r3, #1
 800173e:	2247      	movs	r2, #71	@ 0x47
 8001740:	21d0      	movs	r1, #208	@ 0xd0
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f002 fef2 	bl	800452c <HAL_I2C_Mem_Read>

//    int16_t Gyro_X_RAW = ((int16_t)(data[0] << 8)) | data [1];
//    int16_t Gyro_Y_RAW = ((int16_t)(data[2] << 8)) | data [3];
//    int16_t Gyro_Z_RAW = ((int16_t)(data[4] << 8)) | data [5];
    int16_t Gyro_Z_RAW = ((int16_t)(data[0] << 8)) | data [1];
 8001748:	7a3b      	ldrb	r3, [r7, #8]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	b21a      	sxth	r2, r3
 800174e:	7a7b      	ldrb	r3, [r7, #9]
 8001750:	b21b      	sxth	r3, r3
 8001752:	4313      	orrs	r3, r2
 8001754:	817b      	strh	r3, [r7, #10]
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

//    *Gx = Gyro_X_RAW/131.0 - Gx_offset;
//    *Gy = Gyro_Y_RAW/131.0 - Gy_offset;
    *Gz = Gyro_Z_RAW/65.5f - Gz_offset;
 8001756:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fa94 	bl	8000c88 <__aeabi_i2f>
 8001760:	4603      	mov	r3, r0
 8001762:	490b      	ldr	r1, [pc, #44]	@ (8001790 <readGyro+0x78>)
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff fb97 	bl	8000e98 <__aeabi_fdiv>
 800176a:	4603      	mov	r3, r0
 800176c:	461a      	mov	r2, r3
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <readGyro+0x7c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	4610      	mov	r0, r2
 8001776:	f7ff f9d1 	bl	8000b1c <__aeabi_fsub>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]

    return;
 8001782:	e000      	b.n	8001786 <readGyro+0x6e>
        return;
 8001784:	bf00      	nop
}
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000028 	.word	0x20000028
 8001790:	42830000 	.word	0x42830000
 8001794:	2000002c 	.word	0x2000002c

08001798 <interruptRoutine>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void interruptRoutine() {
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
	delayMicroseconds(2000);
 800179c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80017a0:	f7ff fe3e 	bl	8001420 <delayMicroseconds>
	temp++;
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <interruptRoutine+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3301      	adds	r3, #1
 80017aa:	4a0b      	ldr	r2, [pc, #44]	@ (80017d8 <interruptRoutine+0x40>)
 80017ac:	6013      	str	r3, [r2, #0]
	left_counts = getLeftEncoderCounts();
 80017ae:	f7ff fe67 	bl	8001480 <getLeftEncoderCounts>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b09      	ldr	r3, [pc, #36]	@ (80017dc <interruptRoutine+0x44>)
 80017b8:	801a      	strh	r2, [r3, #0]
	right_counts = getRightEncoderCounts();
 80017ba:	f7ff fe53 	bl	8001464 <getRightEncoderCounts>
 80017be:	4603      	mov	r3, r0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <interruptRoutine+0x48>)
 80017c4:	801a      	strh	r2, [r3, #0]
	if (gyro_inited) {
 80017c6:	4b07      	ldr	r3, [pc, #28]	@ (80017e4 <interruptRoutine+0x4c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <interruptRoutine+0x3a>
		updatePID();
 80017ce:	f000 fecb 	bl	8002568 <updatePID>
//		readGyro(&gyro_v);
//		gyro_v /= 1000;
//		gyro_a += gyro_v;
	}
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	2000029c 	.word	0x2000029c
 80017dc:	20000296 	.word	0x20000296
 80017e0:	20000298 	.word	0x20000298
 80017e4:	200002a0 	.word	0x200002a0

080017e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ec:	f001 fbc6 	bl	8002f7c <HAL_Init>
  /* USER CODE BEGIN Init */
//  Delay_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f0:	f000 f86a 	bl	80018c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f4:	f000 fb28 	bl	8001e48 <MX_GPIO_Init>
  MX_DMA_Init();
 80017f8:	f000 fb06 	bl	8001e08 <MX_DMA_Init>
  MX_ADC1_Init();
 80017fc:	f000 f8ac 	bl	8001958 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001800:	f000 f954 	bl	8001aac <MX_TIM1_Init>
  MX_TIM3_Init();
 8001804:	f000 f9fa 	bl	8001bfc <MX_TIM3_Init>
  MX_TIM8_Init();
 8001808:	f000 fa82 	bl	8001d10 <MX_TIM8_Init>
  MX_TIM7_Init();
 800180c:	f000 fa4a 	bl	8001ca4 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001810:	f000 f91e 	bl	8001a50 <MX_I2C1_Init>
  MX_TIM10_Init();
 8001814:	f000 fad4 	bl	8001dc0 <MX_TIM10_Init>
  /* USER CODE BEGIN 2 */

  // Encoder Timers
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001818:	213c      	movs	r1, #60	@ 0x3c
 800181a:	4822      	ldr	r0, [pc, #136]	@ (80018a4 <main+0xbc>)
 800181c:	f004 fcae 	bl	800617c <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001820:	213c      	movs	r1, #60	@ 0x3c
 8001822:	4821      	ldr	r0, [pc, #132]	@ (80018a8 <main+0xc0>)
 8001824:	f004 fcaa 	bl	800617c <HAL_TIM_Encoder_Start>

  // Motor Timers
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001828:	2100      	movs	r1, #0
 800182a:	4820      	ldr	r0, [pc, #128]	@ (80018ac <main+0xc4>)
 800182c:	f004 fb38 	bl	8005ea0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001830:	2104      	movs	r1, #4
 8001832:	481e      	ldr	r0, [pc, #120]	@ (80018ac <main+0xc4>)
 8001834:	f004 fb34 	bl	8005ea0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001838:	2108      	movs	r1, #8
 800183a:	481c      	ldr	r0, [pc, #112]	@ (80018ac <main+0xc4>)
 800183c:	f004 fb30 	bl	8005ea0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001840:	210c      	movs	r1, #12
 8001842:	481a      	ldr	r0, [pc, #104]	@ (80018ac <main+0xc4>)
 8001844:	f004 fb2c 	bl	8005ea0 <HAL_TIM_PWM_Start>

  // Delay us timer (MUST START BEFORE INTERRUPT TIMER)
  HAL_TIM_Base_Start(&htim10);
 8001848:	4819      	ldr	r0, [pc, #100]	@ (80018b0 <main+0xc8>)
 800184a:	f004 fa05 	bl	8005c58 <HAL_TIM_Base_Start>

  // Interrupt Timer
  HAL_TIM_Base_Start_IT(&htim7);
 800184e:	4819      	ldr	r0, [pc, #100]	@ (80018b4 <main+0xcc>)
 8001850:	f004 fa68 	bl	8005d24 <HAL_TIM_Base_Start_IT>


  delayMicroseconds(1000);
 8001854:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001858:	f7ff fde2 	bl	8001420 <delayMicroseconds>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	B1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 800185c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001860:	4815      	ldr	r0, [pc, #84]	@ (80018b8 <main+0xd0>)
 8001862:	f002 fbf5 	bl	8004050 <HAL_GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	4b14      	ldr	r3, [pc, #80]	@ (80018bc <main+0xd4>)
 800186c:	701a      	strb	r2, [r3, #0]
	B2 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 800186e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001872:	4811      	ldr	r0, [pc, #68]	@ (80018b8 <main+0xd0>)
 8001874:	f002 fbec 	bl	8004050 <HAL_GPIO_ReadPin>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <main+0xd8>)
 800187e:	701a      	strb	r2, [r3, #0]


	if (B1 == GPIO_PIN_SET) {
 8001880:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <main+0xd4>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d104      	bne.n	8001892 <main+0xaa>
		gyroInit();
 8001888:	f7ff fe1a 	bl	80014c0 <gyroInit>
		gyro_inited = 1;
 800188c:	4b0d      	ldr	r3, [pc, #52]	@ (80018c4 <main+0xdc>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]
	}

	if (B2 == GPIO_PIN_SET) {
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <main+0xd8>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d1e0      	bne.n	800185c <main+0x74>
//		move(180);
		turn(-90);
 800189a:	f06f 0059 	mvn.w	r0, #89	@ 0x59
 800189e:	f7ff fda3 	bl	80013e8 <turn>
	B1 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 80018a2:	e7db      	b.n	800185c <main+0x74>
 80018a4:	20000174 	.word	0x20000174
 80018a8:	20000204 	.word	0x20000204
 80018ac:	2000012c 	.word	0x2000012c
 80018b0:	2000024c 	.word	0x2000024c
 80018b4:	200001bc 	.word	0x200001bc
 80018b8:	40020400 	.word	0x40020400
 80018bc:	20000294 	.word	0x20000294
 80018c0:	20000295 	.word	0x20000295
 80018c4:	200002a0 	.word	0x200002a0

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b092      	sub	sp, #72	@ 0x48
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0318 	add.w	r3, r7, #24
 80018d2:	2230      	movs	r2, #48	@ 0x30
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f005 fa15 	bl	8006d06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018ee:	2301      	movs	r3, #1
 80018f0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f2:	2310      	movs	r3, #16
 80018f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018f6:	2302      	movs	r3, #2
 80018f8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018fa:	2300      	movs	r3, #0
 80018fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 80018fe:	230d      	movs	r3, #13
 8001900:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8001902:	23c3      	movs	r3, #195	@ 0xc3
 8001904:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001906:	2302      	movs	r3, #2
 8001908:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800190a:	2304      	movs	r3, #4
 800190c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800190e:	f107 0318 	add.w	r3, r7, #24
 8001912:	4618      	mov	r0, r3
 8001914:	f003 fd1e 	bl	8005354 <HAL_RCC_OscConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800191e:	f000 fb59 	bl	8001fd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001922:	230f      	movs	r3, #15
 8001924:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001926:	2302      	movs	r3, #2
 8001928:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800192e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001932:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001938:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	2103      	movs	r1, #3
 800193e:	4618      	mov	r0, r3
 8001940:	f003 ff5c 	bl	80057fc <HAL_RCC_ClockConfig>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <SystemClock_Config+0x86>
  {
    Error_Handler();
 800194a:	f000 fb43 	bl	8001fd4 <Error_Handler>
  }
}
 800194e:	bf00      	nop
 8001950:	3748      	adds	r7, #72	@ 0x48
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800195e:	463b      	mov	r3, r7
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800196a:	4b36      	ldr	r3, [pc, #216]	@ (8001a44 <MX_ADC1_Init+0xec>)
 800196c:	4a36      	ldr	r2, [pc, #216]	@ (8001a48 <MX_ADC1_Init+0xf0>)
 800196e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001970:	4b34      	ldr	r3, [pc, #208]	@ (8001a44 <MX_ADC1_Init+0xec>)
 8001972:	2200      	movs	r2, #0
 8001974:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001976:	4b33      	ldr	r3, [pc, #204]	@ (8001a44 <MX_ADC1_Init+0xec>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800197c:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <MX_ADC1_Init+0xec>)
 800197e:	2201      	movs	r2, #1
 8001980:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001982:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <MX_ADC1_Init+0xec>)
 8001984:	2201      	movs	r2, #1
 8001986:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001988:	4b2e      	ldr	r3, [pc, #184]	@ (8001a44 <MX_ADC1_Init+0xec>)
 800198a:	2200      	movs	r2, #0
 800198c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001990:	4b2c      	ldr	r3, [pc, #176]	@ (8001a44 <MX_ADC1_Init+0xec>)
 8001992:	2200      	movs	r2, #0
 8001994:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001996:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <MX_ADC1_Init+0xec>)
 8001998:	4a2c      	ldr	r2, [pc, #176]	@ (8001a4c <MX_ADC1_Init+0xf4>)
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800199c:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <MX_ADC1_Init+0xec>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80019a2:	4b28      	ldr	r3, [pc, #160]	@ (8001a44 <MX_ADC1_Init+0xec>)
 80019a4:	2204      	movs	r2, #4
 80019a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019a8:	4b26      	ldr	r3, [pc, #152]	@ (8001a44 <MX_ADC1_Init+0xec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019b0:	4b24      	ldr	r3, [pc, #144]	@ (8001a44 <MX_ADC1_Init+0xec>)
 80019b2:	2201      	movs	r2, #1
 80019b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019b6:	4823      	ldr	r0, [pc, #140]	@ (8001a44 <MX_ADC1_Init+0xec>)
 80019b8:	f001 fb4e 	bl	8003058 <HAL_ADC_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80019c2:	f000 fb07 	bl	8001fd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019c6:	2305      	movs	r3, #5
 80019c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019ca:	2301      	movs	r3, #1
 80019cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d2:	463b      	mov	r3, r7
 80019d4:	4619      	mov	r1, r3
 80019d6:	481b      	ldr	r0, [pc, #108]	@ (8001a44 <MX_ADC1_Init+0xec>)
 80019d8:	f001 fb82 	bl	80030e0 <HAL_ADC_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80019e2:	f000 faf7 	bl	8001fd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80019e6:	2306      	movs	r3, #6
 80019e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80019ea:	2302      	movs	r3, #2
 80019ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ee:	463b      	mov	r3, r7
 80019f0:	4619      	mov	r1, r3
 80019f2:	4814      	ldr	r0, [pc, #80]	@ (8001a44 <MX_ADC1_Init+0xec>)
 80019f4:	f001 fb74 	bl	80030e0 <HAL_ADC_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80019fe:	f000 fae9 	bl	8001fd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a02:	230a      	movs	r3, #10
 8001a04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a06:	2303      	movs	r3, #3
 8001a08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	480d      	ldr	r0, [pc, #52]	@ (8001a44 <MX_ADC1_Init+0xec>)
 8001a10:	f001 fb66 	bl	80030e0 <HAL_ADC_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001a1a:	f000 fadb 	bl	8001fd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001a1e:	230b      	movs	r3, #11
 8001a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001a22:	2304      	movs	r3, #4
 8001a24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4806      	ldr	r0, [pc, #24]	@ (8001a44 <MX_ADC1_Init+0xec>)
 8001a2c:	f001 fb58 	bl	80030e0 <HAL_ADC_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001a36:	f000 facd 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20000030 	.word	0x20000030
 8001a48:	40012000 	.word	0x40012000
 8001a4c:	0f000001 	.word	0x0f000001

08001a50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a54:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <MX_I2C1_Init+0x50>)
 8001a56:	4a13      	ldr	r2, [pc, #76]	@ (8001aa4 <MX_I2C1_Init+0x54>)
 8001a58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a5a:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <MX_I2C1_Init+0x50>)
 8001a5c:	4a12      	ldr	r2, [pc, #72]	@ (8001aa8 <MX_I2C1_Init+0x58>)
 8001a5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a66:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa0 <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <MX_I2C1_Init+0x50>)
 8001a6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a74:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa0 <MX_I2C1_Init+0x50>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7a:	4b09      	ldr	r3, [pc, #36]	@ (8001aa0 <MX_I2C1_Init+0x50>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a80:	4b07      	ldr	r3, [pc, #28]	@ (8001aa0 <MX_I2C1_Init+0x50>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <MX_I2C1_Init+0x50>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a8c:	4804      	ldr	r0, [pc, #16]	@ (8001aa0 <MX_I2C1_Init+0x50>)
 8001a8e:	f002 fb0f 	bl	80040b0 <HAL_I2C_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a98:	f000 fa9c 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200000d8 	.word	0x200000d8
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	00061a80 	.word	0x00061a80

08001aac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b092      	sub	sp, #72	@ 0x48
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
 8001aca:	611a      	str	r2, [r3, #16]
 8001acc:	615a      	str	r2, [r3, #20]
 8001ace:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ad0:	1d3b      	adds	r3, r7, #4
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f005 f915 	bl	8006d06 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001adc:	4b45      	ldr	r3, [pc, #276]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001ade:	4a46      	ldr	r2, [pc, #280]	@ (8001bf8 <MX_TIM1_Init+0x14c>)
 8001ae0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ae2:	4b44      	ldr	r3, [pc, #272]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae8:	4b42      	ldr	r3, [pc, #264]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3199;
 8001aee:	4b41      	ldr	r3, [pc, #260]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001af0:	f640 427f 	movw	r2, #3199	@ 0xc7f
 8001af4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af6:	4b3f      	ldr	r3, [pc, #252]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001afc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b08:	483a      	ldr	r0, [pc, #232]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001b0a:	f004 f979 	bl	8005e00 <HAL_TIM_PWM_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001b14:	f000 fa5e 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001b24:	4619      	mov	r1, r3
 8001b26:	4833      	ldr	r0, [pc, #204]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001b28:	f005 f810 	bl	8006b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001b32:	f000 fa4f 	bl	8001fd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b36:	2360      	movs	r3, #96	@ 0x60
 8001b38:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001b42:	2300      	movs	r3, #0
 8001b44:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b56:	2200      	movs	r2, #0
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4826      	ldr	r0, [pc, #152]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001b5c:	f004 fc8c 	bl	8006478 <HAL_TIM_PWM_ConfigChannel>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001b66:	f000 fa35 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b6e:	2204      	movs	r2, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4820      	ldr	r0, [pc, #128]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001b74:	f004 fc80 	bl	8006478 <HAL_TIM_PWM_ConfigChannel>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001b7e:	f000 fa29 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b86:	2208      	movs	r2, #8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	481a      	ldr	r0, [pc, #104]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001b8c:	f004 fc74 	bl	8006478 <HAL_TIM_PWM_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001b96:	f000 fa1d 	bl	8001fd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b9e:	220c      	movs	r2, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4814      	ldr	r0, [pc, #80]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001ba4:	f004 fc68 	bl	8006478 <HAL_TIM_PWM_ConfigChannel>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001bae:	f000 fa11 	bl	8001fd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bd0:	1d3b      	adds	r3, r7, #4
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4807      	ldr	r0, [pc, #28]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001bd6:	f005 f833 	bl	8006c40 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001be0:	f000 f9f8 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001be4:	4803      	ldr	r0, [pc, #12]	@ (8001bf4 <MX_TIM1_Init+0x148>)
 8001be6:	f001 f8f1 	bl	8002dcc <HAL_TIM_MspPostInit>

}
 8001bea:	bf00      	nop
 8001bec:	3748      	adds	r7, #72	@ 0x48
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2000012c 	.word	0x2000012c
 8001bf8:	40010000 	.word	0x40010000

08001bfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08c      	sub	sp, #48	@ 0x30
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	2224      	movs	r2, #36	@ 0x24
 8001c08:	2100      	movs	r1, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f005 f87b 	bl	8006d06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c10:	1d3b      	adds	r3, r7, #4
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
 8001c16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c18:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <MX_TIM3_Init+0xa0>)
 8001c1a:	4a21      	ldr	r2, [pc, #132]	@ (8001ca0 <MX_TIM3_Init+0xa4>)
 8001c1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <MX_TIM3_Init+0xa0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <MX_TIM3_Init+0xa0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c9c <MX_TIM3_Init+0xa0>)
 8001c2c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_TIM3_Init+0xa0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <MX_TIM3_Init+0xa0>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c46:	2301      	movs	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c56:	2301      	movs	r3, #1
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c62:	f107 030c 	add.w	r3, r7, #12
 8001c66:	4619      	mov	r1, r3
 8001c68:	480c      	ldr	r0, [pc, #48]	@ (8001c9c <MX_TIM3_Init+0xa0>)
 8001c6a:	f004 f9e1 	bl	8006030 <HAL_TIM_Encoder_Init>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c74:	f000 f9ae 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c80:	1d3b      	adds	r3, r7, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <MX_TIM3_Init+0xa0>)
 8001c86:	f004 ff61 	bl	8006b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c90:	f000 f9a0 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c94:	bf00      	nop
 8001c96:	3730      	adds	r7, #48	@ 0x30
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000174 	.word	0x20000174
 8001ca0:	40000400 	.word	0x40000400

08001ca4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001caa:	463b      	mov	r3, r7
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <MX_TIM7_Init+0x64>)
 8001cb4:	4a15      	ldr	r2, [pc, #84]	@ (8001d0c <MX_TIM7_Init+0x68>)
 8001cb6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 59;
 8001cb8:	4b13      	ldr	r3, [pc, #76]	@ (8001d08 <MX_TIM7_Init+0x64>)
 8001cba:	223b      	movs	r2, #59	@ 0x3b
 8001cbc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbe:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <MX_TIM7_Init+0x64>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001cc4:	4b10      	ldr	r3, [pc, #64]	@ (8001d08 <MX_TIM7_Init+0x64>)
 8001cc6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cca:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <MX_TIM7_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cd2:	480d      	ldr	r0, [pc, #52]	@ (8001d08 <MX_TIM7_Init+0x64>)
 8001cd4:	f003 ff70 	bl	8005bb8 <HAL_TIM_Base_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001cde:	f000 f979 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	4619      	mov	r1, r3
 8001cee:	4806      	ldr	r0, [pc, #24]	@ (8001d08 <MX_TIM7_Init+0x64>)
 8001cf0:	f004 ff2c 	bl	8006b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001cfa:	f000 f96b 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	200001bc 	.word	0x200001bc
 8001d0c:	40001400 	.word	0x40001400

08001d10 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08c      	sub	sp, #48	@ 0x30
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	2224      	movs	r2, #36	@ 0x24
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f004 fff1 	bl	8006d06 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d2c:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <MX_TIM8_Init+0xa8>)
 8001d2e:	4a23      	ldr	r2, [pc, #140]	@ (8001dbc <MX_TIM8_Init+0xac>)
 8001d30:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d32:	4b21      	ldr	r3, [pc, #132]	@ (8001db8 <MX_TIM8_Init+0xa8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	@ (8001db8 <MX_TIM8_Init+0xa8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <MX_TIM8_Init+0xa8>)
 8001d40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d44:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	@ (8001db8 <MX_TIM8_Init+0xa8>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8001db8 <MX_TIM8_Init+0xa8>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	@ (8001db8 <MX_TIM8_Init+0xa8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d60:	2301      	movs	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d70:	2301      	movs	r3, #1
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001d7c:	f107 030c 	add.w	r3, r7, #12
 8001d80:	4619      	mov	r1, r3
 8001d82:	480d      	ldr	r0, [pc, #52]	@ (8001db8 <MX_TIM8_Init+0xa8>)
 8001d84:	f004 f954 	bl	8006030 <HAL_TIM_Encoder_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001d8e:	f000 f921 	bl	8001fd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001d9a:	1d3b      	adds	r3, r7, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4806      	ldr	r0, [pc, #24]	@ (8001db8 <MX_TIM8_Init+0xa8>)
 8001da0:	f004 fed4 	bl	8006b4c <HAL_TIMEx_MasterConfigSynchronization>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001daa:	f000 f913 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001dae:	bf00      	nop
 8001db0:	3730      	adds	r7, #48	@ 0x30
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000204 	.word	0x20000204
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <MX_TIM10_Init+0x40>)
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001e04 <MX_TIM10_Init+0x44>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001dca:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <MX_TIM10_Init+0x40>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e00 <MX_TIM10_Init+0x40>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <MX_TIM10_Init+0x40>)
 8001dd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ddc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b08      	ldr	r3, [pc, #32]	@ (8001e00 <MX_TIM10_Init+0x40>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <MX_TIM10_Init+0x40>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001dea:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <MX_TIM10_Init+0x40>)
 8001dec:	f003 fee4 	bl	8005bb8 <HAL_TIM_Base_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001df6:	f000 f8ed 	bl	8001fd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000024c 	.word	0x2000024c
 8001e04:	40014400 	.word	0x40014400

08001e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	4b0c      	ldr	r3, [pc, #48]	@ (8001e44 <MX_DMA_Init+0x3c>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e16:	4a0b      	ldr	r2, [pc, #44]	@ (8001e44 <MX_DMA_Init+0x3c>)
 8001e18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <MX_DMA_Init+0x3c>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e26:	607b      	str	r3, [r7, #4]
 8001e28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2038      	movs	r0, #56	@ 0x38
 8001e30:	f001 fc53 	bl	80036da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e34:	2038      	movs	r0, #56	@ 0x38
 8001e36:	f001 fc6c 	bl	8003712 <HAL_NVIC_EnableIRQ>

}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800

08001e48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	@ 0x28
 8001e4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	2200      	movs	r2, #0
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	605a      	str	r2, [r3, #4]
 8001e58:	609a      	str	r2, [r3, #8]
 8001e5a:	60da      	str	r2, [r3, #12]
 8001e5c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b52      	ldr	r3, [pc, #328]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	4a51      	ldr	r2, [pc, #324]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e82:	4a4a      	ldr	r2, [pc, #296]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e8a:	4b48      	ldr	r3, [pc, #288]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	4b44      	ldr	r3, [pc, #272]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	4a43      	ldr	r2, [pc, #268]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ea6:	4b41      	ldr	r3, [pc, #260]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	4b3d      	ldr	r3, [pc, #244]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a3c      	ldr	r2, [pc, #240]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001ebc:	f043 0308 	orr.w	r3, r3, #8
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b3a      	ldr	r3, [pc, #232]	@ (8001fac <MX_GPIO_Init+0x164>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0308 	and.w	r3, r3, #8
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin, GPIO_PIN_RESET);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2194      	movs	r1, #148	@ 0x94
 8001ed2:	4837      	ldr	r0, [pc, #220]	@ (8001fb0 <MX_GPIO_Init+0x168>)
 8001ed4:	f002 f8d3 	bl	800407e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ForwardRightEmitter_GPIO_Port, ForwardRightEmitter_Pin, GPIO_PIN_RESET);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ede:	4835      	ldr	r0, [pc, #212]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001ee0:	f002 f8cd 	bl	800407e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RightEmitter_Pin LeftEmitter_Pin ForwardLeftEmitter_Pin */
  GPIO_InitStruct.Pin = RightEmitter_Pin|LeftEmitter_Pin|ForwardLeftEmitter_Pin;
 8001ee4:	2394      	movs	r3, #148	@ 0x94
 8001ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	482d      	ldr	r0, [pc, #180]	@ (8001fb0 <MX_GPIO_Init+0x168>)
 8001efc:	f001 ff0a 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001f00:	2308      	movs	r3, #8
 8001f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f10:	2301      	movs	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4825      	ldr	r0, [pc, #148]	@ (8001fb0 <MX_GPIO_Init+0x168>)
 8001f1c:	f001 fefa 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button2_Pin Button1_Pin */
  GPIO_InitStruct.Pin = Button2_Pin|Button1_Pin;
 8001f20:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001f24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f26:	2300      	movs	r3, #0
 8001f28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f2e:	f107 0314 	add.w	r3, r7, #20
 8001f32:	4619      	mov	r1, r3
 8001f34:	481f      	ldr	r0, [pc, #124]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001f36:	f001 feed 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch3_Pin */
  GPIO_InitStruct.Pin = Switch3_Pin;
 8001f3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch3_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	4818      	ldr	r0, [pc, #96]	@ (8001fb0 <MX_GPIO_Init+0x168>)
 8001f50:	f001 fee0 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch1_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin;
 8001f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch1_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4813      	ldr	r0, [pc, #76]	@ (8001fb8 <MX_GPIO_Init+0x170>)
 8001f6a:	f001 fed3 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Switch2_Pin */
  GPIO_InitStruct.Pin = Switch2_Pin;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Switch2_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480e      	ldr	r0, [pc, #56]	@ (8001fbc <MX_GPIO_Init+0x174>)
 8001f82:	f001 fec7 	bl	8003d14 <HAL_GPIO_Init>

  /*Configure GPIO pin : ForwardRightEmitter_Pin */
  GPIO_InitStruct.Pin = ForwardRightEmitter_Pin;
 8001f86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(ForwardRightEmitter_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f107 0314 	add.w	r3, r7, #20
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4805      	ldr	r0, [pc, #20]	@ (8001fb4 <MX_GPIO_Init+0x16c>)
 8001fa0:	f001 feb8 	bl	8003d14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fa4:	bf00      	nop
 8001fa6:	3728      	adds	r7, #40	@ 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020c00 	.word	0x40020c00

08001fc0 <Get_I2C1_Ptr>:
{
	return &hadc1;
}

I2C_HandleTypeDef* Get_I2C1_Ptr(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
	return &hi2c1;
 8001fc4:	4b02      	ldr	r3, [pc, #8]	@ (8001fd0 <Get_I2C1_Ptr+0x10>)
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bc80      	pop	{r7}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	200000d8 	.word	0x200000d8

08001fd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fd8:	b672      	cpsid	i
}
 8001fda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <Error_Handler+0x8>

08001fe0 <limitPWM>:
//#include "pid.h"
//
//extern float velocity_left;
//extern float velocity_right;

float limitPWM(float pwm) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
	if (pwm > PWM_MAX)
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7fe fa51 	bl	8000490 <__aeabi_f2d>
 8001fee:	a30e      	add	r3, pc, #56	@ (adr r3, 8002028 <limitPWM+0x48>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fd34 	bl	8000a60 <__aeabi_dcmpgt>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <limitPWM+0x22>
		return PWM_MAX;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8002038 <limitPWM+0x58>)
 8002000:	e00d      	b.n	800201e <limitPWM+0x3e>
	else if (pwm < -PWM_MAX)
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7fe fa44 	bl	8000490 <__aeabi_f2d>
 8002008:	a309      	add	r3, pc, #36	@ (adr r3, 8002030 <limitPWM+0x50>)
 800200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200e:	f7fe fd09 	bl	8000a24 <__aeabi_dcmplt>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <limitPWM+0x3c>
		return -PWM_MAX;
 8002018:	4b08      	ldr	r3, [pc, #32]	@ (800203c <limitPWM+0x5c>)
 800201a:	e000      	b.n	800201e <limitPWM+0x3e>
	else
		return pwm;
 800201c:	687b      	ldr	r3, [r7, #4]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	66666666 	.word	0x66666666
 800202c:	3fee6666 	.word	0x3fee6666
 8002030:	66666666 	.word	0x66666666
 8002034:	bfee6666 	.word	0xbfee6666
 8002038:	3f733333 	.word	0x3f733333
 800203c:	bf733333 	.word	0xbf733333

08002040 <setMotorLPWM>:

void setMotorLPWM(float pwm) {
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 8002048:	f04f 0100 	mov.w	r1, #0
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff f821 	bl	8001094 <__aeabi_fcmpge>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d012      	beq.n	800207e <setMotorLPWM+0x3e>
	{
		TIM1->CCR1 = 0;
 8002058:	4b15      	ldr	r3, [pc, #84]	@ (80020b0 <setMotorLPWM+0x70>)
 800205a:	2200      	movs	r2, #0
 800205c:	635a      	str	r2, [r3, #52]	@ 0x34
		TIM1->CCR2 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff ffbe 	bl	8001fe0 <limitPWM>
 8002064:	4603      	mov	r3, r0
 8002066:	4913      	ldr	r1, [pc, #76]	@ (80020b4 <setMotorLPWM+0x74>)
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe fe61 	bl	8000d30 <__aeabi_fmul>
 800206e:	4603      	mov	r3, r0
 8002070:	4c0f      	ldr	r4, [pc, #60]	@ (80020b0 <setMotorLPWM+0x70>)
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f822 	bl	80010bc <__aeabi_f2uiz>
 8002078:	4603      	mov	r3, r0
 800207a:	63a3      	str	r3, [r4, #56]	@ 0x38
	{
		TIM1->CCR2 = 0;
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}

}
 800207c:	e013      	b.n	80020a6 <setMotorLPWM+0x66>
		TIM1->CCR2 = 0;
 800207e:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <setMotorLPWM+0x70>)
 8002080:	2200      	movs	r2, #0
 8002082:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM1->CCR1 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f7ff ffab 	bl	8001fe0 <limitPWM>
 800208a:	4603      	mov	r3, r0
 800208c:	4909      	ldr	r1, [pc, #36]	@ (80020b4 <setMotorLPWM+0x74>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fe4e 	bl	8000d30 <__aeabi_fmul>
 8002094:	4603      	mov	r3, r0
 8002096:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800209a:	4c05      	ldr	r4, [pc, #20]	@ (80020b0 <setMotorLPWM+0x70>)
 800209c:	4618      	mov	r0, r3
 800209e:	f7ff f80d 	bl	80010bc <__aeabi_f2uiz>
 80020a2:	4603      	mov	r3, r0
 80020a4:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40010000 	.word	0x40010000
 80020b4:	4547f000 	.word	0x4547f000

080020b8 <setMotorRPWM>:

void setMotorRPWM(float pwm) {
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	if (pwm >= 0)
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7fe ffe5 	bl	8001094 <__aeabi_fcmpge>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d012      	beq.n	80020f6 <setMotorRPWM+0x3e>
	{
		TIM1->CCR4 = 0;
 80020d0:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <setMotorRPWM+0x70>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	641a      	str	r2, [r3, #64]	@ 0x40
		TIM1->CCR3 = (uint32_t) (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ff82 	bl	8001fe0 <limitPWM>
 80020dc:	4603      	mov	r3, r0
 80020de:	4913      	ldr	r1, [pc, #76]	@ (800212c <setMotorRPWM+0x74>)
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fe25 	bl	8000d30 <__aeabi_fmul>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4c0f      	ldr	r4, [pc, #60]	@ (8002128 <setMotorRPWM+0x70>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe ffe6 	bl	80010bc <__aeabi_f2uiz>
 80020f0:	4603      	mov	r3, r0
 80020f2:	63e3      	str	r3, [r4, #60]	@ 0x3c
	else
	{
		TIM1->CCR3 = 0;
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
	}
}
 80020f4:	e013      	b.n	800211e <setMotorRPWM+0x66>
		TIM1->CCR3 = 0;
 80020f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <setMotorRPWM+0x70>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	63da      	str	r2, [r3, #60]	@ 0x3c
		TIM1->CCR4 = (uint32_t) - (limitPWM(pwm) * MAX_TIMER_COUNTS);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff6f 	bl	8001fe0 <limitPWM>
 8002102:	4603      	mov	r3, r0
 8002104:	4909      	ldr	r1, [pc, #36]	@ (800212c <setMotorRPWM+0x74>)
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fe12 	bl	8000d30 <__aeabi_fmul>
 800210c:	4603      	mov	r3, r0
 800210e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002112:	4c05      	ldr	r4, [pc, #20]	@ (8002128 <setMotorRPWM+0x70>)
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe ffd1 	bl	80010bc <__aeabi_f2uiz>
 800211a:	4603      	mov	r3, r0
 800211c:	6423      	str	r3, [r4, #64]	@ 0x40
}
 800211e:	bf00      	nop
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	bd90      	pop	{r4, r7, pc}
 8002126:	bf00      	nop
 8002128:	40010000 	.word	0x40010000
 800212c:	4547f000 	.word	0x4547f000

08002130 <resetMotors>:

void resetMotors() {
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
	setMotorLPWM(0);
 8002134:	f04f 0000 	mov.w	r0, #0
 8002138:	f7ff ff82 	bl	8002040 <setMotorLPWM>
	setMotorRPWM(0);
 800213c:	f04f 0000 	mov.w	r0, #0
 8002140:	f7ff ffba 	bl	80020b8 <setMotorRPWM>
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <setPIDGoalD>:
int goal_reached_timer = 0;

float gyro_angle = 0;
float gyro_vel = 0;

void setPIDGoalD(int16_t distance) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
	goal_distance = distance;
 8002152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe fd96 	bl	8000c88 <__aeabi_i2f>
 800215c:	4603      	mov	r3, r0
 800215e:	4a03      	ldr	r2, [pc, #12]	@ (800216c <setPIDGoalD+0x24>)
 8002160:	6013      	str	r3, [r2, #0]
}
 8002162:	bf00      	nop
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	200002a4 	.word	0x200002a4

08002170 <setPIDGoalA>:
void setPIDGoalA(int16_t angle) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	80fb      	strh	r3, [r7, #6]
	goal_angle += angle;
 800217a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe fd82 	bl	8000c88 <__aeabi_i2f>
 8002184:	4602      	mov	r2, r0
 8002186:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <setPIDGoalA+0x34>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	4610      	mov	r0, r2
 800218e:	f7fe fcc7 	bl	8000b20 <__addsf3>
 8002192:	4603      	mov	r3, r0
 8002194:	461a      	mov	r2, r3
 8002196:	4b03      	ldr	r3, [pc, #12]	@ (80021a4 <setPIDGoalA+0x34>)
 8002198:	601a      	str	r2, [r3, #0]
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200002a8 	.word	0x200002a8

080021a8 <setState>:

void setState(STATE curr_state) {
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
	state = curr_state;
 80021b2:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <setState+0x1c>)
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	7013      	strb	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	370c      	adds	r7, #12
 80021bc:	46bd      	mov	sp, r7
 80021be:	bc80      	pop	{r7}
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000318 	.word	0x20000318

080021c8 <PDController>:

void PDController() {
 80021c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0

//////////////////////////	CALCULATE DISTANCE AND ANGLE CORRECTION /////////////////////////

	float adjusted_angle = goal_angle/* + IRadjustment*/;
 80021ce:	4b96      	ldr	r3, [pc, #600]	@ (8002428 <PDController+0x260>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	607b      	str	r3, [r7, #4]

	readGyro(&gyro_vel);
 80021d4:	4895      	ldr	r0, [pc, #596]	@ (800242c <PDController+0x264>)
 80021d6:	f7ff fa9f 	bl	8001718 <readGyro>
	gyro_vel /= 1000;
 80021da:	4b94      	ldr	r3, [pc, #592]	@ (800242c <PDController+0x264>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4994      	ldr	r1, [pc, #592]	@ (8002430 <PDController+0x268>)
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe fe59 	bl	8000e98 <__aeabi_fdiv>
 80021e6:	4603      	mov	r3, r0
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b90      	ldr	r3, [pc, #576]	@ (800242c <PDController+0x264>)
 80021ec:	601a      	str	r2, [r3, #0]
	gyro_angle += gyro_vel;
 80021ee:	4b91      	ldr	r3, [pc, #580]	@ (8002434 <PDController+0x26c>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a8e      	ldr	r2, [pc, #568]	@ (800242c <PDController+0x264>)
 80021f4:	6812      	ldr	r2, [r2, #0]
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fc91 	bl	8000b20 <__addsf3>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	4b8c      	ldr	r3, [pc, #560]	@ (8002434 <PDController+0x26c>)
 8002204:	601a      	str	r2, [r3, #0]

	angle_error = adjusted_angle - gyro_angle;
 8002206:	4b8b      	ldr	r3, [pc, #556]	@ (8002434 <PDController+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7fe fc85 	bl	8000b1c <__aeabi_fsub>
 8002212:	4603      	mov	r3, r0
 8002214:	461a      	mov	r2, r3
 8002216:	4b88      	ldr	r3, [pc, #544]	@ (8002438 <PDController+0x270>)
 8002218:	601a      	str	r2, [r3, #0]
	angle_correction = kPw * angle_error + kDw * (angle_error - old_angle_error);
 800221a:	4a88      	ldr	r2, [pc, #544]	@ (800243c <PDController+0x274>)
 800221c:	4b86      	ldr	r3, [pc, #536]	@ (8002438 <PDController+0x270>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4619      	mov	r1, r3
 8002222:	4610      	mov	r0, r2
 8002224:	f7fe fd84 	bl	8000d30 <__aeabi_fmul>
 8002228:	4603      	mov	r3, r0
 800222a:	461c      	mov	r4, r3
 800222c:	4b82      	ldr	r3, [pc, #520]	@ (8002438 <PDController+0x270>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a83      	ldr	r2, [pc, #524]	@ (8002440 <PDController+0x278>)
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fc70 	bl	8000b1c <__aeabi_fsub>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	4619      	mov	r1, r3
 8002246:	4610      	mov	r0, r2
 8002248:	f7fe fd72 	bl	8000d30 <__aeabi_fmul>
 800224c:	4603      	mov	r3, r0
 800224e:	4619      	mov	r1, r3
 8002250:	4620      	mov	r0, r4
 8002252:	f7fe fc65 	bl	8000b20 <__addsf3>
 8002256:	4603      	mov	r3, r0
 8002258:	461a      	mov	r2, r3
 800225a:	4b7a      	ldr	r3, [pc, #488]	@ (8002444 <PDController+0x27c>)
 800225c:	601a      	str	r2, [r3, #0]

	distance_error = goal_distance - ((getLeftEncoderCounts() + getRightEncoderCounts()) / (2 * 3.38333333333));
 800225e:	4b7a      	ldr	r3, [pc, #488]	@ (8002448 <PDController+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe f914 	bl	8000490 <__aeabi_f2d>
 8002268:	4604      	mov	r4, r0
 800226a:	460d      	mov	r5, r1
 800226c:	f7ff f908 	bl	8001480 <getLeftEncoderCounts>
 8002270:	4603      	mov	r3, r0
 8002272:	461e      	mov	r6, r3
 8002274:	f7ff f8f6 	bl	8001464 <getRightEncoderCounts>
 8002278:	4603      	mov	r3, r0
 800227a:	4433      	add	r3, r6
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe f8f5 	bl	800046c <__aeabi_i2d>
 8002282:	a365      	add	r3, pc, #404	@ (adr r3, 8002418 <PDController+0x250>)
 8002284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002288:	f7fe fa84 	bl	8000794 <__aeabi_ddiv>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4620      	mov	r0, r4
 8002292:	4629      	mov	r1, r5
 8002294:	f7fd ff9c 	bl	80001d0 <__aeabi_dsub>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4610      	mov	r0, r2
 800229e:	4619      	mov	r1, r3
 80022a0:	f7fe fbe8 	bl	8000a74 <__aeabi_d2f>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4a69      	ldr	r2, [pc, #420]	@ (800244c <PDController+0x284>)
 80022a8:	6013      	str	r3, [r2, #0]

	distance_correction = kPx * distance_error + kDx * (distance_error - old_distance_error);
 80022aa:	4a69      	ldr	r2, [pc, #420]	@ (8002450 <PDController+0x288>)
 80022ac:	4b67      	ldr	r3, [pc, #412]	@ (800244c <PDController+0x284>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f7fe fd3c 	bl	8000d30 <__aeabi_fmul>
 80022b8:	4603      	mov	r3, r0
 80022ba:	461c      	mov	r4, r3
 80022bc:	4b63      	ldr	r3, [pc, #396]	@ (800244c <PDController+0x284>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a64      	ldr	r2, [pc, #400]	@ (8002454 <PDController+0x28c>)
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe fc28 	bl	8000b1c <__aeabi_fsub>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	4619      	mov	r1, r3
 80022d6:	4610      	mov	r0, r2
 80022d8:	f7fe fd2a 	bl	8000d30 <__aeabi_fmul>
 80022dc:	4603      	mov	r3, r0
 80022de:	4619      	mov	r1, r3
 80022e0:	4620      	mov	r0, r4
 80022e2:	f7fe fc1d 	bl	8000b20 <__addsf3>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002458 <PDController+0x290>)
 80022ec:	601a      	str	r2, [r3, #0]

/////////////////////////////////	APPLY ACCELERATION	///////////////////////////////

	if (fabs(distance_error) > 100)
 80022ee:	4b57      	ldr	r3, [pc, #348]	@ (800244c <PDController+0x284>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022f6:	4959      	ldr	r1, [pc, #356]	@ (800245c <PDController+0x294>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fed5 	bl	80010a8 <__aeabi_fcmpgt>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d034      	beq.n	800236e <PDController+0x1a6>
	{		// If we're going straight and not at the end, apply acceleration
		if (fabs(distance_correction - old_distance_correction) > xacceleration)
 8002304:	4b54      	ldr	r3, [pc, #336]	@ (8002458 <PDController+0x290>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a55      	ldr	r2, [pc, #340]	@ (8002460 <PDController+0x298>)
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fc04 	bl	8000b1c <__aeabi_fsub>
 8002314:	4603      	mov	r3, r0
 8002316:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800231a:	4a52      	ldr	r2, [pc, #328]	@ (8002464 <PDController+0x29c>)
 800231c:	4611      	mov	r1, r2
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fec2 	bl	80010a8 <__aeabi_fcmpgt>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d021      	beq.n	800236e <PDController+0x1a6>
		{
			distance_correction = old_distance_correction + (xacceleration * sign(distance_correction - old_distance_correction));
 800232a:	4b4b      	ldr	r3, [pc, #300]	@ (8002458 <PDController+0x290>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a4c      	ldr	r2, [pc, #304]	@ (8002460 <PDController+0x298>)
 8002330:	6812      	ldr	r2, [r2, #0]
 8002332:	4611      	mov	r1, r2
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fbf1 	bl	8000b1c <__aeabi_fsub>
 800233a:	4603      	mov	r3, r0
 800233c:	4618      	mov	r0, r3
 800233e:	f000 fdd5 	bl	8002eec <sign>
 8002342:	4603      	mov	r3, r0
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fc9f 	bl	8000c88 <__aeabi_i2f>
 800234a:	4603      	mov	r3, r0
 800234c:	4a45      	ldr	r2, [pc, #276]	@ (8002464 <PDController+0x29c>)
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe fced 	bl	8000d30 <__aeabi_fmul>
 8002356:	4603      	mov	r3, r0
 8002358:	461a      	mov	r2, r3
 800235a:	4b41      	ldr	r3, [pc, #260]	@ (8002460 <PDController+0x298>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4619      	mov	r1, r3
 8002360:	4610      	mov	r0, r2
 8002362:	f7fe fbdd 	bl	8000b20 <__addsf3>
 8002366:	4603      	mov	r3, r0
 8002368:	461a      	mov	r2, r3
 800236a:	4b3b      	ldr	r3, [pc, #236]	@ (8002458 <PDController+0x290>)
 800236c:	601a      	str	r2, [r3, #0]
		}
	}

////////////////////// ROUND DISTANCE OR ANGLE CORRECTION	//////////////////////////

	switch(state) {		// Apply lower limits of PWM for various states
 800236e:	4b3e      	ldr	r3, [pc, #248]	@ (8002468 <PDController+0x2a0>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d002      	beq.n	800237c <PDController+0x1b4>
 8002376:	2b02      	cmp	r3, #2
 8002378:	d031      	beq.n	80023de <PDController+0x216>
		case TURNING:
			if (fabs(angle_correction) > 0.01 && fabs(angle_correction) < PWMMinw)
				angle_correction = sign(angle_correction) * PWMMinw;
			break;
		default:
			break;
 800237a:	e08d      	b.n	8002498 <PDController+0x2d0>
			if (fabs(distance_correction) > 0.01 && fabs(distance_correction) < PWMMinx)
 800237c:	4b36      	ldr	r3, [pc, #216]	@ (8002458 <PDController+0x290>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe f883 	bl	8000490 <__aeabi_f2d>
 800238a:	a325      	add	r3, pc, #148	@ (adr r3, 8002420 <PDController+0x258>)
 800238c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002390:	f7fe fb66 	bl	8000a60 <__aeabi_dcmpgt>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d100      	bne.n	800239c <PDController+0x1d4>
			break;
 800239a:	e07d      	b.n	8002498 <PDController+0x2d0>
			if (fabs(distance_correction) > 0.01 && fabs(distance_correction) < PWMMinx)
 800239c:	4b2e      	ldr	r3, [pc, #184]	@ (8002458 <PDController+0x290>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023a4:	4a31      	ldr	r2, [pc, #196]	@ (800246c <PDController+0x2a4>)
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe fe5f 	bl	800106c <__aeabi_fcmplt>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d100      	bne.n	80023b6 <PDController+0x1ee>
			break;
 80023b4:	e070      	b.n	8002498 <PDController+0x2d0>
				distance_correction = sign(distance_correction) * PWMMinx;
 80023b6:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <PDController+0x290>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 fd96 	bl	8002eec <sign>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fc60 	bl	8000c88 <__aeabi_i2f>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4a28      	ldr	r2, [pc, #160]	@ (800246c <PDController+0x2a4>)
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe fcae 	bl	8000d30 <__aeabi_fmul>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461a      	mov	r2, r3
 80023d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002458 <PDController+0x290>)
 80023da:	601a      	str	r2, [r3, #0]
			break;
 80023dc:	e05c      	b.n	8002498 <PDController+0x2d0>
			if (fabs(angle_correction) > 0.01 && fabs(angle_correction) < PWMMinw)
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <PDController+0x27c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f852 	bl	8000490 <__aeabi_f2d>
 80023ec:	a30c      	add	r3, pc, #48	@ (adr r3, 8002420 <PDController+0x258>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fe fb35 	bl	8000a60 <__aeabi_dcmpgt>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d100      	bne.n	80023fe <PDController+0x236>
			break;
 80023fc:	e04b      	b.n	8002496 <PDController+0x2ce>
			if (fabs(angle_correction) > 0.01 && fabs(angle_correction) < PWMMinw)
 80023fe:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <PDController+0x27c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002406:	4a19      	ldr	r2, [pc, #100]	@ (800246c <PDController+0x2a4>)
 8002408:	4611      	mov	r1, r2
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe fe2e 	bl	800106c <__aeabi_fcmplt>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d12c      	bne.n	8002470 <PDController+0x2a8>
			break;
 8002416:	e03e      	b.n	8002496 <PDController+0x2ce>
 8002418:	1110f3bf 	.word	0x1110f3bf
 800241c:	401b1111 	.word	0x401b1111
 8002420:	47ae147b 	.word	0x47ae147b
 8002424:	3f847ae1 	.word	0x3f847ae1
 8002428:	200002a8 	.word	0x200002a8
 800242c:	2000032c 	.word	0x2000032c
 8002430:	447a0000 	.word	0x447a0000
 8002434:	20000328 	.word	0x20000328
 8002438:	200002ac 	.word	0x200002ac
 800243c:	3c23d70a 	.word	0x3c23d70a
 8002440:	200002b0 	.word	0x200002b0
 8002444:	200002dc 	.word	0x200002dc
 8002448:	200002a4 	.word	0x200002a4
 800244c:	200002e0 	.word	0x200002e0
 8002450:	3ba3d70a 	.word	0x3ba3d70a
 8002454:	200002e4 	.word	0x200002e4
 8002458:	20000310 	.word	0x20000310
 800245c:	42c80000 	.word	0x42c80000
 8002460:	20000314 	.word	0x20000314
 8002464:	3a83126f 	.word	0x3a83126f
 8002468:	20000318 	.word	0x20000318
 800246c:	3ea3d70a 	.word	0x3ea3d70a
				angle_correction = sign(angle_correction) * PWMMinw;
 8002470:	4b36      	ldr	r3, [pc, #216]	@ (800254c <PDController+0x384>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f000 fd39 	bl	8002eec <sign>
 800247a:	4603      	mov	r3, r0
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fc03 	bl	8000c88 <__aeabi_i2f>
 8002482:	4603      	mov	r3, r0
 8002484:	4a32      	ldr	r2, [pc, #200]	@ (8002550 <PDController+0x388>)
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fc51 	bl	8000d30 <__aeabi_fmul>
 800248e:	4603      	mov	r3, r0
 8002490:	461a      	mov	r2, r3
 8002492:	4b2e      	ldr	r3, [pc, #184]	@ (800254c <PDController+0x384>)
 8002494:	601a      	str	r2, [r3, #0]
			break;
 8002496:	bf00      	nop
	}

	if (fabs(distance_correction) > PWMMaxx)		// Upper Limit for PWM
 8002498:	4b2e      	ldr	r3, [pc, #184]	@ (8002554 <PDController+0x38c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024a0:	4a2d      	ldr	r2, [pc, #180]	@ (8002558 <PDController+0x390>)
 80024a2:	4611      	mov	r1, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe fdff 	bl	80010a8 <__aeabi_fcmpgt>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d012      	beq.n	80024d6 <PDController+0x30e>
		distance_correction = sign(distance_correction) * PWMMaxx;
 80024b0:	4b28      	ldr	r3, [pc, #160]	@ (8002554 <PDController+0x38c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 fd19 	bl	8002eec <sign>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fbe3 	bl	8000c88 <__aeabi_i2f>
 80024c2:	4603      	mov	r3, r0
 80024c4:	4a24      	ldr	r2, [pc, #144]	@ (8002558 <PDController+0x390>)
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7fe fc31 	bl	8000d30 <__aeabi_fmul>
 80024ce:	4603      	mov	r3, r0
 80024d0:	461a      	mov	r2, r3
 80024d2:	4b20      	ldr	r3, [pc, #128]	@ (8002554 <PDController+0x38c>)
 80024d4:	601a      	str	r2, [r3, #0]

	if (fabs(angle_correction) > PWMMaxw)
 80024d6:	4b1d      	ldr	r3, [pc, #116]	@ (800254c <PDController+0x384>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024de:	4a1f      	ldr	r2, [pc, #124]	@ (800255c <PDController+0x394>)
 80024e0:	4611      	mov	r1, r2
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fde0 	bl	80010a8 <__aeabi_fcmpgt>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d012      	beq.n	8002514 <PDController+0x34c>
		angle_correction = sign(angle_correction) * PWMMaxw;
 80024ee:	4b17      	ldr	r3, [pc, #92]	@ (800254c <PDController+0x384>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fcfa 	bl	8002eec <sign>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe fbc4 	bl	8000c88 <__aeabi_i2f>
 8002500:	4603      	mov	r3, r0
 8002502:	4a16      	ldr	r2, [pc, #88]	@ (800255c <PDController+0x394>)
 8002504:	4611      	mov	r1, r2
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe fc12 	bl	8000d30 <__aeabi_fmul>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	4b0e      	ldr	r3, [pc, #56]	@ (800254c <PDController+0x384>)
 8002512:	601a      	str	r2, [r3, #0]

	left_PWM_value = (distance_correction + angle_correction);
 8002514:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <PDController+0x38c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0c      	ldr	r2, [pc, #48]	@ (800254c <PDController+0x384>)
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	4611      	mov	r1, r2
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe fafe 	bl	8000b20 <__addsf3>
 8002524:	4603      	mov	r3, r0
 8002526:	461a      	mov	r2, r3
 8002528:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <PDController+0x398>)
 800252a:	601a      	str	r2, [r3, #0]
	right_PWM_value = (distance_correction - angle_correction);
 800252c:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <PDController+0x38c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a06      	ldr	r2, [pc, #24]	@ (800254c <PDController+0x384>)
 8002532:	6812      	ldr	r2, [r2, #0]
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe faf0 	bl	8000b1c <__aeabi_fsub>
 800253c:	4603      	mov	r3, r0
 800253e:	461a      	mov	r2, r3
 8002540:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <PDController+0x39c>)
 8002542:	601a      	str	r2, [r3, #0]

}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800254c:	200002dc 	.word	0x200002dc
 8002550:	3ea3d70a 	.word	0x3ea3d70a
 8002554:	20000310 	.word	0x20000310
 8002558:	3f266666 	.word	0x3f266666
 800255c:	3ecccccd 	.word	0x3ecccccd
 8002560:	2000031c 	.word	0x2000031c
 8002564:	20000320 	.word	0x20000320

08002568 <updatePID>:

void updatePID() {
 8002568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0

///// CALCULATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

//////////////////////	CALCULATE MOTOR PWM VALUES	/////////////////////

	PDController();
 8002570:	f7ff fe2a 	bl	80021c8 <PDController>

////////////////////	NORMALIZE LEFT AND RIGHT PWM VALUES ////////////////

	// If we are kinda seriously trying to move)
	if (fabs(left_PWM_value) > 0.01 || fabs(right_PWM_value) > 0.01) {
 8002574:	4b80      	ldr	r3, [pc, #512]	@ (8002778 <updatePID+0x210>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd ff87 	bl	8000490 <__aeabi_f2d>
 8002582:	a37b      	add	r3, pc, #492	@ (adr r3, 8002770 <updatePID+0x208>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f7fe fa6a 	bl	8000a60 <__aeabi_dcmpgt>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10f      	bne.n	80025b2 <updatePID+0x4a>
 8002592:	4b7a      	ldr	r3, [pc, #488]	@ (800277c <updatePID+0x214>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800259a:	4618      	mov	r0, r3
 800259c:	f7fd ff78 	bl	8000490 <__aeabi_f2d>
 80025a0:	a373      	add	r3, pc, #460	@ (adr r3, 8002770 <updatePID+0x208>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	f7fe fa5b 	bl	8000a60 <__aeabi_dcmpgt>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 8129 	beq.w	8002804 <updatePID+0x29c>

		// If the left PWM is greater than the right, need left PWM to be higher than the minimum
		if (state == MOVING && fabs(left_PWM_value) > fabs(right_PWM_value) && fabs(right_PWM_value) < PWMMin) {
 80025b2:	4b73      	ldr	r3, [pc, #460]	@ (8002780 <updatePID+0x218>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d16a      	bne.n	8002690 <updatePID+0x128>
 80025ba:	4b6f      	ldr	r3, [pc, #444]	@ (8002778 <updatePID+0x210>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025c2:	4b6e      	ldr	r3, [pc, #440]	@ (800277c <updatePID+0x214>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025ca:	4619      	mov	r1, r3
 80025cc:	4610      	mov	r0, r2
 80025ce:	f7fe fd6b 	bl	80010a8 <__aeabi_fcmpgt>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d05b      	beq.n	8002690 <updatePID+0x128>
 80025d8:	4b68      	ldr	r3, [pc, #416]	@ (800277c <updatePID+0x214>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025e0:	4a68      	ldr	r2, [pc, #416]	@ (8002784 <updatePID+0x21c>)
 80025e2:	4611      	mov	r1, r2
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fd41 	bl	800106c <__aeabi_fcmplt>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d04f      	beq.n	8002690 <updatePID+0x128>
			left_PWM_value += sign(right_PWM_value) * (PWMMin - fabs(right_PWM_value));
 80025f0:	4b62      	ldr	r3, [pc, #392]	@ (800277c <updatePID+0x214>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fc79 	bl	8002eec <sign>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ff35 	bl	800046c <__aeabi_i2d>
 8002602:	4604      	mov	r4, r0
 8002604:	460d      	mov	r5, r1
 8002606:	4b5f      	ldr	r3, [pc, #380]	@ (8002784 <updatePID+0x21c>)
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd ff41 	bl	8000490 <__aeabi_f2d>
 800260e:	4680      	mov	r8, r0
 8002610:	4689      	mov	r9, r1
 8002612:	4b5a      	ldr	r3, [pc, #360]	@ (800277c <updatePID+0x214>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ff38 	bl	8000490 <__aeabi_f2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4640      	mov	r0, r8
 8002626:	4649      	mov	r1, r9
 8002628:	f7fd fdd2 	bl	80001d0 <__aeabi_dsub>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4620      	mov	r0, r4
 8002632:	4629      	mov	r1, r5
 8002634:	f7fd ff84 	bl	8000540 <__aeabi_dmul>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4614      	mov	r4, r2
 800263e:	461d      	mov	r5, r3
 8002640:	4b4d      	ldr	r3, [pc, #308]	@ (8002778 <updatePID+0x210>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff23 	bl	8000490 <__aeabi_f2d>
 800264a:	4602      	mov	r2, r0
 800264c:	460b      	mov	r3, r1
 800264e:	4620      	mov	r0, r4
 8002650:	4629      	mov	r1, r5
 8002652:	f7fd fdbf 	bl	80001d4 <__adddf3>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe fa09 	bl	8000a74 <__aeabi_d2f>
 8002662:	4603      	mov	r3, r0
 8002664:	4a44      	ldr	r2, [pc, #272]	@ (8002778 <updatePID+0x210>)
 8002666:	6013      	str	r3, [r2, #0]
			right_PWM_value = sign(right_PWM_value) * PWMMin;
 8002668:	4b44      	ldr	r3, [pc, #272]	@ (800277c <updatePID+0x214>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fc3d 	bl	8002eec <sign>
 8002672:	4603      	mov	r3, r0
 8002674:	4618      	mov	r0, r3
 8002676:	f7fe fb07 	bl	8000c88 <__aeabi_i2f>
 800267a:	4603      	mov	r3, r0
 800267c:	4a41      	ldr	r2, [pc, #260]	@ (8002784 <updatePID+0x21c>)
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f7fe fb55 	bl	8000d30 <__aeabi_fmul>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	4b3c      	ldr	r3, [pc, #240]	@ (800277c <updatePID+0x214>)
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e0b9      	b.n	8002804 <updatePID+0x29c>
		}

		// If the right PWM is greater than the left, need right PWM to be higher than the minimum
		else if (state == MOVING && fabs(right_PWM_value) > fabs(left_PWM_value) && fabs(left_PWM_value) < PWMMin) {
 8002690:	4b3b      	ldr	r3, [pc, #236]	@ (8002780 <updatePID+0x218>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d177      	bne.n	8002788 <updatePID+0x220>
 8002698:	4b38      	ldr	r3, [pc, #224]	@ (800277c <updatePID+0x214>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026a0:	4b35      	ldr	r3, [pc, #212]	@ (8002778 <updatePID+0x210>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f7fe fcfc 	bl	80010a8 <__aeabi_fcmpgt>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d068      	beq.n	8002788 <updatePID+0x220>
 80026b6:	4b30      	ldr	r3, [pc, #192]	@ (8002778 <updatePID+0x210>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026be:	4a31      	ldr	r2, [pc, #196]	@ (8002784 <updatePID+0x21c>)
 80026c0:	4611      	mov	r1, r2
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fcd2 	bl	800106c <__aeabi_fcmplt>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d05c      	beq.n	8002788 <updatePID+0x220>
			right_PWM_value += sign(left_PWM_value) * (PWMMin - fabs(left_PWM_value));
 80026ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002778 <updatePID+0x210>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fc0a 	bl	8002eec <sign>
 80026d8:	4603      	mov	r3, r0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fec6 	bl	800046c <__aeabi_i2d>
 80026e0:	4604      	mov	r4, r0
 80026e2:	460d      	mov	r5, r1
 80026e4:	4b27      	ldr	r3, [pc, #156]	@ (8002784 <updatePID+0x21c>)
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fd fed2 	bl	8000490 <__aeabi_f2d>
 80026ec:	4680      	mov	r8, r0
 80026ee:	4689      	mov	r9, r1
 80026f0:	4b21      	ldr	r3, [pc, #132]	@ (8002778 <updatePID+0x210>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7fd fec9 	bl	8000490 <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4640      	mov	r0, r8
 8002704:	4649      	mov	r1, r9
 8002706:	f7fd fd63 	bl	80001d0 <__aeabi_dsub>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4620      	mov	r0, r4
 8002710:	4629      	mov	r1, r5
 8002712:	f7fd ff15 	bl	8000540 <__aeabi_dmul>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4614      	mov	r4, r2
 800271c:	461d      	mov	r5, r3
 800271e:	4b17      	ldr	r3, [pc, #92]	@ (800277c <updatePID+0x214>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd feb4 	bl	8000490 <__aeabi_f2d>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4620      	mov	r0, r4
 800272e:	4629      	mov	r1, r5
 8002730:	f7fd fd50 	bl	80001d4 <__adddf3>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4610      	mov	r0, r2
 800273a:	4619      	mov	r1, r3
 800273c:	f7fe f99a 	bl	8000a74 <__aeabi_d2f>
 8002740:	4603      	mov	r3, r0
 8002742:	4a0e      	ldr	r2, [pc, #56]	@ (800277c <updatePID+0x214>)
 8002744:	6013      	str	r3, [r2, #0]
			left_PWM_value = sign(left_PWM_value) * PWMMin;
 8002746:	4b0c      	ldr	r3, [pc, #48]	@ (8002778 <updatePID+0x210>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fbce 	bl	8002eec <sign>
 8002750:	4603      	mov	r3, r0
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fa98 	bl	8000c88 <__aeabi_i2f>
 8002758:	4603      	mov	r3, r0
 800275a:	4a0a      	ldr	r2, [pc, #40]	@ (8002784 <updatePID+0x21c>)
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f7fe fae6 	bl	8000d30 <__aeabi_fmul>
 8002764:	4603      	mov	r3, r0
 8002766:	461a      	mov	r2, r3
 8002768:	4b03      	ldr	r3, [pc, #12]	@ (8002778 <updatePID+0x210>)
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	e04a      	b.n	8002804 <updatePID+0x29c>
 800276e:	bf00      	nop
 8002770:	47ae147b 	.word	0x47ae147b
 8002774:	3f847ae1 	.word	0x3f847ae1
 8002778:	2000031c 	.word	0x2000031c
 800277c:	20000320 	.word	0x20000320
 8002780:	20000318 	.word	0x20000318
 8002784:	3e99999a 	.word	0x3e99999a
		}

		// If not moving, apply regular basic limits
		else {
			if (fabs(left_PWM_value) < PWMMin){
 8002788:	4b56      	ldr	r3, [pc, #344]	@ (80028e4 <updatePID+0x37c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002790:	4a55      	ldr	r2, [pc, #340]	@ (80028e8 <updatePID+0x380>)
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f7fe fc69 	bl	800106c <__aeabi_fcmplt>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d012      	beq.n	80027c6 <updatePID+0x25e>
				left_PWM_value = sign(left_PWM_value) * PWMMin;
 80027a0:	4b50      	ldr	r3, [pc, #320]	@ (80028e4 <updatePID+0x37c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fba1 	bl	8002eec <sign>
 80027aa:	4603      	mov	r3, r0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7fe fa6b 	bl	8000c88 <__aeabi_i2f>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4a4c      	ldr	r2, [pc, #304]	@ (80028e8 <updatePID+0x380>)
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe fab9 	bl	8000d30 <__aeabi_fmul>
 80027be:	4603      	mov	r3, r0
 80027c0:	461a      	mov	r2, r3
 80027c2:	4b48      	ldr	r3, [pc, #288]	@ (80028e4 <updatePID+0x37c>)
 80027c4:	601a      	str	r2, [r3, #0]
			}

			if (fabs(right_PWM_value) < PWMMin){
 80027c6:	4b49      	ldr	r3, [pc, #292]	@ (80028ec <updatePID+0x384>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027ce:	4a46      	ldr	r2, [pc, #280]	@ (80028e8 <updatePID+0x380>)
 80027d0:	4611      	mov	r1, r2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe fc4a 	bl	800106c <__aeabi_fcmplt>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d012      	beq.n	8002804 <updatePID+0x29c>
				right_PWM_value = sign(right_PWM_value) * PWMMin;
 80027de:	4b43      	ldr	r3, [pc, #268]	@ (80028ec <updatePID+0x384>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 fb82 	bl	8002eec <sign>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fa4c 	bl	8000c88 <__aeabi_i2f>
 80027f0:	4603      	mov	r3, r0
 80027f2:	4a3d      	ldr	r2, [pc, #244]	@ (80028e8 <updatePID+0x380>)
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fe fa9a 	bl	8000d30 <__aeabi_fmul>
 80027fc:	4603      	mov	r3, r0
 80027fe:	461a      	mov	r2, r3
 8002800:	4b3a      	ldr	r3, [pc, #232]	@ (80028ec <updatePID+0x384>)
 8002802:	601a      	str	r2, [r3, #0]
		}
	}

//////////////////	SET PWM VALUES AND CHECK FOR GOAL REACHED ////////////////////////

	setMotorLPWM(left_PWM_value);
 8002804:	4b37      	ldr	r3, [pc, #220]	@ (80028e4 <updatePID+0x37c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff fc19 	bl	8002040 <setMotorLPWM>
	setMotorRPWM(right_PWM_value);
 800280e:	4b37      	ldr	r3, [pc, #220]	@ (80028ec <updatePID+0x384>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7ff fc50 	bl	80020b8 <setMotorRPWM>

	if(angle_error < 1 && angle_error > -1 && distance_error < 2 && distance_error > -2)
 8002818:	4b35      	ldr	r3, [pc, #212]	@ (80028f0 <updatePID+0x388>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fc23 	bl	800106c <__aeabi_fcmplt>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d022      	beq.n	8002872 <updatePID+0x30a>
 800282c:	4b30      	ldr	r3, [pc, #192]	@ (80028f0 <updatePID+0x388>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4930      	ldr	r1, [pc, #192]	@ (80028f4 <updatePID+0x38c>)
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fc38 	bl	80010a8 <__aeabi_fcmpgt>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d019      	beq.n	8002872 <updatePID+0x30a>
 800283e:	4b2e      	ldr	r3, [pc, #184]	@ (80028f8 <updatePID+0x390>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002846:	4618      	mov	r0, r3
 8002848:	f7fe fc10 	bl	800106c <__aeabi_fcmplt>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00f      	beq.n	8002872 <updatePID+0x30a>
 8002852:	4b29      	ldr	r3, [pc, #164]	@ (80028f8 <updatePID+0x390>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe fc24 	bl	80010a8 <__aeabi_fcmpgt>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <updatePID+0x30a>
		goal_reached_timer++;					// Increments goal reached timer when errors are within a certain threshold
 8002866:	4b25      	ldr	r3, [pc, #148]	@ (80028fc <updatePID+0x394>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	4a23      	ldr	r2, [pc, #140]	@ (80028fc <updatePID+0x394>)
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e002      	b.n	8002878 <updatePID+0x310>

	else
		goal_reached_timer = 0;
 8002872:	4b22      	ldr	r3, [pc, #136]	@ (80028fc <updatePID+0x394>)
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]

///////////////////// UPDATE PREVIOUS ANGLE AND DISTANCE ERRORS //////////////////////////

	old_distance_correction = distance_correction;
 8002878:	4b21      	ldr	r3, [pc, #132]	@ (8002900 <updatePID+0x398>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a21      	ldr	r2, [pc, #132]	@ (8002904 <updatePID+0x39c>)
 800287e:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 8002880:	2309      	movs	r3, #9
 8002882:	607b      	str	r3, [r7, #4]
 8002884:	e00b      	b.n	800289e <updatePID+0x336>
		old_angle_errors[i] = old_angle_errors[i-1];	// Adds the newest angle_error to array and shifts everything to the right
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	3b01      	subs	r3, #1
 800288a:	4a1f      	ldr	r2, [pc, #124]	@ (8002908 <updatePID+0x3a0>)
 800288c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002890:	491d      	ldr	r1, [pc, #116]	@ (8002908 <updatePID+0x3a0>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3b01      	subs	r3, #1
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	dcf0      	bgt.n	8002886 <updatePID+0x31e>
	old_angle_errors[0] = angle_error;
 80028a4:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <updatePID+0x388>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a17      	ldr	r2, [pc, #92]	@ (8002908 <updatePID+0x3a0>)
 80028aa:	6013      	str	r3, [r2, #0]

	for(int i = 9; i > 0; i--)
 80028ac:	2309      	movs	r3, #9
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	e00b      	b.n	80028ca <updatePID+0x362>
		old_distance_errors[i] = old_distance_errors[i-1];	// Adds the newest distance_error to array and shifts everything right
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	4a15      	ldr	r2, [pc, #84]	@ (800290c <updatePID+0x3a4>)
 80028b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80028bc:	4913      	ldr	r1, [pc, #76]	@ (800290c <updatePID+0x3a4>)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 9; i > 0; i--)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	dcf0      	bgt.n	80028b2 <updatePID+0x34a>
	old_distance_errors[0] = distance_error;
 80028d0:	4b09      	ldr	r3, [pc, #36]	@ (80028f8 <updatePID+0x390>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	@ (800290c <updatePID+0x3a4>)
 80028d6:	6013      	str	r3, [r2, #0]

}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028e2:	bf00      	nop
 80028e4:	2000031c 	.word	0x2000031c
 80028e8:	3e99999a 	.word	0x3e99999a
 80028ec:	20000320 	.word	0x20000320
 80028f0:	200002ac 	.word	0x200002ac
 80028f4:	bf800000 	.word	0xbf800000
 80028f8:	200002e0 	.word	0x200002e0
 80028fc:	20000324 	.word	0x20000324
 8002900:	20000310 	.word	0x20000310
 8002904:	20000314 	.word	0x20000314
 8002908:	200002b4 	.word	0x200002b4
 800290c:	200002e8 	.word	0x200002e8

08002910 <PIDdone>:

int8_t PIDdone(){ // There is no bool type in C. True/False values are represented as 1 or 0.
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0

	if (goal_reached_timer >= 50)
 8002914:	4b05      	ldr	r3, [pc, #20]	@ (800292c <PIDdone+0x1c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b31      	cmp	r3, #49	@ 0x31
 800291a:	dd03      	ble.n	8002924 <PIDdone+0x14>
	{
		resetPID();
 800291c:	f000 f808 	bl	8002930 <resetPID>
		return 1;
 8002920:	2301      	movs	r3, #1
 8002922:	e000      	b.n	8002926 <PIDdone+0x16>
	}
	else
		return 0;
 8002924:	2300      	movs	r3, #0

}
 8002926:	4618      	mov	r0, r3
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000324 	.word	0x20000324

08002930 <resetPID>:

void resetPID() {
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0

//////////////	RESET ALL ANGLE AND DISTANCE ERRORS TO 0	////////////////
	angle_error = 0;
 8002936:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <resetPID+0x98>)
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
	old_angle_error = 0;
 800293e:	4b23      	ldr	r3, [pc, #140]	@ (80029cc <resetPID+0x9c>)
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	601a      	str	r2, [r3, #0]
	angle_correction = 0;
 8002946:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <resetPID+0xa0>)
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	e008      	b.n	8002966 <resetPID+0x36>
		old_angle_errors[i] = 0;
 8002954:	4a1f      	ldr	r2, [pc, #124]	@ (80029d4 <resetPID+0xa4>)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f04f 0100 	mov.w	r1, #0
 800295c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3301      	adds	r3, #1
 8002964:	607b      	str	r3, [r7, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b09      	cmp	r3, #9
 800296a:	ddf3      	ble.n	8002954 <resetPID+0x24>

	distance_error = 0;
 800296c:	4b1a      	ldr	r3, [pc, #104]	@ (80029d8 <resetPID+0xa8>)
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
	old_distance_error = 0;
 8002974:	4b19      	ldr	r3, [pc, #100]	@ (80029dc <resetPID+0xac>)
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	601a      	str	r2, [r3, #0]
	distance_correction = 0;
 800297c:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <resetPID+0xb0>)
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

	for (int i = 0; i < 10; i++)
 8002984:	2300      	movs	r3, #0
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	e008      	b.n	800299c <resetPID+0x6c>
		old_distance_errors[i] = 0;
 800298a:	4a16      	ldr	r2, [pc, #88]	@ (80029e4 <resetPID+0xb4>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	f04f 0100 	mov.w	r1, #0
 8002992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 10; i++)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	3301      	adds	r3, #1
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2b09      	cmp	r3, #9
 80029a0:	ddf3      	ble.n	800298a <resetPID+0x5a>

////////////// 	RESET ALL GOALS AND ENCODER COUNTS TO 0 	///////////////////
//	goal_angle = 0;
//	gyro_angle = 0;
	goal_distance = 0;
 80029a2:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <resetPID+0xb8>)
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	601a      	str	r2, [r3, #0]
	goal_reached_timer = 0;
 80029aa:	4b10      	ldr	r3, [pc, #64]	@ (80029ec <resetPID+0xbc>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

	resetEncoders();
 80029b0:	f7fe fd74 	bl	800149c <resetEncoders>
	resetMotors();
 80029b4:	f7ff fbbc 	bl	8002130 <resetMotors>
	setState(REST);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff fbf5 	bl	80021a8 <setState>
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200002ac 	.word	0x200002ac
 80029cc:	200002b0 	.word	0x200002b0
 80029d0:	200002dc 	.word	0x200002dc
 80029d4:	200002b4 	.word	0x200002b4
 80029d8:	200002e0 	.word	0x200002e0
 80029dc:	200002e4 	.word	0x200002e4
 80029e0:	20000310 	.word	0x20000310
 80029e4:	200002e8 	.word	0x200002e8
 80029e8:	200002a4 	.word	0x200002a4
 80029ec:	20000324 	.word	0x20000324

080029f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	607b      	str	r3, [r7, #4]
 80029fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002a38 <HAL_MspInit+0x48>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002a38 <HAL_MspInit+0x48>)
 8002a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a06:	4b0c      	ldr	r3, [pc, #48]	@ (8002a38 <HAL_MspInit+0x48>)
 8002a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a0e:	607b      	str	r3, [r7, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	4b08      	ldr	r3, [pc, #32]	@ (8002a38 <HAL_MspInit+0x48>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	4a07      	ldr	r2, [pc, #28]	@ (8002a38 <HAL_MspInit+0x48>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a22:	4b05      	ldr	r3, [pc, #20]	@ (8002a38 <HAL_MspInit+0x48>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	603b      	str	r3, [r7, #0]
 8002a2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	40023800 	.word	0x40023800

08002a3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b08a      	sub	sp, #40	@ 0x28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a44:	f107 0314 	add.w	r3, r7, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a3c      	ldr	r2, [pc, #240]	@ (8002b4c <HAL_ADC_MspInit+0x110>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d171      	bne.n	8002b42 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002a5e:	2300      	movs	r3, #0
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	4b3b      	ldr	r3, [pc, #236]	@ (8002b50 <HAL_ADC_MspInit+0x114>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	4a3a      	ldr	r2, [pc, #232]	@ (8002b50 <HAL_ADC_MspInit+0x114>)
 8002a68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a6e:	4b38      	ldr	r3, [pc, #224]	@ (8002b50 <HAL_ADC_MspInit+0x114>)
 8002a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a76:	613b      	str	r3, [r7, #16]
 8002a78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b34      	ldr	r3, [pc, #208]	@ (8002b50 <HAL_ADC_MspInit+0x114>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a82:	4a33      	ldr	r2, [pc, #204]	@ (8002b50 <HAL_ADC_MspInit+0x114>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8a:	4b31      	ldr	r3, [pc, #196]	@ (8002b50 <HAL_ADC_MspInit+0x114>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8e:	f003 0304 	and.w	r3, r3, #4
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002b50 <HAL_ADC_MspInit+0x114>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	4a2c      	ldr	r2, [pc, #176]	@ (8002b50 <HAL_ADC_MspInit+0x114>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002b50 <HAL_ADC_MspInit+0x114>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = ForwardRightReceiver_Pin|RightReceiver_Pin;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4823      	ldr	r0, [pc, #140]	@ (8002b54 <HAL_ADC_MspInit+0x118>)
 8002ac6:	f001 f925 	bl	8003d14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LeftReceiver_Pin|ForwardLeftReceiver_Pin;
 8002aca:	2360      	movs	r3, #96	@ 0x60
 8002acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad6:	f107 0314 	add.w	r3, r7, #20
 8002ada:	4619      	mov	r1, r3
 8002adc:	481e      	ldr	r0, [pc, #120]	@ (8002b58 <HAL_ADC_MspInit+0x11c>)
 8002ade:	f001 f919 	bl	8003d14 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002ae4:	4a1e      	ldr	r2, [pc, #120]	@ (8002b60 <HAL_ADC_MspInit+0x124>)
 8002ae6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002aee:	4b1b      	ldr	r3, [pc, #108]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af4:	4b19      	ldr	r3, [pc, #100]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002afa:	4b18      	ldr	r3, [pc, #96]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002afc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b00:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b02:	4b16      	ldr	r3, [pc, #88]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002b04:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b08:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b0a:	4b14      	ldr	r3, [pc, #80]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002b0c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b10:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b12:	4b12      	ldr	r3, [pc, #72]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002b14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b18:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b1a:	4b10      	ldr	r3, [pc, #64]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b20:	4b0e      	ldr	r3, [pc, #56]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b26:	480d      	ldr	r0, [pc, #52]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002b28:	f000 fe0e 	bl	8003748 <HAL_DMA_Init>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002b32:	f7ff fa4f 	bl	8001fd4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002b3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b3c:	4a07      	ldr	r2, [pc, #28]	@ (8002b5c <HAL_ADC_MspInit+0x120>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b42:	bf00      	nop
 8002b44:	3728      	adds	r7, #40	@ 0x28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40012000 	.word	0x40012000
 8002b50:	40023800 	.word	0x40023800
 8002b54:	40020800 	.word	0x40020800
 8002b58:	40020000 	.word	0x40020000
 8002b5c:	20000078 	.word	0x20000078
 8002b60:	40026410 	.word	0x40026410

08002b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08a      	sub	sp, #40	@ 0x28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a19      	ldr	r2, [pc, #100]	@ (8002be8 <HAL_I2C_MspInit+0x84>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d12b      	bne.n	8002bde <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	4b18      	ldr	r3, [pc, #96]	@ (8002bec <HAL_I2C_MspInit+0x88>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	4a17      	ldr	r2, [pc, #92]	@ (8002bec <HAL_I2C_MspInit+0x88>)
 8002b90:	f043 0302 	orr.w	r3, r3, #2
 8002b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b96:	4b15      	ldr	r3, [pc, #84]	@ (8002bec <HAL_I2C_MspInit+0x88>)
 8002b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	613b      	str	r3, [r7, #16]
 8002ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ba2:	23c0      	movs	r3, #192	@ 0xc0
 8002ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ba6:	2312      	movs	r3, #18
 8002ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002bb2:	2304      	movs	r3, #4
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb6:	f107 0314 	add.w	r3, r7, #20
 8002bba:	4619      	mov	r1, r3
 8002bbc:	480c      	ldr	r0, [pc, #48]	@ (8002bf0 <HAL_I2C_MspInit+0x8c>)
 8002bbe:	f001 f8a9 	bl	8003d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4b09      	ldr	r3, [pc, #36]	@ (8002bec <HAL_I2C_MspInit+0x88>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bca:	4a08      	ldr	r2, [pc, #32]	@ (8002bec <HAL_I2C_MspInit+0x88>)
 8002bcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002bd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd2:	4b06      	ldr	r3, [pc, #24]	@ (8002bec <HAL_I2C_MspInit+0x88>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bde:	bf00      	nop
 8002be0:	3728      	adds	r7, #40	@ 0x28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	bf00      	nop
 8002be8:	40005400 	.word	0x40005400
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40020400 	.word	0x40020400

08002bf4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a0e      	ldr	r2, [pc, #56]	@ (8002c3c <HAL_TIM_PWM_MspInit+0x48>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d115      	bne.n	8002c32 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c40 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002c40 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2019      	movs	r0, #25
 8002c28:	f000 fd57 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c2c:	2019      	movs	r0, #25
 8002c2e:	f000 fd70 	bl	8003712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c32:	bf00      	nop
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	40010000 	.word	0x40010000
 8002c40:	40023800 	.word	0x40023800

08002c44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08c      	sub	sp, #48	@ 0x30
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	609a      	str	r2, [r3, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a32      	ldr	r2, [pc, #200]	@ (8002d2c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d12c      	bne.n	8002cc0 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	61bb      	str	r3, [r7, #24]
 8002c6a:	4b31      	ldr	r3, [pc, #196]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	4a30      	ldr	r2, [pc, #192]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c76:	4b2e      	ldr	r3, [pc, #184]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	61bb      	str	r3, [r7, #24]
 8002c80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c8a:	4a29      	ldr	r2, [pc, #164]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002c8c:	f043 0302 	orr.w	r3, r3, #2
 8002c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c92:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	697b      	ldr	r3, [r7, #20]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = RightEncoderCh1_Pin|RightEncoderCh2_Pin;
 8002c9e:	2330      	movs	r3, #48	@ 0x30
 8002ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cb2:	f107 031c 	add.w	r3, r7, #28
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	481e      	ldr	r0, [pc, #120]	@ (8002d34 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002cba:	f001 f82b 	bl	8003d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002cbe:	e030      	b.n	8002d22 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM8)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1c      	ldr	r2, [pc, #112]	@ (8002d38 <HAL_TIM_Encoder_MspInit+0xf4>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d12b      	bne.n	8002d22 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	4b18      	ldr	r3, [pc, #96]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd2:	4a17      	ldr	r2, [pc, #92]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002cd4:	f043 0302 	orr.w	r3, r3, #2
 8002cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	613b      	str	r3, [r7, #16]
 8002ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	4a10      	ldr	r2, [pc, #64]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002cf0:	f043 0304 	orr.w	r3, r3, #4
 8002cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8002d30 <HAL_TIM_Encoder_MspInit+0xec>)
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfa:	f003 0304 	and.w	r3, r3, #4
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LeftEncoderCh1_Pin|LeftEncoderCh2_Pin;
 8002d02:	23c0      	movs	r3, #192	@ 0xc0
 8002d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d06:	2302      	movs	r3, #2
 8002d08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d12:	2303      	movs	r3, #3
 8002d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d16:	f107 031c 	add.w	r3, r7, #28
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4807      	ldr	r0, [pc, #28]	@ (8002d3c <HAL_TIM_Encoder_MspInit+0xf8>)
 8002d1e:	f000 fff9 	bl	8003d14 <HAL_GPIO_Init>
}
 8002d22:	bf00      	nop
 8002d24:	3730      	adds	r7, #48	@ 0x30
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40000400 	.word	0x40000400
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020400 	.word	0x40020400
 8002d38:	40010400 	.word	0x40010400
 8002d3c:	40020800 	.word	0x40020800

08002d40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8002dc0 <HAL_TIM_Base_MspInit+0x80>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d116      	bne.n	8002d80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d5c:	f043 0320 	orr.w	r3, r3, #32
 8002d60:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d62:	4b18      	ldr	r3, [pc, #96]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	2037      	movs	r0, #55	@ 0x37
 8002d74:	f000 fcb1 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d78:	2037      	movs	r0, #55	@ 0x37
 8002d7a:	f000 fcca 	bl	8003712 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002d7e:	e01a      	b.n	8002db6 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM10)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a10      	ldr	r2, [pc, #64]	@ (8002dc8 <HAL_TIM_Base_MspInit+0x88>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d115      	bne.n	8002db6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d92:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_TIM_Base_MspInit+0x84>)
 8002d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da2:	60bb      	str	r3, [r7, #8]
 8002da4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	2019      	movs	r0, #25
 8002dac:	f000 fc95 	bl	80036da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002db0:	2019      	movs	r0, #25
 8002db2:	f000 fcae 	bl	8003712 <HAL_NVIC_EnableIRQ>
}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40001400 	.word	0x40001400
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40014400 	.word	0x40014400

08002dcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd4:	f107 030c 	add.w	r3, r7, #12
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	609a      	str	r2, [r3, #8]
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a12      	ldr	r2, [pc, #72]	@ (8002e34 <HAL_TIM_MspPostInit+0x68>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d11e      	bne.n	8002e2c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <HAL_TIM_MspPostInit+0x6c>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	4a10      	ldr	r2, [pc, #64]	@ (8002e38 <HAL_TIM_MspPostInit+0x6c>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	@ (8002e38 <HAL_TIM_MspPostInit+0x6c>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
 8002e08:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LeftMotorCh1_Pin|LeftMotorCh2_Pin|RightMotorCh1_Pin|RightMotorCh2_Pin;
 8002e0a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002e0e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e10:	2302      	movs	r3, #2
 8002e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e20:	f107 030c 	add.w	r3, r7, #12
 8002e24:	4619      	mov	r1, r3
 8002e26:	4805      	ldr	r0, [pc, #20]	@ (8002e3c <HAL_TIM_MspPostInit+0x70>)
 8002e28:	f000 ff74 	bl	8003d14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002e2c:	bf00      	nop
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40023800 	.word	0x40023800
 8002e3c:	40020000 	.word	0x40020000

08002e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <NMI_Handler+0x4>

08002e48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <HardFault_Handler+0x4>

08002e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <MemManage_Handler+0x4>

08002e58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <BusFault_Handler+0x4>

08002e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e64:	bf00      	nop
 8002e66:	e7fd      	b.n	8002e64 <UsageFault_Handler+0x4>

08002e68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e78:	bf00      	nop
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bc80      	pop	{r7}
 8002e8a:	4770      	bx	lr

08002e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e90:	f000 f8c6 	bl	8003020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e94:	bf00      	nop
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e9c:	4803      	ldr	r0, [pc, #12]	@ (8002eac <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002e9e:	f003 f9fb 	bl	8006298 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002ea2:	4803      	ldr	r0, [pc, #12]	@ (8002eb0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002ea4:	f003 f9f8 	bl	8006298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002ea8:	bf00      	nop
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	2000012c 	.word	0x2000012c
 8002eb0:	2000024c 	.word	0x2000024c

08002eb4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002eb8:	4803      	ldr	r0, [pc, #12]	@ (8002ec8 <TIM7_IRQHandler+0x14>)
 8002eba:	f003 f9ed 	bl	8006298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
  interruptRoutine();
 8002ebe:	f7fe fc6b 	bl	8001798 <interruptRoutine>
  /* USER CODE END TIM7_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200001bc 	.word	0x200001bc

08002ecc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 Stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ed0:	4802      	ldr	r0, [pc, #8]	@ (8002edc <DMA2_Stream0_IRQHandler+0x10>)
 8002ed2:	f000 fce7 	bl	80038a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000078 	.word	0x20000078

08002ee0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <sign>:
//		front_wall = 0;
//	}
//	return front_wall;
//}

int16_t sign(float x) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	if (x > 0)
 8002ef4:	f04f 0100 	mov.w	r1, #0
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7fe f8d5 	bl	80010a8 <__aeabi_fcmpgt>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <sign+0x1c>
	{
		return 1;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e00b      	b.n	8002f20 <sign+0x34>
	}
	else if (x < 0)
 8002f08:	f04f 0100 	mov.w	r1, #0
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7fe f8ad 	bl	800106c <__aeabi_fcmplt>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <sign+0x32>
	{
		return -1;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
 8002f1c:	e000      	b.n	8002f20 <sign+0x34>
	}
	else
	{
		return 0;
 8002f1e:	2300      	movs	r3, #0
	}
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f60 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8002f2c:	f7ff ffd8 	bl	8002ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f30:	480c      	ldr	r0, [pc, #48]	@ (8002f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f32:	490d      	ldr	r1, [pc, #52]	@ (8002f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f34:	4a0d      	ldr	r2, [pc, #52]	@ (8002f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f38:	e002      	b.n	8002f40 <LoopCopyDataInit>

08002f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f3e:	3304      	adds	r3, #4

08002f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f44:	d3f9      	bcc.n	8002f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f46:	4a0a      	ldr	r2, [pc, #40]	@ (8002f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f48:	4c0a      	ldr	r4, [pc, #40]	@ (8002f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f4c:	e001      	b.n	8002f52 <LoopFillZerobss>

08002f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f50:	3204      	adds	r2, #4

08002f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f54:	d3fb      	bcc.n	8002f4e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f56:	f003 fedf 	bl	8006d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f5a:	f7fe fc45 	bl	80017e8 <main>
  bx  lr    
 8002f5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f68:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002f6c:	08006da8 	.word	0x08006da8
  ldr r2, =_sbss
 8002f70:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002f74:	20000334 	.word	0x20000334

08002f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f78:	e7fe      	b.n	8002f78 <ADC_IRQHandler>
	...

08002f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f80:	4b0e      	ldr	r3, [pc, #56]	@ (8002fbc <HAL_Init+0x40>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <HAL_Init+0x40>)
 8002f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fbc <HAL_Init+0x40>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a0a      	ldr	r2, [pc, #40]	@ (8002fbc <HAL_Init+0x40>)
 8002f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <HAL_Init+0x40>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a07      	ldr	r2, [pc, #28]	@ (8002fbc <HAL_Init+0x40>)
 8002f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fa4:	2003      	movs	r0, #3
 8002fa6:	f000 fb8d 	bl	80036c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002faa:	200f      	movs	r0, #15
 8002fac:	f000 f808 	bl	8002fc0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002fb0:	f7ff fd1e 	bl	80029f0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00

08002fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002fc8:	4b12      	ldr	r3, [pc, #72]	@ (8003014 <HAL_InitTick+0x54>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b12      	ldr	r3, [pc, #72]	@ (8003018 <HAL_InitTick+0x58>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f000 fba5 	bl	800372e <HAL_SYSTICK_Config>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e00e      	b.n	800300c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b0f      	cmp	r3, #15
 8002ff2:	d80a      	bhi.n	800300a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ffc:	f000 fb6d 	bl	80036da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003000:	4a06      	ldr	r2, [pc, #24]	@ (800301c <HAL_InitTick+0x5c>)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
 8003008:	e000      	b.n	800300c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
}
 800300c:	4618      	mov	r0, r3
 800300e:	3708      	adds	r7, #8
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	20000000 	.word	0x20000000
 8003018:	20000008 	.word	0x20000008
 800301c:	20000004 	.word	0x20000004

08003020 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003024:	4b05      	ldr	r3, [pc, #20]	@ (800303c <HAL_IncTick+0x1c>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	461a      	mov	r2, r3
 800302a:	4b05      	ldr	r3, [pc, #20]	@ (8003040 <HAL_IncTick+0x20>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4413      	add	r3, r2
 8003030:	4a03      	ldr	r2, [pc, #12]	@ (8003040 <HAL_IncTick+0x20>)
 8003032:	6013      	str	r3, [r2, #0]
}
 8003034:	bf00      	nop
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	20000008 	.word	0x20000008
 8003040:	20000330 	.word	0x20000330

08003044 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  return uwTick;
 8003048:	4b02      	ldr	r3, [pc, #8]	@ (8003054 <HAL_GetTick+0x10>)
 800304a:	681b      	ldr	r3, [r3, #0]
}
 800304c:	4618      	mov	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	bc80      	pop	{r7}
 8003052:	4770      	bx	lr
 8003054:	20000330 	.word	0x20000330

08003058 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e033      	b.n	80030d6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fce0 	bl	8002a3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	2b00      	cmp	r3, #0
 8003094:	d118      	bne.n	80030c8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800309e:	f023 0302 	bic.w	r3, r3, #2
 80030a2:	f043 0202 	orr.w	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f938 	bl	8003320 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2200      	movs	r2, #0
 80030b4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ba:	f023 0303 	bic.w	r3, r3, #3
 80030be:	f043 0201 	orr.w	r2, r3, #1
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80030c6:	e001      	b.n	80030cc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x1c>
 80030f8:	2302      	movs	r3, #2
 80030fa:	e103      	b.n	8003304 <HAL_ADC_ConfigChannel+0x224>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b09      	cmp	r3, #9
 800310a:	d925      	bls.n	8003158 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68d9      	ldr	r1, [r3, #12]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	b29b      	uxth	r3, r3
 8003118:	461a      	mov	r2, r3
 800311a:	4613      	mov	r3, r2
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	4413      	add	r3, r2
 8003120:	3b1e      	subs	r3, #30
 8003122:	2207      	movs	r2, #7
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	43da      	mvns	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	400a      	ands	r2, r1
 8003130:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	68d9      	ldr	r1, [r3, #12]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	b29b      	uxth	r3, r3
 8003142:	4618      	mov	r0, r3
 8003144:	4603      	mov	r3, r0
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4403      	add	r3, r0
 800314a:	3b1e      	subs	r3, #30
 800314c:	409a      	lsls	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	e022      	b.n	800319e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6919      	ldr	r1, [r3, #16]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	2207      	movs	r2, #7
 800316e:	fa02 f303 	lsl.w	r3, r2, r3
 8003172:	43da      	mvns	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	400a      	ands	r2, r1
 800317a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6919      	ldr	r1, [r3, #16]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	689a      	ldr	r2, [r3, #8]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	4618      	mov	r0, r3
 800318e:	4603      	mov	r3, r0
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4403      	add	r3, r0
 8003194:	409a      	lsls	r2, r3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b06      	cmp	r3, #6
 80031a4:	d824      	bhi.n	80031f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	3b05      	subs	r3, #5
 80031b8:	221f      	movs	r2, #31
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	400a      	ands	r2, r1
 80031c6:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	4618      	mov	r0, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	3b05      	subs	r3, #5
 80031e2:	fa00 f203 	lsl.w	r2, r0, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80031ee:	e04c      	b.n	800328a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	2b0c      	cmp	r3, #12
 80031f6:	d824      	bhi.n	8003242 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	3b23      	subs	r3, #35	@ 0x23
 800320a:	221f      	movs	r2, #31
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43da      	mvns	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	400a      	ands	r2, r1
 8003218:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	4618      	mov	r0, r3
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	3b23      	subs	r3, #35	@ 0x23
 8003234:	fa00 f203 	lsl.w	r2, r0, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003240:	e023      	b.n	800328a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	3b41      	subs	r3, #65	@ 0x41
 8003254:	221f      	movs	r2, #31
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43da      	mvns	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	400a      	ands	r2, r1
 8003262:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	b29b      	uxth	r3, r3
 8003270:	4618      	mov	r0, r3
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	3b41      	subs	r3, #65	@ 0x41
 800327e:	fa00 f203 	lsl.w	r2, r0, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a20      	ldr	r2, [pc, #128]	@ (8003310 <HAL_ADC_ConfigChannel+0x230>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d109      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x1c8>
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b12      	cmp	r3, #18
 800329a:	d105      	bne.n	80032a8 <HAL_ADC_ConfigChannel+0x1c8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800329c:	4b1d      	ldr	r3, [pc, #116]	@ (8003314 <HAL_ADC_ConfigChannel+0x234>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	4a1c      	ldr	r2, [pc, #112]	@ (8003314 <HAL_ADC_ConfigChannel+0x234>)
 80032a2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80032a6:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a18      	ldr	r2, [pc, #96]	@ (8003310 <HAL_ADC_ConfigChannel+0x230>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d123      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x21a>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d003      	beq.n	80032c2 <HAL_ADC_ConfigChannel+0x1e2>
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b11      	cmp	r3, #17
 80032c0:	d11b      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x21a>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80032c2:	4b14      	ldr	r3, [pc, #80]	@ (8003314 <HAL_ADC_ConfigChannel+0x234>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4a13      	ldr	r2, [pc, #76]	@ (8003314 <HAL_ADC_ConfigChannel+0x234>)
 80032c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032cc:	6053      	str	r3, [r2, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b10      	cmp	r3, #16
 80032d4:	d111      	bne.n	80032fa <HAL_ADC_ConfigChannel+0x21a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032d6:	4b10      	ldr	r3, [pc, #64]	@ (8003318 <HAL_ADC_ConfigChannel+0x238>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a10      	ldr	r2, [pc, #64]	@ (800331c <HAL_ADC_ConfigChannel+0x23c>)
 80032dc:	fba2 2303 	umull	r2, r3, r2, r3
 80032e0:	0c9a      	lsrs	r2, r3, #18
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80032ec:	e002      	b.n	80032f4 <HAL_ADC_ConfigChannel+0x214>
      {
        counter--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	3b01      	subs	r3, #1
 80032f2:	60fb      	str	r3, [r7, #12]
      while(counter != 0U)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f9      	bne.n	80032ee <HAL_ADC_ConfigChannel+0x20e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3714      	adds	r7, #20
 8003308:	46bd      	mov	sp, r7
 800330a:	bc80      	pop	{r7}
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	40012000 	.word	0x40012000
 8003314:	40012300 	.word	0x40012300
 8003318:	20000000 	.word	0x20000000
 800331c:	431bde83 	.word	0x431bde83

08003320 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003328:	4b7e      	ldr	r3, [pc, #504]	@ (8003524 <ADC_Init+0x204>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	4a7d      	ldr	r2, [pc, #500]	@ (8003524 <ADC_Init+0x204>)
 800332e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003332:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003334:	4b7b      	ldr	r3, [pc, #492]	@ (8003524 <ADC_Init+0x204>)
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4979      	ldr	r1, [pc, #484]	@ (8003524 <ADC_Init+0x204>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	021a      	lsls	r2, r3, #8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	6899      	ldr	r1, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003528 <ADC_Init+0x208>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d022      	beq.n	80033fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6899      	ldr	r1, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
 80033f8:	e00f      	b.n	800341a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003418:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689a      	ldr	r2, [r3, #8]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0202 	bic.w	r2, r2, #2
 8003428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6899      	ldr	r1, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	7e1b      	ldrb	r3, [r3, #24]
 8003434:	005a      	lsls	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d027      	beq.n	8003498 <ADC_Init+0x178>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003456:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003466:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346c:	3b01      	subs	r3, #1
 800346e:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8003472:	60fa      	str	r2, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	68fa      	ldr	r2, [r7, #12]
 8003476:	fa92 f2a2 	rbit	r2, r2
 800347a:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	fab2 f282 	clz	r2, r2
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	fa03 f102 	lsl.w	r1, r3, r2
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	e007      	b.n	80034a8 <ADC_Init+0x188>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80034b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	051a      	lsls	r2, r3, #20
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80034dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6899      	ldr	r1, [r3, #8]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034ea:	025a      	lsls	r2, r3, #9
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6899      	ldr	r1, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	029a      	lsls	r2, r3, #10
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	609a      	str	r2, [r3, #8]
}
 8003518:	bf00      	nop
 800351a:	3714      	adds	r7, #20
 800351c:	46bd      	mov	sp, r7
 800351e:	bc80      	pop	{r7}
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40012300 	.word	0x40012300
 8003528:	0f000001 	.word	0x0f000001

0800352c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800353c:	4b0c      	ldr	r3, [pc, #48]	@ (8003570 <__NVIC_SetPriorityGrouping+0x44>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003548:	4013      	ands	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003554:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003558:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800355c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355e:	4a04      	ldr	r2, [pc, #16]	@ (8003570 <__NVIC_SetPriorityGrouping+0x44>)
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	60d3      	str	r3, [r2, #12]
}
 8003564:	bf00      	nop
 8003566:	3714      	adds	r7, #20
 8003568:	46bd      	mov	sp, r7
 800356a:	bc80      	pop	{r7}
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	e000ed00 	.word	0xe000ed00

08003574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003578:	4b04      	ldr	r3, [pc, #16]	@ (800358c <__NVIC_GetPriorityGrouping+0x18>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	0a1b      	lsrs	r3, r3, #8
 800357e:	f003 0307 	and.w	r3, r3, #7
}
 8003582:	4618      	mov	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	bc80      	pop	{r7}
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000ed00 	.word	0xe000ed00

08003590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	db0b      	blt.n	80035ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a2:	79fb      	ldrb	r3, [r7, #7]
 80035a4:	f003 021f 	and.w	r2, r3, #31
 80035a8:	4906      	ldr	r1, [pc, #24]	@ (80035c4 <__NVIC_EnableIRQ+0x34>)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	2001      	movs	r0, #1
 80035b2:	fa00 f202 	lsl.w	r2, r0, r2
 80035b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	@ (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	@ (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr
 8003612:	bf00      	nop
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	@ 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	@ 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	3b01      	subs	r3, #1
 800368c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003690:	d301      	bcc.n	8003696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003692:	2301      	movs	r3, #1
 8003694:	e00f      	b.n	80036b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003696:	4a0a      	ldr	r2, [pc, #40]	@ (80036c0 <SysTick_Config+0x40>)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3b01      	subs	r3, #1
 800369c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800369e:	210f      	movs	r1, #15
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	f7ff ff90 	bl	80035c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036a8:	4b05      	ldr	r3, [pc, #20]	@ (80036c0 <SysTick_Config+0x40>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ae:	4b04      	ldr	r3, [pc, #16]	@ (80036c0 <SysTick_Config+0x40>)
 80036b0:	2207      	movs	r2, #7
 80036b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	e000e010 	.word	0xe000e010

080036c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff2d 	bl	800352c <__NVIC_SetPriorityGrouping>
}
 80036d2:	bf00      	nop
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4603      	mov	r3, r0
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ec:	f7ff ff42 	bl	8003574 <__NVIC_GetPriorityGrouping>
 80036f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	68b9      	ldr	r1, [r7, #8]
 80036f6:	6978      	ldr	r0, [r7, #20]
 80036f8:	f7ff ff90 	bl	800361c <NVIC_EncodePriority>
 80036fc:	4602      	mov	r2, r0
 80036fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff5f 	bl	80035c8 <__NVIC_SetPriority>
}
 800370a:	bf00      	nop
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800371c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff ff35 	bl	8003590 <__NVIC_EnableIRQ>
}
 8003726:	bf00      	nop
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b082      	sub	sp, #8
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7ff ffa2 	bl	8003680 <SysTick_Config>
 800373c:	4603      	mov	r3, r0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
	...

08003748 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003754:	f7ff fc76 	bl	8003044 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e099      	b.n	8003898 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0201 	bic.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003784:	e00f      	b.n	80037a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003786:	f7ff fc5d 	bl	8003044 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b05      	cmp	r3, #5
 8003792:	d908      	bls.n	80037a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2203      	movs	r2, #3
 800379e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e078      	b.n	8003898 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d1e8      	bne.n	8003786 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4b38      	ldr	r3, [pc, #224]	@ (80038a0 <HAL_DMA_Init+0x158>)
 80037c0:	4013      	ands	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d107      	bne.n	8003810 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003808:	4313      	orrs	r3, r2
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0307 	bic.w	r3, r3, #7
 8003826:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003836:	2b04      	cmp	r3, #4
 8003838:	d117      	bne.n	800386a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800383e:	697a      	ldr	r2, [r7, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00e      	beq.n	800386a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f9e7 	bl	8003c20 <DMA_CheckFifoParam>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2240      	movs	r2, #64	@ 0x40
 800385c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003866:	2301      	movs	r3, #1
 8003868:	e016      	b.n	8003898 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f9a0 	bl	8003bb8 <DMA_CalcBaseAndBitshift>
 8003878:	4603      	mov	r3, r0
 800387a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	223f      	movs	r2, #63	@ 0x3f
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	f010803f 	.word	0xf010803f

080038a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80038ac:	2300      	movs	r3, #0
 80038ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80038b0:	4b8e      	ldr	r3, [pc, #568]	@ (8003aec <HAL_DMA_IRQHandler+0x248>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a8e      	ldr	r2, [pc, #568]	@ (8003af0 <HAL_DMA_IRQHandler+0x24c>)
 80038b6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ba:	0a9b      	lsrs	r3, r3, #10
 80038bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ce:	2208      	movs	r2, #8
 80038d0:	409a      	lsls	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	4013      	ands	r3, r2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01a      	beq.n	8003910 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0204 	bic.w	r2, r2, #4
 80038f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038fc:	2208      	movs	r2, #8
 80038fe:	409a      	lsls	r2, r3
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003908:	f043 0201 	orr.w	r2, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003914:	2201      	movs	r2, #1
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d012      	beq.n	8003946 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003932:	2201      	movs	r2, #1
 8003934:	409a      	lsls	r2, r3
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394a:	2204      	movs	r2, #4
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d012      	beq.n	800397c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00b      	beq.n	800397c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003968:	2204      	movs	r2, #4
 800396a:	409a      	lsls	r2, r3
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003974:	f043 0204 	orr.w	r2, r3, #4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003980:	2210      	movs	r2, #16
 8003982:	409a      	lsls	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	4013      	ands	r3, r2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d043      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d03c      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399e:	2210      	movs	r2, #16
 80039a0:	409a      	lsls	r2, r3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d108      	bne.n	80039d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d024      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4798      	blx	r3
 80039d2:	e01f      	b.n	8003a14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d01b      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
 80039e4:	e016      	b.n	8003a14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d107      	bne.n	8003a04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0208 	bic.w	r2, r2, #8
 8003a02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a18:	2220      	movs	r2, #32
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 808f 	beq.w	8003b44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 8087 	beq.w	8003b44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3a:	2220      	movs	r2, #32
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	d136      	bne.n	8003abc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f022 0216 	bic.w	r2, r2, #22
 8003a5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	695a      	ldr	r2, [r3, #20]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d103      	bne.n	8003a7e <HAL_DMA_IRQHandler+0x1da>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d007      	beq.n	8003a8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 0208 	bic.w	r2, r2, #8
 8003a8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a92:	223f      	movs	r2, #63	@ 0x3f
 8003a94:	409a      	lsls	r2, r3
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d07e      	beq.n	8003bb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4798      	blx	r3
        }
        return;
 8003aba:	e079      	b.n	8003bb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01d      	beq.n	8003b06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10d      	bne.n	8003af4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d031      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	4798      	blx	r3
 8003ae8:	e02c      	b.n	8003b44 <HAL_DMA_IRQHandler+0x2a0>
 8003aea:	bf00      	nop
 8003aec:	20000000 	.word	0x20000000
 8003af0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d023      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
 8003b04:	e01e      	b.n	8003b44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10f      	bne.n	8003b34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0210 	bic.w	r2, r2, #16
 8003b22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d032      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d022      	beq.n	8003b9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2205      	movs	r2, #5
 8003b5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0201 	bic.w	r2, r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	3301      	adds	r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d307      	bcc.n	8003b8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f2      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x2cc>
 8003b8a:	e000      	b.n	8003b8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d005      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
 8003bae:	e000      	b.n	8003bb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003bb0:	bf00      	nop
    }
  }
}
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	3b10      	subs	r3, #16
 8003bc8:	4a13      	ldr	r2, [pc, #76]	@ (8003c18 <DMA_CalcBaseAndBitshift+0x60>)
 8003bca:	fba2 2303 	umull	r2, r3, r2, r3
 8003bce:	091b      	lsrs	r3, r3, #4
 8003bd0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bd2:	4a12      	ldr	r2, [pc, #72]	@ (8003c1c <DMA_CalcBaseAndBitshift+0x64>)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d909      	bls.n	8003bfa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bee:	f023 0303 	bic.w	r3, r3, #3
 8003bf2:	1d1a      	adds	r2, r3, #4
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	659a      	str	r2, [r3, #88]	@ 0x58
 8003bf8:	e007      	b.n	8003c0a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	aaaaaaab 	.word	0xaaaaaaab
 8003c1c:	08006d90 	.word	0x08006d90

08003c20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b085      	sub	sp, #20
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d11f      	bne.n	8003c7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d856      	bhi.n	8003cee <DMA_CheckFifoParam+0xce>
 8003c40:	a201      	add	r2, pc, #4	@ (adr r2, 8003c48 <DMA_CheckFifoParam+0x28>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c59 	.word	0x08003c59
 8003c4c:	08003c6b 	.word	0x08003c6b
 8003c50:	08003c59 	.word	0x08003c59
 8003c54:	08003cef 	.word	0x08003cef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d046      	beq.n	8003cf2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c68:	e043      	b.n	8003cf2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c72:	d140      	bne.n	8003cf6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c78:	e03d      	b.n	8003cf6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c82:	d121      	bne.n	8003cc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b03      	cmp	r3, #3
 8003c88:	d837      	bhi.n	8003cfa <DMA_CheckFifoParam+0xda>
 8003c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c90 <DMA_CheckFifoParam+0x70>)
 8003c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c90:	08003ca1 	.word	0x08003ca1
 8003c94:	08003ca7 	.word	0x08003ca7
 8003c98:	08003ca1 	.word	0x08003ca1
 8003c9c:	08003cb9 	.word	0x08003cb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ca4:	e030      	b.n	8003d08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003caa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d025      	beq.n	8003cfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cb6:	e022      	b.n	8003cfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003cc0:	d11f      	bne.n	8003d02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cc6:	e01c      	b.n	8003d02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	2b02      	cmp	r3, #2
 8003ccc:	d903      	bls.n	8003cd6 <DMA_CheckFifoParam+0xb6>
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d003      	beq.n	8003cdc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003cd4:	e018      	b.n	8003d08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	73fb      	strb	r3, [r7, #15]
      break;
 8003cda:	e015      	b.n	8003d08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00e      	beq.n	8003d06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
      break;
 8003cec:	e00b      	b.n	8003d06 <DMA_CheckFifoParam+0xe6>
      break;
 8003cee:	bf00      	nop
 8003cf0:	e00a      	b.n	8003d08 <DMA_CheckFifoParam+0xe8>
      break;
 8003cf2:	bf00      	nop
 8003cf4:	e008      	b.n	8003d08 <DMA_CheckFifoParam+0xe8>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e006      	b.n	8003d08 <DMA_CheckFifoParam+0xe8>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e004      	b.n	8003d08 <DMA_CheckFifoParam+0xe8>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e002      	b.n	8003d08 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d02:	bf00      	nop
 8003d04:	e000      	b.n	8003d08 <DMA_CheckFifoParam+0xe8>
      break;
 8003d06:	bf00      	nop
    }
  } 
  
  return status; 
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d22:	e16f      	b.n	8004004 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	2101      	movs	r1, #1
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d30:	4013      	ands	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8161 	beq.w	8003ffe <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f003 0303 	and.w	r3, r3, #3
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d005      	beq.n	8003d54 <HAL_GPIO_Init+0x40>
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d130      	bne.n	8003db6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	2203      	movs	r2, #3
 8003d60:	fa02 f303 	lsl.w	r3, r2, r3
 8003d64:	43db      	mvns	r3, r3
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	693a      	ldr	r2, [r7, #16]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	693a      	ldr	r2, [r7, #16]
 8003d82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d92:	43db      	mvns	r3, r3
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	4013      	ands	r3, r2
 8003d98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	f003 0201 	and.w	r2, r3, #1
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d017      	beq.n	8003df2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	2203      	movs	r2, #3
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	2b02      	cmp	r3, #2
 8003dfc:	d123      	bne.n	8003e46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	08da      	lsrs	r2, r3, #3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	3208      	adds	r2, #8
 8003e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	f003 0307 	and.w	r3, r3, #7
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	220f      	movs	r2, #15
 8003e16:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1a:	43db      	mvns	r3, r3
 8003e1c:	693a      	ldr	r2, [r7, #16]
 8003e1e:	4013      	ands	r3, r2
 8003e20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	691a      	ldr	r2, [r3, #16]
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f003 0307 	and.w	r3, r3, #7
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	08da      	lsrs	r2, r3, #3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3208      	adds	r2, #8
 8003e40:	6939      	ldr	r1, [r7, #16]
 8003e42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	2203      	movs	r2, #3
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	43db      	mvns	r3, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 0203 	and.w	r2, r3, #3
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	693a      	ldr	r2, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f000 80bb 	beq.w	8003ffe <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
 8003e8c:	4b64      	ldr	r3, [pc, #400]	@ (8004020 <HAL_GPIO_Init+0x30c>)
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e90:	4a63      	ldr	r2, [pc, #396]	@ (8004020 <HAL_GPIO_Init+0x30c>)
 8003e92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e96:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e98:	4b61      	ldr	r3, [pc, #388]	@ (8004020 <HAL_GPIO_Init+0x30c>)
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ea4:	4a5f      	ldr	r2, [pc, #380]	@ (8004024 <HAL_GPIO_Init+0x310>)
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	3302      	adds	r3, #2
 8003eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	f003 0303 	and.w	r3, r3, #3
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	220f      	movs	r2, #15
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	43db      	mvns	r3, r3
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a57      	ldr	r2, [pc, #348]	@ (8004028 <HAL_GPIO_Init+0x314>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d031      	beq.n	8003f34 <HAL_GPIO_Init+0x220>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a56      	ldr	r2, [pc, #344]	@ (800402c <HAL_GPIO_Init+0x318>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d02b      	beq.n	8003f30 <HAL_GPIO_Init+0x21c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a55      	ldr	r2, [pc, #340]	@ (8004030 <HAL_GPIO_Init+0x31c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d025      	beq.n	8003f2c <HAL_GPIO_Init+0x218>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a54      	ldr	r2, [pc, #336]	@ (8004034 <HAL_GPIO_Init+0x320>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d01f      	beq.n	8003f28 <HAL_GPIO_Init+0x214>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a53      	ldr	r2, [pc, #332]	@ (8004038 <HAL_GPIO_Init+0x324>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d019      	beq.n	8003f24 <HAL_GPIO_Init+0x210>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a52      	ldr	r2, [pc, #328]	@ (800403c <HAL_GPIO_Init+0x328>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d013      	beq.n	8003f20 <HAL_GPIO_Init+0x20c>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a51      	ldr	r2, [pc, #324]	@ (8004040 <HAL_GPIO_Init+0x32c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00d      	beq.n	8003f1c <HAL_GPIO_Init+0x208>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a50      	ldr	r2, [pc, #320]	@ (8004044 <HAL_GPIO_Init+0x330>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <HAL_GPIO_Init+0x204>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a4f      	ldr	r2, [pc, #316]	@ (8004048 <HAL_GPIO_Init+0x334>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d101      	bne.n	8003f14 <HAL_GPIO_Init+0x200>
 8003f10:	2308      	movs	r3, #8
 8003f12:	e010      	b.n	8003f36 <HAL_GPIO_Init+0x222>
 8003f14:	2309      	movs	r3, #9
 8003f16:	e00e      	b.n	8003f36 <HAL_GPIO_Init+0x222>
 8003f18:	2307      	movs	r3, #7
 8003f1a:	e00c      	b.n	8003f36 <HAL_GPIO_Init+0x222>
 8003f1c:	2306      	movs	r3, #6
 8003f1e:	e00a      	b.n	8003f36 <HAL_GPIO_Init+0x222>
 8003f20:	2305      	movs	r3, #5
 8003f22:	e008      	b.n	8003f36 <HAL_GPIO_Init+0x222>
 8003f24:	2304      	movs	r3, #4
 8003f26:	e006      	b.n	8003f36 <HAL_GPIO_Init+0x222>
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e004      	b.n	8003f36 <HAL_GPIO_Init+0x222>
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	e002      	b.n	8003f36 <HAL_GPIO_Init+0x222>
 8003f30:	2301      	movs	r3, #1
 8003f32:	e000      	b.n	8003f36 <HAL_GPIO_Init+0x222>
 8003f34:	2300      	movs	r3, #0
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	f002 0203 	and.w	r2, r2, #3
 8003f3c:	0092      	lsls	r2, r2, #2
 8003f3e:	4093      	lsls	r3, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003f48:	4936      	ldr	r1, [pc, #216]	@ (8004024 <HAL_GPIO_Init+0x310>)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	089b      	lsrs	r3, r3, #2
 8003f4e:	3302      	adds	r3, #2
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f56:	4b3d      	ldr	r3, [pc, #244]	@ (800404c <HAL_GPIO_Init+0x338>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	693a      	ldr	r2, [r7, #16]
 8003f62:	4013      	ands	r3, r2
 8003f64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003f72:	693a      	ldr	r2, [r7, #16]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003f7a:	4a34      	ldr	r2, [pc, #208]	@ (800404c <HAL_GPIO_Init+0x338>)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f80:	4b32      	ldr	r3, [pc, #200]	@ (800404c <HAL_GPIO_Init+0x338>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003f9c:	693a      	ldr	r2, [r7, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003fa4:	4a29      	ldr	r2, [pc, #164]	@ (800404c <HAL_GPIO_Init+0x338>)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003faa:	4b28      	ldr	r3, [pc, #160]	@ (800404c <HAL_GPIO_Init+0x338>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4013      	ands	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003fc6:	693a      	ldr	r2, [r7, #16]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003fce:	4a1f      	ldr	r2, [pc, #124]	@ (800404c <HAL_GPIO_Init+0x338>)
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800404c <HAL_GPIO_Init+0x338>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d003      	beq.n	8003ff8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003ff8:	4a14      	ldr	r2, [pc, #80]	@ (800404c <HAL_GPIO_Init+0x338>)
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	3301      	adds	r3, #1
 8004002:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	fa22 f303 	lsr.w	r3, r2, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	f47f ae88 	bne.w	8003d24 <HAL_GPIO_Init+0x10>
  }
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	371c      	adds	r7, #28
 800401a:	46bd      	mov	sp, r7
 800401c:	bc80      	pop	{r7}
 800401e:	4770      	bx	lr
 8004020:	40023800 	.word	0x40023800
 8004024:	40013800 	.word	0x40013800
 8004028:	40020000 	.word	0x40020000
 800402c:	40020400 	.word	0x40020400
 8004030:	40020800 	.word	0x40020800
 8004034:	40020c00 	.word	0x40020c00
 8004038:	40021000 	.word	0x40021000
 800403c:	40021400 	.word	0x40021400
 8004040:	40021800 	.word	0x40021800
 8004044:	40021c00 	.word	0x40021c00
 8004048:	40022000 	.word	0x40022000
 800404c:	40013c00 	.word	0x40013c00

08004050 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	887b      	ldrh	r3, [r7, #2]
 8004062:	4013      	ands	r3, r2
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	e001      	b.n	8004072 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800406e:	2300      	movs	r3, #0
 8004070:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	460b      	mov	r3, r1
 8004088:	807b      	strh	r3, [r7, #2]
 800408a:	4613      	mov	r3, r2
 800408c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800408e:	787b      	ldrb	r3, [r7, #1]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004094:	887a      	ldrh	r2, [r7, #2]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800409a:	e003      	b.n	80040a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	041a      	lsls	r2, r3, #16
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	619a      	str	r2, [r3, #24]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
	...

080040b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e12b      	b.n	800431a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d106      	bne.n	80040dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fe fd44 	bl	8002b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2224      	movs	r2, #36	@ 0x24
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0201 	bic.w	r2, r2, #1
 80040f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004102:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004112:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004114:	f001 fd2e 	bl	8005b74 <HAL_RCC_GetPCLK1Freq>
 8004118:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4a81      	ldr	r2, [pc, #516]	@ (8004324 <HAL_I2C_Init+0x274>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d807      	bhi.n	8004134 <HAL_I2C_Init+0x84>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4a80      	ldr	r2, [pc, #512]	@ (8004328 <HAL_I2C_Init+0x278>)
 8004128:	4293      	cmp	r3, r2
 800412a:	bf94      	ite	ls
 800412c:	2301      	movls	r3, #1
 800412e:	2300      	movhi	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	e006      	b.n	8004142 <HAL_I2C_Init+0x92>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4a7d      	ldr	r2, [pc, #500]	@ (800432c <HAL_I2C_Init+0x27c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	bf94      	ite	ls
 800413c:	2301      	movls	r3, #1
 800413e:	2300      	movhi	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e0e7      	b.n	800431a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4a78      	ldr	r2, [pc, #480]	@ (8004330 <HAL_I2C_Init+0x280>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	0c9b      	lsrs	r3, r3, #18
 8004154:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68ba      	ldr	r2, [r7, #8]
 8004166:	430a      	orrs	r2, r1
 8004168:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6a1b      	ldr	r3, [r3, #32]
 8004170:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4a6a      	ldr	r2, [pc, #424]	@ (8004324 <HAL_I2C_Init+0x274>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d802      	bhi.n	8004184 <HAL_I2C_Init+0xd4>
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3301      	adds	r3, #1
 8004182:	e009      	b.n	8004198 <HAL_I2C_Init+0xe8>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800418a:	fb02 f303 	mul.w	r3, r2, r3
 800418e:	4a69      	ldr	r2, [pc, #420]	@ (8004334 <HAL_I2C_Init+0x284>)
 8004190:	fba2 2303 	umull	r2, r3, r2, r3
 8004194:	099b      	lsrs	r3, r3, #6
 8004196:	3301      	adds	r3, #1
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	6812      	ldr	r2, [r2, #0]
 800419c:	430b      	orrs	r3, r1
 800419e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80041aa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	495c      	ldr	r1, [pc, #368]	@ (8004324 <HAL_I2C_Init+0x274>)
 80041b4:	428b      	cmp	r3, r1
 80041b6:	d819      	bhi.n	80041ec <HAL_I2C_Init+0x13c>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	1e59      	subs	r1, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80041c6:	1c59      	adds	r1, r3, #1
 80041c8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80041cc:	400b      	ands	r3, r1
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <HAL_I2C_Init+0x138>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	1e59      	subs	r1, r3, #1
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80041e0:	3301      	adds	r3, #1
 80041e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e6:	e051      	b.n	800428c <HAL_I2C_Init+0x1dc>
 80041e8:	2304      	movs	r3, #4
 80041ea:	e04f      	b.n	800428c <HAL_I2C_Init+0x1dc>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d111      	bne.n	8004218 <HAL_I2C_Init+0x168>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	1e58      	subs	r0, r3, #1
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6859      	ldr	r1, [r3, #4]
 80041fc:	460b      	mov	r3, r1
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	440b      	add	r3, r1
 8004202:	fbb0 f3f3 	udiv	r3, r0, r3
 8004206:	3301      	adds	r3, #1
 8004208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420c:	2b00      	cmp	r3, #0
 800420e:	bf0c      	ite	eq
 8004210:	2301      	moveq	r3, #1
 8004212:	2300      	movne	r3, #0
 8004214:	b2db      	uxtb	r3, r3
 8004216:	e012      	b.n	800423e <HAL_I2C_Init+0x18e>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	1e58      	subs	r0, r3, #1
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	460b      	mov	r3, r1
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	0099      	lsls	r1, r3, #2
 8004228:	440b      	add	r3, r1
 800422a:	fbb0 f3f3 	udiv	r3, r0, r3
 800422e:	3301      	adds	r3, #1
 8004230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004234:	2b00      	cmp	r3, #0
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <HAL_I2C_Init+0x196>
 8004242:	2301      	movs	r3, #1
 8004244:	e022      	b.n	800428c <HAL_I2C_Init+0x1dc>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d10e      	bne.n	800426c <HAL_I2C_Init+0x1bc>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1e58      	subs	r0, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6859      	ldr	r1, [r3, #4]
 8004256:	460b      	mov	r3, r1
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	440b      	add	r3, r1
 800425c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004260:	3301      	adds	r3, #1
 8004262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800426a:	e00f      	b.n	800428c <HAL_I2C_Init+0x1dc>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1e58      	subs	r0, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6859      	ldr	r1, [r3, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	0099      	lsls	r1, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004282:	3301      	adds	r3, #1
 8004284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004288:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	6809      	ldr	r1, [r1, #0]
 8004290:	4313      	orrs	r3, r2
 8004292:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80042ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6911      	ldr	r1, [r2, #16]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	68d2      	ldr	r2, [r2, #12]
 80042c6:	4311      	orrs	r1, r2
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6812      	ldr	r2, [r2, #0]
 80042cc:	430b      	orrs	r3, r1
 80042ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	000186a0 	.word	0x000186a0
 8004328:	001e847f 	.word	0x001e847f
 800432c:	003d08ff 	.word	0x003d08ff
 8004330:	431bde83 	.word	0x431bde83
 8004334:	10624dd3 	.word	0x10624dd3

08004338 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b088      	sub	sp, #32
 800433c:	af02      	add	r7, sp, #8
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	4608      	mov	r0, r1
 8004342:	4611      	mov	r1, r2
 8004344:	461a      	mov	r2, r3
 8004346:	4603      	mov	r3, r0
 8004348:	817b      	strh	r3, [r7, #10]
 800434a:	460b      	mov	r3, r1
 800434c:	813b      	strh	r3, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004352:	f7fe fe77 	bl	8003044 <HAL_GetTick>
 8004356:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b20      	cmp	r3, #32
 8004362:	f040 80d9 	bne.w	8004518 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2319      	movs	r3, #25
 800436c:	2201      	movs	r2, #1
 800436e:	496d      	ldr	r1, [pc, #436]	@ (8004524 <HAL_I2C_Mem_Write+0x1ec>)
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fdb9 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800437c:	2302      	movs	r3, #2
 800437e:	e0cc      	b.n	800451a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004386:	2b01      	cmp	r3, #1
 8004388:	d101      	bne.n	800438e <HAL_I2C_Mem_Write+0x56>
 800438a:	2302      	movs	r3, #2
 800438c:	e0c5      	b.n	800451a <HAL_I2C_Mem_Write+0x1e2>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d007      	beq.n	80043b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2221      	movs	r2, #33	@ 0x21
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2240      	movs	r2, #64	@ 0x40
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a3a      	ldr	r2, [r7, #32]
 80043de:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80043e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ea:	b29a      	uxth	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4a4d      	ldr	r2, [pc, #308]	@ (8004528 <HAL_I2C_Mem_Write+0x1f0>)
 80043f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043f6:	88f8      	ldrh	r0, [r7, #6]
 80043f8:	893a      	ldrh	r2, [r7, #8]
 80043fa:	8979      	ldrh	r1, [r7, #10]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	4603      	mov	r3, r0
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 fbf0 	bl	8004bec <I2C_RequestMemoryWrite>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d052      	beq.n	80044b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e081      	b.n	800451a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fe7e 	bl	800511c <I2C_WaitOnTXEFlagUntilTimeout>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	2b04      	cmp	r3, #4
 800442c:	d107      	bne.n	800443e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800443c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e06b      	b.n	800451a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	781a      	ldrb	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004452:	1c5a      	adds	r2, r3, #1
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445c:	3b01      	subs	r3, #1
 800445e:	b29a      	uxth	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004468:	b29b      	uxth	r3, r3
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	f003 0304 	and.w	r3, r3, #4
 800447c:	2b04      	cmp	r3, #4
 800447e:	d11b      	bne.n	80044b8 <HAL_I2C_Mem_Write+0x180>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004484:	2b00      	cmp	r3, #0
 8004486:	d017      	beq.n	80044b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	781a      	ldrb	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044a2:	3b01      	subs	r3, #1
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1aa      	bne.n	8004416 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 fe71 	bl	80051ac <I2C_WaitOnBTFFlagUntilTimeout>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00d      	beq.n	80044ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d107      	bne.n	80044e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e016      	b.n	800451a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004514:	2300      	movs	r3, #0
 8004516:	e000      	b.n	800451a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004518:	2302      	movs	r3, #2
  }
}
 800451a:	4618      	mov	r0, r3
 800451c:	3718      	adds	r7, #24
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}
 8004522:	bf00      	nop
 8004524:	00100002 	.word	0x00100002
 8004528:	ffff0000 	.word	0xffff0000

0800452c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08c      	sub	sp, #48	@ 0x30
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	4608      	mov	r0, r1
 8004536:	4611      	mov	r1, r2
 8004538:	461a      	mov	r2, r3
 800453a:	4603      	mov	r3, r0
 800453c:	817b      	strh	r3, [r7, #10]
 800453e:	460b      	mov	r3, r1
 8004540:	813b      	strh	r3, [r7, #8]
 8004542:	4613      	mov	r3, r2
 8004544:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004546:	f7fe fd7d 	bl	8003044 <HAL_GetTick>
 800454a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b20      	cmp	r3, #32
 8004556:	f040 8214 	bne.w	8004982 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2319      	movs	r3, #25
 8004560:	2201      	movs	r2, #1
 8004562:	497b      	ldr	r1, [pc, #492]	@ (8004750 <HAL_I2C_Mem_Read+0x224>)
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fcbf 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004570:	2302      	movs	r3, #2
 8004572:	e207      	b.n	8004984 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_I2C_Mem_Read+0x56>
 800457e:	2302      	movs	r3, #2
 8004580:	e200      	b.n	8004984 <HAL_I2C_Mem_Read+0x458>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b01      	cmp	r3, #1
 8004596:	d007      	beq.n	80045a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2222      	movs	r2, #34	@ 0x22
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2240      	movs	r2, #64	@ 0x40
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80045d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004754 <HAL_I2C_Mem_Read+0x228>)
 80045e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045ea:	88f8      	ldrh	r0, [r7, #6]
 80045ec:	893a      	ldrh	r2, [r7, #8]
 80045ee:	8979      	ldrh	r1, [r7, #10]
 80045f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f2:	9301      	str	r3, [sp, #4]
 80045f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	4603      	mov	r3, r0
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 fb8c 	bl	8004d18 <I2C_RequestMemoryRead>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d001      	beq.n	800460a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e1bc      	b.n	8004984 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d113      	bne.n	800463a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	623b      	str	r3, [r7, #32]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	623b      	str	r3, [r7, #32]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	623b      	str	r3, [r7, #32]
 8004626:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004636:	601a      	str	r2, [r3, #0]
 8004638:	e190      	b.n	800495c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463e:	2b01      	cmp	r3, #1
 8004640:	d11b      	bne.n	800467a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004650:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004652:	2300      	movs	r3, #0
 8004654:	61fb      	str	r3, [r7, #28]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	61fb      	str	r3, [r7, #28]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e170      	b.n	800495c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	2b02      	cmp	r3, #2
 8004680:	d11b      	bne.n	80046ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004690:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	61bb      	str	r3, [r7, #24]
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	e150      	b.n	800495c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	695b      	ldr	r3, [r3, #20]
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80046d0:	e144      	b.n	800495c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d6:	2b03      	cmp	r3, #3
 80046d8:	f200 80f1 	bhi.w	80048be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d123      	bne.n	800472c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80046e8:	68f8      	ldr	r0, [r7, #12]
 80046ea:	f000 fda7 	bl	800523c <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e145      	b.n	8004984 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470a:	1c5a      	adds	r2, r3, #1
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004714:	3b01      	subs	r3, #1
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004720:	b29b      	uxth	r3, r3
 8004722:	3b01      	subs	r3, #1
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800472a:	e117      	b.n	800495c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004730:	2b02      	cmp	r3, #2
 8004732:	d14e      	bne.n	80047d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800473a:	2200      	movs	r2, #0
 800473c:	4906      	ldr	r1, [pc, #24]	@ (8004758 <HAL_I2C_Mem_Read+0x22c>)
 800473e:	68f8      	ldr	r0, [r7, #12]
 8004740:	f000 fbd2 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	e11a      	b.n	8004984 <HAL_I2C_Mem_Read+0x458>
 800474e:	bf00      	nop
 8004750:	00100002 	.word	0x00100002
 8004754:	ffff0000 	.word	0xffff0000
 8004758:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800476a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	691a      	ldr	r2, [r3, #16]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004776:	b2d2      	uxtb	r2, r2
 8004778:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	3b01      	subs	r3, #1
 8004798:	b29a      	uxth	r2, r3
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047d0:	e0c4      	b.n	800495c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	9300      	str	r3, [sp, #0]
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	2200      	movs	r2, #0
 80047da:	496c      	ldr	r1, [pc, #432]	@ (800498c <HAL_I2C_Mem_Read+0x460>)
 80047dc:	68f8      	ldr	r0, [r7, #12]
 80047de:	f000 fb83 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d001      	beq.n	80047ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e0cb      	b.n	8004984 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	691a      	ldr	r2, [r3, #16]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	1c5a      	adds	r2, r3, #1
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004834:	2200      	movs	r2, #0
 8004836:	4955      	ldr	r1, [pc, #340]	@ (800498c <HAL_I2C_Mem_Read+0x460>)
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fb55 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 800483e:	4603      	mov	r3, r0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d001      	beq.n	8004848 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e09d      	b.n	8004984 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004856:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691a      	ldr	r2, [r3, #16]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004862:	b2d2      	uxtb	r2, r2
 8004864:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486a:	1c5a      	adds	r2, r3, #1
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004880:	b29b      	uxth	r3, r3
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a6:	3b01      	subs	r3, #1
 80048a8:	b29a      	uxth	r2, r3
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048bc:	e04e      	b.n	800495c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 fcba 	bl	800523c <I2C_WaitOnRXNEFlagUntilTimeout>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e058      	b.n	8004984 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048dc:	b2d2      	uxtb	r2, r2
 80048de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	1c5a      	adds	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ee:	3b01      	subs	r3, #1
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b04      	cmp	r3, #4
 8004910:	d124      	bne.n	800495c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004916:	2b03      	cmp	r3, #3
 8004918:	d107      	bne.n	800492a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004928:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	691a      	ldr	r2, [r3, #16]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	b2d2      	uxtb	r2, r2
 8004936:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	1c5a      	adds	r2, r3, #1
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004946:	3b01      	subs	r3, #1
 8004948:	b29a      	uxth	r2, r3
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	3b01      	subs	r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004960:	2b00      	cmp	r3, #0
 8004962:	f47f aeb6 	bne.w	80046d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	e000      	b.n	8004984 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004982:	2302      	movs	r3, #2
  }
}
 8004984:	4618      	mov	r0, r3
 8004986:	3728      	adds	r7, #40	@ 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	00010004 	.word	0x00010004

08004990 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b08a      	sub	sp, #40	@ 0x28
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	607a      	str	r2, [r7, #4]
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	460b      	mov	r3, r1
 800499e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80049a0:	f7fe fb50 	bl	8003044 <HAL_GetTick>
 80049a4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	f040 8111 	bne.w	8004bda <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	2319      	movs	r3, #25
 80049be:	2201      	movs	r2, #1
 80049c0:	4988      	ldr	r1, [pc, #544]	@ (8004be4 <HAL_I2C_IsDeviceReady+0x254>)
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 fa90 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d001      	beq.n	80049d2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80049ce:	2302      	movs	r3, #2
 80049d0:	e104      	b.n	8004bdc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d101      	bne.n	80049e0 <HAL_I2C_IsDeviceReady+0x50>
 80049dc:	2302      	movs	r3, #2
 80049de:	e0fd      	b.n	8004bdc <HAL_I2C_IsDeviceReady+0x24c>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d007      	beq.n	8004a06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2224      	movs	r2, #36	@ 0x24
 8004a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4a70      	ldr	r2, [pc, #448]	@ (8004be8 <HAL_I2C_IsDeviceReady+0x258>)
 8004a28:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fa4e 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00d      	beq.n	8004a6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a60:	d103      	bne.n	8004a6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a68:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e0b6      	b.n	8004bdc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a6e:	897b      	ldrh	r3, [r7, #10]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	461a      	mov	r2, r3
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004a7e:	f7fe fae1 	bl	8003044 <HAL_GetTick>
 8004a82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	bf0c      	ite	eq
 8004a92:	2301      	moveq	r3, #1
 8004a94:	2300      	movne	r3, #0
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004aa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa8:	bf0c      	ite	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	2300      	movne	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004ab2:	e025      	b.n	8004b00 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ab4:	f7fe fac6 	bl	8003044 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	683a      	ldr	r2, [r7, #0]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d302      	bcc.n	8004aca <HAL_I2C_IsDeviceReady+0x13a>
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d103      	bne.n	8004ad2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	22a0      	movs	r2, #160	@ 0xa0
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	bf0c      	ite	eq
 8004ae0:	2301      	moveq	r3, #1
 8004ae2:	2300      	movne	r3, #0
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004af2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004af6:	bf0c      	ite	eq
 8004af8:	2301      	moveq	r3, #1
 8004afa:	2300      	movne	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2ba0      	cmp	r3, #160	@ 0xa0
 8004b0a:	d005      	beq.n	8004b18 <HAL_I2C_IsDeviceReady+0x188>
 8004b0c:	7dfb      	ldrb	r3, [r7, #23]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d102      	bne.n	8004b18 <HAL_I2C_IsDeviceReady+0x188>
 8004b12:	7dbb      	ldrb	r3, [r7, #22]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d0cd      	beq.n	8004ab4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d129      	bne.n	8004b82 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b3c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	613b      	str	r3, [r7, #16]
 8004b52:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2319      	movs	r3, #25
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	4921      	ldr	r1, [pc, #132]	@ (8004be4 <HAL_I2C_IsDeviceReady+0x254>)
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f9c2 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e036      	b.n	8004bdc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	e02c      	b.n	8004bdc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b90:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b9a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2319      	movs	r3, #25
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	490f      	ldr	r1, [pc, #60]	@ (8004be4 <HAL_I2C_IsDeviceReady+0x254>)
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f99e 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e012      	b.n	8004bdc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	f4ff af32 	bcc.w	8004a2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004bda:	2302      	movs	r3, #2
  }
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3720      	adds	r7, #32
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	00100002 	.word	0x00100002
 8004be8:	ffff0000 	.word	0xffff0000

08004bec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b088      	sub	sp, #32
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	817b      	strh	r3, [r7, #10]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	813b      	strh	r3, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f960 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00d      	beq.n	8004c4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c3c:	d103      	bne.n	8004c46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e05f      	b.n	8004d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c4a:	897b      	ldrh	r3, [r7, #10]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	461a      	mov	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	6a3a      	ldr	r2, [r7, #32]
 8004c5e:	492d      	ldr	r1, [pc, #180]	@ (8004d14 <I2C_RequestMemoryWrite+0x128>)
 8004c60:	68f8      	ldr	r0, [r7, #12]
 8004c62:	f000 f9bb 	bl	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d001      	beq.n	8004c70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e04c      	b.n	8004d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	617b      	str	r3, [r7, #20]
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c88:	6a39      	ldr	r1, [r7, #32]
 8004c8a:	68f8      	ldr	r0, [r7, #12]
 8004c8c:	f000 fa46 	bl	800511c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00d      	beq.n	8004cb2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	d107      	bne.n	8004cae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e02b      	b.n	8004d0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cb2:	88fb      	ldrh	r3, [r7, #6]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d105      	bne.n	8004cc4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb8:	893b      	ldrh	r3, [r7, #8]
 8004cba:	b2da      	uxtb	r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	611a      	str	r2, [r3, #16]
 8004cc2:	e021      	b.n	8004d08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004cc4:	893b      	ldrh	r3, [r7, #8]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cd4:	6a39      	ldr	r1, [r7, #32]
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f000 fa20 	bl	800511c <I2C_WaitOnTXEFlagUntilTimeout>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00d      	beq.n	8004cfe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d107      	bne.n	8004cfa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cf8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e005      	b.n	8004d0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cfe:	893b      	ldrh	r3, [r7, #8]
 8004d00:	b2da      	uxtb	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	00010002 	.word	0x00010002

08004d18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b088      	sub	sp, #32
 8004d1c:	af02      	add	r7, sp, #8
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	4608      	mov	r0, r1
 8004d22:	4611      	mov	r1, r2
 8004d24:	461a      	mov	r2, r3
 8004d26:	4603      	mov	r3, r0
 8004d28:	817b      	strh	r3, [r7, #10]
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	813b      	strh	r3, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d54:	9300      	str	r3, [sp, #0]
 8004d56:	6a3b      	ldr	r3, [r7, #32]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f8c2 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00d      	beq.n	8004d86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d78:	d103      	bne.n	8004d82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0aa      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d86:	897b      	ldrh	r3, [r7, #10]
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	4952      	ldr	r1, [pc, #328]	@ (8004ee4 <I2C_RequestMemoryRead+0x1cc>)
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f91d 	bl	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d001      	beq.n	8004dac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e097      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dac:	2300      	movs	r3, #0
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dc4:	6a39      	ldr	r1, [r7, #32]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f9a8 	bl	800511c <I2C_WaitOnTXEFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00d      	beq.n	8004dee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	d107      	bne.n	8004dea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004de8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e076      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d105      	bne.n	8004e00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004df4:	893b      	ldrh	r3, [r7, #8]
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	611a      	str	r2, [r3, #16]
 8004dfe:	e021      	b.n	8004e44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e00:	893b      	ldrh	r3, [r7, #8]
 8004e02:	0a1b      	lsrs	r3, r3, #8
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e10:	6a39      	ldr	r1, [r7, #32]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f000 f982 	bl	800511c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00d      	beq.n	8004e3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d107      	bne.n	8004e36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e050      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e3a:	893b      	ldrh	r3, [r7, #8]
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e46:	6a39      	ldr	r1, [r7, #32]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f967 	bl	800511c <I2C_WaitOnTXEFlagUntilTimeout>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00d      	beq.n	8004e70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d107      	bne.n	8004e6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e035      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f82b 	bl	8004ee8 <I2C_WaitOnFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00d      	beq.n	8004eb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ea6:	d103      	bne.n	8004eb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e013      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004eb4:	897b      	ldrh	r3, [r7, #10]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f043 0301 	orr.w	r3, r3, #1
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec6:	6a3a      	ldr	r2, [r7, #32]
 8004ec8:	4906      	ldr	r1, [pc, #24]	@ (8004ee4 <I2C_RequestMemoryRead+0x1cc>)
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 f886 	bl	8004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	00010002 	.word	0x00010002

08004ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ef8:	e048      	b.n	8004f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d044      	beq.n	8004f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f02:	f7fe f89f 	bl	8003044 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d302      	bcc.n	8004f18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d139      	bne.n	8004f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	0c1b      	lsrs	r3, r3, #16
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d10d      	bne.n	8004f3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	43da      	mvns	r2, r3
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	b29b      	uxth	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf0c      	ite	eq
 8004f34:	2301      	moveq	r3, #1
 8004f36:	2300      	movne	r3, #0
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	e00c      	b.n	8004f58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	43da      	mvns	r2, r3
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	4013      	ands	r3, r2
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	bf0c      	ite	eq
 8004f50:	2301      	moveq	r3, #1
 8004f52:	2300      	movne	r3, #0
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	461a      	mov	r2, r3
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d116      	bne.n	8004f8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2220      	movs	r2, #32
 8004f68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f78:	f043 0220 	orr.w	r2, r3, #32
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e023      	b.n	8004fd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d10d      	bne.n	8004fb2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	43da      	mvns	r2, r3
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	e00c      	b.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	43da      	mvns	r2, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	bf0c      	ite	eq
 8004fc4:	2301      	moveq	r3, #1
 8004fc6:	2300      	movne	r3, #0
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	79fb      	ldrb	r3, [r7, #7]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d093      	beq.n	8004efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
 8004fe8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fea:	e071      	b.n	80050d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ffa:	d123      	bne.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800500a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005014:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	f043 0204 	orr.w	r2, r3, #4
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e067      	b.n	8005114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504a:	d041      	beq.n	80050d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800504c:	f7fd fffa 	bl	8003044 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	429a      	cmp	r2, r3
 800505a:	d302      	bcc.n	8005062 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d136      	bne.n	80050d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b01      	cmp	r3, #1
 800506a:	d10c      	bne.n	8005086 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	43da      	mvns	r2, r3
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4013      	ands	r3, r2
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	bf14      	ite	ne
 800507e:	2301      	movne	r3, #1
 8005080:	2300      	moveq	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	e00b      	b.n	800509e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	43da      	mvns	r2, r3
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4013      	ands	r3, r2
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d016      	beq.n	80050d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050bc:	f043 0220 	orr.w	r2, r3, #32
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	2200      	movs	r2, #0
 80050c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e021      	b.n	8005114 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	0c1b      	lsrs	r3, r3, #16
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d10c      	bne.n	80050f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	43da      	mvns	r2, r3
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	4013      	ands	r3, r2
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	bf14      	ite	ne
 80050ec:	2301      	movne	r3, #1
 80050ee:	2300      	moveq	r3, #0
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	e00b      	b.n	800510c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	43da      	mvns	r2, r3
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	4013      	ands	r3, r2
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	bf14      	ite	ne
 8005106:	2301      	movne	r3, #1
 8005108:	2300      	moveq	r3, #0
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	f47f af6d 	bne.w	8004fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005128:	e034      	b.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800512a:	68f8      	ldr	r0, [r7, #12]
 800512c:	f000 f8e3 	bl	80052f6 <I2C_IsAcknowledgeFailed>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e034      	b.n	80051a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d028      	beq.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005142:	f7fd ff7f 	bl	8003044 <HAL_GetTick>
 8005146:	4602      	mov	r2, r0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	429a      	cmp	r2, r3
 8005150:	d302      	bcc.n	8005158 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d11d      	bne.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695b      	ldr	r3, [r3, #20]
 800515e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005162:	2b80      	cmp	r3, #128	@ 0x80
 8005164:	d016      	beq.n	8005194 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005180:	f043 0220 	orr.w	r2, r3, #32
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e007      	b.n	80051a4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800519e:	2b80      	cmp	r3, #128	@ 0x80
 80051a0:	d1c3      	bne.n	800512a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051a2:	2300      	movs	r3, #0
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051b8:	e034      	b.n	8005224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 f89b 	bl	80052f6 <I2C_IsAcknowledgeFailed>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d001      	beq.n	80051ca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e034      	b.n	8005234 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d028      	beq.n	8005224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051d2:	f7fd ff37 	bl	8003044 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	68ba      	ldr	r2, [r7, #8]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d302      	bcc.n	80051e8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d11d      	bne.n	8005224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d016      	beq.n	8005224 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	f043 0220 	orr.w	r2, r3, #32
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e007      	b.n	8005234 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b04      	cmp	r3, #4
 8005230:	d1c3      	bne.n	80051ba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005248:	e049      	b.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695b      	ldr	r3, [r3, #20]
 8005250:	f003 0310 	and.w	r3, r3, #16
 8005254:	2b10      	cmp	r3, #16
 8005256:	d119      	bne.n	800528c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0210 	mvn.w	r2, #16
 8005260:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2220      	movs	r2, #32
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e030      	b.n	80052ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800528c:	f7fd feda 	bl	8003044 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	429a      	cmp	r2, r3
 800529a:	d302      	bcc.n	80052a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d11d      	bne.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	695b      	ldr	r3, [r3, #20]
 80052a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052ac:	2b40      	cmp	r3, #64	@ 0x40
 80052ae:	d016      	beq.n	80052de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ca:	f043 0220 	orr.w	r2, r3, #32
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e007      	b.n	80052ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052e8:	2b40      	cmp	r3, #64	@ 0x40
 80052ea:	d1ae      	bne.n	800524a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b083      	sub	sp, #12
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005308:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800530c:	d11b      	bne.n	8005346 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005316:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2220      	movs	r2, #32
 8005322:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	f043 0204 	orr.w	r2, r3, #4
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e000      	b.n	8005348 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005346:	2300      	movs	r3, #0
}
 8005348:	4618      	mov	r0, r3
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	bc80      	pop	{r7}
 8005350:	4770      	bx	lr
	...

08005354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	@ 0x28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e23b      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d050      	beq.n	8005414 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005372:	4b9e      	ldr	r3, [pc, #632]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 030c 	and.w	r3, r3, #12
 800537a:	2b04      	cmp	r3, #4
 800537c:	d00c      	beq.n	8005398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800537e:	4b9b      	ldr	r3, [pc, #620]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005386:	2b08      	cmp	r3, #8
 8005388:	d112      	bne.n	80053b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800538a:	4b98      	ldr	r3, [pc, #608]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005392:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005396:	d10b      	bne.n	80053b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005398:	4b94      	ldr	r3, [pc, #592]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d036      	beq.n	8005412 <HAL_RCC_OscConfig+0xbe>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d132      	bne.n	8005412 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e216      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	4b8e      	ldr	r3, [pc, #568]	@ (80055f0 <HAL_RCC_OscConfig+0x29c>)
 80053b6:	b2d2      	uxtb	r2, r2
 80053b8:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d013      	beq.n	80053ea <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c2:	f7fd fe3f 	bl	8003044 <HAL_GetTick>
 80053c6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053c8:	e008      	b.n	80053dc <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053ca:	f7fd fe3b 	bl	8003044 <HAL_GetTick>
 80053ce:	4602      	mov	r2, r0
 80053d0:	6a3b      	ldr	r3, [r7, #32]
 80053d2:	1ad3      	subs	r3, r2, r3
 80053d4:	2b64      	cmp	r3, #100	@ 0x64
 80053d6:	d901      	bls.n	80053dc <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e200      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053dc:	4b83      	ldr	r3, [pc, #524]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0f0      	beq.n	80053ca <HAL_RCC_OscConfig+0x76>
 80053e8:	e014      	b.n	8005414 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ea:	f7fd fe2b 	bl	8003044 <HAL_GetTick>
 80053ee:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80053f2:	f7fd fe27 	bl	8003044 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	6a3b      	ldr	r3, [r7, #32]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b64      	cmp	r3, #100	@ 0x64
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e1ec      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005404:	4b79      	ldr	r3, [pc, #484]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f0      	bne.n	80053f2 <HAL_RCC_OscConfig+0x9e>
 8005410:	e000      	b.n	8005414 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005412:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d077      	beq.n	8005510 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005420:	4b72      	ldr	r3, [pc, #456]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b00      	cmp	r3, #0
 800542a:	d00b      	beq.n	8005444 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800542c:	4b6f      	ldr	r3, [pc, #444]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005434:	2b08      	cmp	r3, #8
 8005436:	d126      	bne.n	8005486 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005438:	4b6c      	ldr	r3, [pc, #432]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d120      	bne.n	8005486 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005444:	4b69      	ldr	r3, [pc, #420]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d005      	beq.n	800545c <HAL_RCC_OscConfig+0x108>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	2b01      	cmp	r3, #1
 8005456:	d001      	beq.n	800545c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	e1c0      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800545c:	4b63      	ldr	r3, [pc, #396]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	21f8      	movs	r1, #248	@ 0xf8
 800546a:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800546c:	69b9      	ldr	r1, [r7, #24]
 800546e:	fa91 f1a1 	rbit	r1, r1
 8005472:	6179      	str	r1, [r7, #20]
  return result;
 8005474:	6979      	ldr	r1, [r7, #20]
 8005476:	fab1 f181 	clz	r1, r1
 800547a:	b2c9      	uxtb	r1, r1
 800547c:	408b      	lsls	r3, r1
 800547e:	495b      	ldr	r1, [pc, #364]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 8005480:	4313      	orrs	r3, r2
 8005482:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005484:	e044      	b.n	8005510 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d02a      	beq.n	80054e4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800548e:	4b59      	ldr	r3, [pc, #356]	@ (80055f4 <HAL_RCC_OscConfig+0x2a0>)
 8005490:	2201      	movs	r2, #1
 8005492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005494:	f7fd fdd6 	bl	8003044 <HAL_GetTick>
 8005498:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800549a:	e008      	b.n	80054ae <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800549c:	f7fd fdd2 	bl	8003044 <HAL_GetTick>
 80054a0:	4602      	mov	r2, r0
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	1ad3      	subs	r3, r2, r3
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d901      	bls.n	80054ae <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80054aa:	2303      	movs	r3, #3
 80054ac:	e197      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ae:	4b4f      	ldr	r3, [pc, #316]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d0f0      	beq.n	800549c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054ba:	4b4c      	ldr	r3, [pc, #304]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	21f8      	movs	r1, #248	@ 0xf8
 80054c8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ca:	6939      	ldr	r1, [r7, #16]
 80054cc:	fa91 f1a1 	rbit	r1, r1
 80054d0:	60f9      	str	r1, [r7, #12]
  return result;
 80054d2:	68f9      	ldr	r1, [r7, #12]
 80054d4:	fab1 f181 	clz	r1, r1
 80054d8:	b2c9      	uxtb	r1, r1
 80054da:	408b      	lsls	r3, r1
 80054dc:	4943      	ldr	r1, [pc, #268]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]
 80054e2:	e015      	b.n	8005510 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054e4:	4b43      	ldr	r3, [pc, #268]	@ (80055f4 <HAL_RCC_OscConfig+0x2a0>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ea:	f7fd fdab 	bl	8003044 <HAL_GetTick>
 80054ee:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054f2:	f7fd fda7 	bl	8003044 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	6a3b      	ldr	r3, [r7, #32]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e16c      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005504:	4b39      	ldr	r3, [pc, #228]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f0      	bne.n	80054f2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d030      	beq.n	800557e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d016      	beq.n	8005552 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005524:	4b34      	ldr	r3, [pc, #208]	@ (80055f8 <HAL_RCC_OscConfig+0x2a4>)
 8005526:	2201      	movs	r2, #1
 8005528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800552a:	f7fd fd8b 	bl	8003044 <HAL_GetTick>
 800552e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005530:	e008      	b.n	8005544 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005532:	f7fd fd87 	bl	8003044 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d901      	bls.n	8005544 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	e14c      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005544:	4b29      	ldr	r3, [pc, #164]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 8005546:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005548:	f003 0302 	and.w	r3, r3, #2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d0f0      	beq.n	8005532 <HAL_RCC_OscConfig+0x1de>
 8005550:	e015      	b.n	800557e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005552:	4b29      	ldr	r3, [pc, #164]	@ (80055f8 <HAL_RCC_OscConfig+0x2a4>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005558:	f7fd fd74 	bl	8003044 <HAL_GetTick>
 800555c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800555e:	e008      	b.n	8005572 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005560:	f7fd fd70 	bl	8003044 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	2b02      	cmp	r3, #2
 800556c:	d901      	bls.n	8005572 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e135      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005572:	4b1e      	ldr	r3, [pc, #120]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 8005574:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1f0      	bne.n	8005560 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f003 0304 	and.w	r3, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	f000 8087 	beq.w	800569a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 800558c:	2300      	movs	r3, #0
 800558e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005592:	4b16      	ldr	r3, [pc, #88]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 8005594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d110      	bne.n	80055c0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800559e:	2300      	movs	r3, #0
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	4b12      	ldr	r3, [pc, #72]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 80055a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a6:	4a11      	ldr	r2, [pc, #68]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 80055a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80055ae:	4b0f      	ldr	r3, [pc, #60]	@ (80055ec <HAL_RCC_OscConfig+0x298>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b6:	60bb      	str	r3, [r7, #8]
 80055b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ba:	2301      	movs	r3, #1
 80055bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055c0:	4b0e      	ldr	r3, [pc, #56]	@ (80055fc <HAL_RCC_OscConfig+0x2a8>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a0d      	ldr	r2, [pc, #52]	@ (80055fc <HAL_RCC_OscConfig+0x2a8>)
 80055c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ca:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055cc:	4b0b      	ldr	r3, [pc, #44]	@ (80055fc <HAL_RCC_OscConfig+0x2a8>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d122      	bne.n	800561e <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055d8:	4b08      	ldr	r3, [pc, #32]	@ (80055fc <HAL_RCC_OscConfig+0x2a8>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a07      	ldr	r2, [pc, #28]	@ (80055fc <HAL_RCC_OscConfig+0x2a8>)
 80055de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055e4:	f7fd fd2e 	bl	8003044 <HAL_GetTick>
 80055e8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ea:	e012      	b.n	8005612 <HAL_RCC_OscConfig+0x2be>
 80055ec:	40023800 	.word	0x40023800
 80055f0:	40023802 	.word	0x40023802
 80055f4:	42470000 	.word	0x42470000
 80055f8:	42470e80 	.word	0x42470e80
 80055fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005600:	f7fd fd20 	bl	8003044 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	2b02      	cmp	r3, #2
 800560c:	d901      	bls.n	8005612 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e0e5      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005612:	4b75      	ldr	r3, [pc, #468]	@ (80057e8 <HAL_RCC_OscConfig+0x494>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0f0      	beq.n	8005600 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689a      	ldr	r2, [r3, #8]
 8005622:	4b72      	ldr	r3, [pc, #456]	@ (80057ec <HAL_RCC_OscConfig+0x498>)
 8005624:	b2d2      	uxtb	r2, r2
 8005626:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d015      	beq.n	800565c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005630:	f7fd fd08 	bl	8003044 <HAL_GetTick>
 8005634:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005636:	e00a      	b.n	800564e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005638:	f7fd fd04 	bl	8003044 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e0c7      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800564e:	4b68      	ldr	r3, [pc, #416]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 8005650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0ee      	beq.n	8005638 <HAL_RCC_OscConfig+0x2e4>
 800565a:	e014      	b.n	8005686 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800565c:	f7fd fcf2 	bl	8003044 <HAL_GetTick>
 8005660:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005662:	e00a      	b.n	800567a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005664:	f7fd fcee 	bl	8003044 <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	6a3b      	ldr	r3, [r7, #32]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e0b1      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567a:	4b5d      	ldr	r3, [pc, #372]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 800567c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1ee      	bne.n	8005664 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005686:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800568a:	2b01      	cmp	r3, #1
 800568c:	d105      	bne.n	800569a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568e:	4b58      	ldr	r3, [pc, #352]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 8005690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005692:	4a57      	ldr	r2, [pc, #348]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 8005694:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005698:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 809c 	beq.w	80057dc <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056a4:	4b52      	ldr	r3, [pc, #328]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 030c 	and.w	r3, r3, #12
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d061      	beq.n	8005774 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	d146      	bne.n	8005746 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056b8:	4b4e      	ldr	r3, [pc, #312]	@ (80057f4 <HAL_RCC_OscConfig+0x4a0>)
 80056ba:	2200      	movs	r2, #0
 80056bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056be:	f7fd fcc1 	bl	8003044 <HAL_GetTick>
 80056c2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056c6:	f7fd fcbd 	bl	8003044 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6a3b      	ldr	r3, [r7, #32]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b64      	cmp	r3, #100	@ 0x64
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e082      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056d8:	4b45      	ldr	r3, [pc, #276]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056e4:	4b42      	ldr	r3, [pc, #264]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	4b43      	ldr	r3, [pc, #268]	@ (80057f8 <HAL_RCC_OscConfig+0x4a4>)
 80056ea:	4013      	ands	r3, r2
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	69d1      	ldr	r1, [r2, #28]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	6a12      	ldr	r2, [r2, #32]
 80056f4:	4311      	orrs	r1, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056fa:	0192      	lsls	r2, r2, #6
 80056fc:	4311      	orrs	r1, r2
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005702:	0612      	lsls	r2, r2, #24
 8005704:	4311      	orrs	r1, r2
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800570a:	0852      	lsrs	r2, r2, #1
 800570c:	3a01      	subs	r2, #1
 800570e:	0412      	lsls	r2, r2, #16
 8005710:	430a      	orrs	r2, r1
 8005712:	4937      	ldr	r1, [pc, #220]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 8005714:	4313      	orrs	r3, r2
 8005716:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005718:	4b36      	ldr	r3, [pc, #216]	@ (80057f4 <HAL_RCC_OscConfig+0x4a0>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fd fc91 	bl	8003044 <HAL_GetTick>
 8005722:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005726:	f7fd fc8d 	bl	8003044 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	6a3b      	ldr	r3, [r7, #32]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b64      	cmp	r3, #100	@ 0x64
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e052      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005738:	4b2d      	ldr	r3, [pc, #180]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x3d2>
 8005744:	e04a      	b.n	80057dc <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005746:	4b2b      	ldr	r3, [pc, #172]	@ (80057f4 <HAL_RCC_OscConfig+0x4a0>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7fd fc7a 	bl	8003044 <HAL_GetTick>
 8005750:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005754:	f7fd fc76 	bl	8003044 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b64      	cmp	r3, #100	@ 0x64
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e03b      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005766:	4b22      	ldr	r3, [pc, #136]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x400>
 8005772:	e033      	b.n	80057dc <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e02e      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8005780:	4b1b      	ldr	r3, [pc, #108]	@ (80057f0 <HAL_RCC_OscConfig+0x49c>)
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	429a      	cmp	r2, r3
 8005792:	d121      	bne.n	80057d8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800579e:	429a      	cmp	r2, r3
 80057a0:	d11a      	bne.n	80057d8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057a8:	4013      	ands	r3, r2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057ae:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d111      	bne.n	80057d8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	3b01      	subs	r3, #1
 80057c2:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d107      	bne.n	80057d8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e000      	b.n	80057de <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3728      	adds	r7, #40	@ 0x28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	40007000 	.word	0x40007000
 80057ec:	40023870 	.word	0x40023870
 80057f0:	40023800 	.word	0x40023800
 80057f4:	42470060 	.word	0x42470060
 80057f8:	f0bc8000 	.word	0xf0bc8000

080057fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0d2      	b.n	80059b6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005810:	4b6b      	ldr	r3, [pc, #428]	@ (80059c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 030f 	and.w	r3, r3, #15
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d90c      	bls.n	8005838 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581e:	4b68      	ldr	r3, [pc, #416]	@ (80059c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005826:	4b66      	ldr	r3, [pc, #408]	@ (80059c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d001      	beq.n	8005838 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e0be      	b.n	80059b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0302 	and.w	r3, r3, #2
 8005840:	2b00      	cmp	r3, #0
 8005842:	d020      	beq.n	8005886 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 0304 	and.w	r3, r3, #4
 800584c:	2b00      	cmp	r3, #0
 800584e:	d005      	beq.n	800585c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005850:	4b5c      	ldr	r3, [pc, #368]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	4a5b      	ldr	r2, [pc, #364]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005856:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800585a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8005868:	4b56      	ldr	r3, [pc, #344]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a55      	ldr	r2, [pc, #340]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 800586e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005872:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005874:	4b53      	ldr	r3, [pc, #332]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005876:	689b      	ldr	r3, [r3, #8]
 8005878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	4950      	ldr	r1, [pc, #320]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005882:	4313      	orrs	r3, r2
 8005884:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d040      	beq.n	8005914 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d107      	bne.n	80058aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589a:	4b4a      	ldr	r3, [pc, #296]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d115      	bne.n	80058d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e085      	b.n	80059b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d107      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058b2:	4b44      	ldr	r3, [pc, #272]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d109      	bne.n	80058d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e079      	b.n	80059b6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058c2:	4b40      	ldr	r3, [pc, #256]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e071      	b.n	80059b6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058d2:	4b3c      	ldr	r3, [pc, #240]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	f023 0203 	bic.w	r2, r3, #3
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	4939      	ldr	r1, [pc, #228]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058e4:	f7fd fbae 	bl	8003044 <HAL_GetTick>
 80058e8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058ea:	e00a      	b.n	8005902 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058ec:	f7fd fbaa 	bl	8003044 <HAL_GetTick>
 80058f0:	4602      	mov	r2, r0
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e059      	b.n	80059b6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005902:	4b30      	ldr	r3, [pc, #192]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 020c 	and.w	r2, r3, #12
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	429a      	cmp	r2, r3
 8005912:	d1eb      	bne.n	80058ec <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005914:	4b2a      	ldr	r3, [pc, #168]	@ (80059c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 030f 	and.w	r3, r3, #15
 800591c:	683a      	ldr	r2, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d20c      	bcs.n	800593c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005922:	4b27      	ldr	r3, [pc, #156]	@ (80059c0 <HAL_RCC_ClockConfig+0x1c4>)
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	b2d2      	uxtb	r2, r2
 8005928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800592a:	4b25      	ldr	r3, [pc, #148]	@ (80059c0 <HAL_RCC_ClockConfig+0x1c4>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	683a      	ldr	r2, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d001      	beq.n	800593c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e03c      	b.n	80059b6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d008      	beq.n	800595a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005948:	4b1e      	ldr	r3, [pc, #120]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	491b      	ldr	r1, [pc, #108]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005956:	4313      	orrs	r3, r2
 8005958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005966:	4b17      	ldr	r3, [pc, #92]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4913      	ldr	r1, [pc, #76]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800597a:	f000 f82b 	bl	80059d4 <HAL_RCC_GetSysClockFreq>
 800597e:	4601      	mov	r1, r0
 8005980:	4b10      	ldr	r3, [pc, #64]	@ (80059c4 <HAL_RCC_ClockConfig+0x1c8>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005988:	22f0      	movs	r2, #240	@ 0xf0
 800598a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	fa92 f2a2 	rbit	r2, r2
 8005992:	60fa      	str	r2, [r7, #12]
  return result;
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	fab2 f282 	clz	r2, r2
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	40d3      	lsrs	r3, r2
 800599e:	4a0a      	ldr	r2, [pc, #40]	@ (80059c8 <HAL_RCC_ClockConfig+0x1cc>)
 80059a0:	5cd3      	ldrb	r3, [r2, r3]
 80059a2:	fa21 f303 	lsr.w	r3, r1, r3
 80059a6:	4a09      	ldr	r2, [pc, #36]	@ (80059cc <HAL_RCC_ClockConfig+0x1d0>)
 80059a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80059aa:	4b09      	ldr	r3, [pc, #36]	@ (80059d0 <HAL_RCC_ClockConfig+0x1d4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fd fb06 	bl	8002fc0 <HAL_InitTick>

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40023c00 	.word	0x40023c00
 80059c4:	40023800 	.word	0x40023800
 80059c8:	08006d78 	.word	0x08006d78
 80059cc:	20000000 	.word	0x20000000
 80059d0:	20000004 	.word	0x20000004

080059d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d8:	b090      	sub	sp, #64	@ 0x40
 80059da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80059dc:	2300      	movs	r3, #0
 80059de:	637b      	str	r3, [r7, #52]	@ 0x34
 80059e0:	2300      	movs	r3, #0
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e4:	2300      	movs	r3, #0
 80059e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059ec:	4b59      	ldr	r3, [pc, #356]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x180>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 030c 	and.w	r3, r3, #12
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d00d      	beq.n	8005a14 <HAL_RCC_GetSysClockFreq+0x40>
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	f200 80a2 	bhi.w	8005b42 <HAL_RCC_GetSysClockFreq+0x16e>
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <HAL_RCC_GetSysClockFreq+0x34>
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d003      	beq.n	8005a0e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a06:	e09c      	b.n	8005b42 <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a08:	4b53      	ldr	r3, [pc, #332]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8005a0c:	e09c      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a0e:	4b53      	ldr	r3, [pc, #332]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005a12:	e099      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a14:	4b4f      	ldr	r3, [pc, #316]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a1c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a1e:	4b4d      	ldr	r3, [pc, #308]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d027      	beq.n	8005a7a <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a2a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	099b      	lsrs	r3, r3, #6
 8005a30:	2200      	movs	r2, #0
 8005a32:	623b      	str	r3, [r7, #32]
 8005a34:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005a3c:	2100      	movs	r1, #0
 8005a3e:	4b47      	ldr	r3, [pc, #284]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a40:	fb03 f201 	mul.w	r2, r3, r1
 8005a44:	2300      	movs	r3, #0
 8005a46:	fb00 f303 	mul.w	r3, r0, r3
 8005a4a:	4413      	add	r3, r2
 8005a4c:	4a43      	ldr	r2, [pc, #268]	@ (8005b5c <HAL_RCC_GetSysClockFreq+0x188>)
 8005a4e:	fba0 2102 	umull	r2, r1, r0, r2
 8005a52:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005a54:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a58:	4413      	add	r3, r2
 8005a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a5e:	2200      	movs	r2, #0
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	61fa      	str	r2, [r7, #28]
 8005a64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a68:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005a6c:	f7fb fb46 	bl	80010fc <__aeabi_uldivmod>
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4613      	mov	r3, r2
 8005a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a78:	e055      	b.n	8005b26 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a7a:	4b36      	ldr	r3, [pc, #216]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	099b      	lsrs	r3, r3, #6
 8005a80:	2200      	movs	r2, #0
 8005a82:	613b      	str	r3, [r7, #16]
 8005a84:	617a      	str	r2, [r7, #20]
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005a8c:	f04f 0b00 	mov.w	fp, #0
 8005a90:	4652      	mov	r2, sl
 8005a92:	465b      	mov	r3, fp
 8005a94:	f04f 0000 	mov.w	r0, #0
 8005a98:	f04f 0100 	mov.w	r1, #0
 8005a9c:	0159      	lsls	r1, r3, #5
 8005a9e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005aa2:	0150      	lsls	r0, r2, #5
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	460b      	mov	r3, r1
 8005aa8:	ebb2 080a 	subs.w	r8, r2, sl
 8005aac:	eb63 090b 	sbc.w	r9, r3, fp
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005abc:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005ac0:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ac4:	ebb2 0408 	subs.w	r4, r2, r8
 8005ac8:	eb63 0509 	sbc.w	r5, r3, r9
 8005acc:	f04f 0200 	mov.w	r2, #0
 8005ad0:	f04f 0300 	mov.w	r3, #0
 8005ad4:	00eb      	lsls	r3, r5, #3
 8005ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ada:	00e2      	lsls	r2, r4, #3
 8005adc:	4614      	mov	r4, r2
 8005ade:	461d      	mov	r5, r3
 8005ae0:	eb14 030a 	adds.w	r3, r4, sl
 8005ae4:	603b      	str	r3, [r7, #0]
 8005ae6:	eb45 030b 	adc.w	r3, r5, fp
 8005aea:	607b      	str	r3, [r7, #4]
 8005aec:	f04f 0200 	mov.w	r2, #0
 8005af0:	f04f 0300 	mov.w	r3, #0
 8005af4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005af8:	4629      	mov	r1, r5
 8005afa:	028b      	lsls	r3, r1, #10
 8005afc:	4620      	mov	r0, r4
 8005afe:	4629      	mov	r1, r5
 8005b00:	4604      	mov	r4, r0
 8005b02:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8005b06:	4601      	mov	r1, r0
 8005b08:	028a      	lsls	r2, r1, #10
 8005b0a:	4610      	mov	r0, r2
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b10:	2200      	movs	r2, #0
 8005b12:	60bb      	str	r3, [r7, #8]
 8005b14:	60fa      	str	r2, [r7, #12]
 8005b16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b1a:	f7fb faef 	bl	80010fc <__aeabi_uldivmod>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	460b      	mov	r3, r1
 8005b22:	4613      	mov	r3, r2
 8005b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005b26:	4b0b      	ldr	r3, [pc, #44]	@ (8005b54 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	0c1b      	lsrs	r3, r3, #16
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	3301      	adds	r3, #1
 8005b32:	005b      	lsls	r3, r3, #1
 8005b34:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8005b36:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b40:	e002      	b.n	8005b48 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005b42:	4b05      	ldr	r3, [pc, #20]	@ (8005b58 <HAL_RCC_GetSysClockFreq+0x184>)
 8005b44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005b46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3740      	adds	r7, #64	@ 0x40
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b54:	40023800 	.word	0x40023800
 8005b58:	00f42400 	.word	0x00f42400
 8005b5c:	017d7840 	.word	0x017d7840

08005b60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b64:	4b02      	ldr	r3, [pc, #8]	@ (8005b70 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b66:	681b      	ldr	r3, [r3, #0]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bc80      	pop	{r7}
 8005b6e:	4770      	bx	lr
 8005b70:	20000000 	.word	0x20000000

08005b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005b7a:	f7ff fff1 	bl	8005b60 <HAL_RCC_GetHCLKFreq>
 8005b7e:	4601      	mov	r1, r0
 8005b80:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005b88:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8005b8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	fa92 f2a2 	rbit	r2, r2
 8005b94:	603a      	str	r2, [r7, #0]
  return result;
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	fab2 f282 	clz	r2, r2
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	40d3      	lsrs	r3, r2
 8005ba0:	4a04      	ldr	r2, [pc, #16]	@ (8005bb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8005ba2:	5cd3      	ldrb	r3, [r2, r3]
 8005ba4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3708      	adds	r7, #8
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	08006d88 	.word	0x08006d88

08005bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d101      	bne.n	8005bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e041      	b.n	8005c4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d106      	bne.n	8005be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fd f8ae 	bl	8002d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2202      	movs	r2, #2
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3304      	adds	r3, #4
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	f000 fd2e 	bl	8006658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3708      	adds	r7, #8
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d001      	beq.n	8005c70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	e046      	b.n	8005cfe <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2202      	movs	r2, #2
 8005c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a22      	ldr	r2, [pc, #136]	@ (8005d08 <HAL_TIM_Base_Start+0xb0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d022      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c8a:	d01d      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a1e      	ldr	r2, [pc, #120]	@ (8005d0c <HAL_TIM_Base_Start+0xb4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d018      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d10 <HAL_TIM_Base_Start+0xb8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d013      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a1b      	ldr	r2, [pc, #108]	@ (8005d14 <HAL_TIM_Base_Start+0xbc>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d00e      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a1a      	ldr	r2, [pc, #104]	@ (8005d18 <HAL_TIM_Base_Start+0xc0>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d009      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a18      	ldr	r2, [pc, #96]	@ (8005d1c <HAL_TIM_Base_Start+0xc4>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_TIM_Base_Start+0x70>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a17      	ldr	r2, [pc, #92]	@ (8005d20 <HAL_TIM_Base_Start+0xc8>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d111      	bne.n	8005cec <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0307 	and.w	r3, r3, #7
 8005cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b06      	cmp	r3, #6
 8005cd8:	d010      	beq.n	8005cfc <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f042 0201 	orr.w	r2, r2, #1
 8005ce8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cea:	e007      	b.n	8005cfc <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f042 0201 	orr.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bc80      	pop	{r7}
 8005d06:	4770      	bx	lr
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40000400 	.word	0x40000400
 8005d10:	40000800 	.word	0x40000800
 8005d14:	40000c00 	.word	0x40000c00
 8005d18:	40010400 	.word	0x40010400
 8005d1c:	40014000 	.word	0x40014000
 8005d20:	40001800 	.word	0x40001800

08005d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d001      	beq.n	8005d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e04e      	b.n	8005dda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2202      	movs	r2, #2
 8005d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a22      	ldr	r2, [pc, #136]	@ (8005de4 <HAL_TIM_Base_Start_IT+0xc0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d022      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d66:	d01d      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8005de8 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d018      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1d      	ldr	r2, [pc, #116]	@ (8005dec <HAL_TIM_Base_Start_IT+0xc8>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d013      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a1b      	ldr	r2, [pc, #108]	@ (8005df0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d00e      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	@ (8005df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d009      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a18      	ldr	r2, [pc, #96]	@ (8005df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d004      	beq.n	8005da4 <HAL_TIM_Base_Start_IT+0x80>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a17      	ldr	r2, [pc, #92]	@ (8005dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d111      	bne.n	8005dc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2b06      	cmp	r3, #6
 8005db4:	d010      	beq.n	8005dd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0201 	orr.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc6:	e007      	b.n	8005dd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bc80      	pop	{r7}
 8005de2:	4770      	bx	lr
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	40010400 	.word	0x40010400
 8005df8:	40014000 	.word	0x40014000
 8005dfc:	40001800 	.word	0x40001800

08005e00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d101      	bne.n	8005e12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e041      	b.n	8005e96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d106      	bne.n	8005e2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f7fc fee4 	bl	8002bf4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	4610      	mov	r0, r2
 8005e40:	f000 fc0a 	bl	8006658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e94:	2300      	movs	r3, #0
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
	...

08005ea0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d109      	bne.n	8005ec4 <HAL_TIM_PWM_Start+0x24>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	bf14      	ite	ne
 8005ebc:	2301      	movne	r3, #1
 8005ebe:	2300      	moveq	r3, #0
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	e022      	b.n	8005f0a <HAL_TIM_PWM_Start+0x6a>
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d109      	bne.n	8005ede <HAL_TIM_PWM_Start+0x3e>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	bf14      	ite	ne
 8005ed6:	2301      	movne	r3, #1
 8005ed8:	2300      	moveq	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	e015      	b.n	8005f0a <HAL_TIM_PWM_Start+0x6a>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d109      	bne.n	8005ef8 <HAL_TIM_PWM_Start+0x58>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	bf14      	ite	ne
 8005ef0:	2301      	movne	r3, #1
 8005ef2:	2300      	moveq	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	e008      	b.n	8005f0a <HAL_TIM_PWM_Start+0x6a>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	bf14      	ite	ne
 8005f04:	2301      	movne	r3, #1
 8005f06:	2300      	moveq	r3, #0
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e07c      	b.n	800600c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <HAL_TIM_PWM_Start+0x82>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f20:	e013      	b.n	8005f4a <HAL_TIM_PWM_Start+0xaa>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_PWM_Start+0x92>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f30:	e00b      	b.n	8005f4a <HAL_TIM_PWM_Start+0xaa>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_PWM_Start+0xa2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f40:	e003      	b.n	8005f4a <HAL_TIM_PWM_Start+0xaa>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	6839      	ldr	r1, [r7, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 fdd6 	bl	8006b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8006014 <HAL_TIM_PWM_Start+0x174>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d004      	beq.n	8005f6c <HAL_TIM_PWM_Start+0xcc>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a2c      	ldr	r2, [pc, #176]	@ (8006018 <HAL_TIM_PWM_Start+0x178>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIM_PWM_Start+0xd0>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	e000      	b.n	8005f72 <HAL_TIM_PWM_Start+0xd2>
 8005f70:	2300      	movs	r3, #0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d007      	beq.n	8005f86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a22      	ldr	r2, [pc, #136]	@ (8006014 <HAL_TIM_PWM_Start+0x174>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d022      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x136>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f98:	d01d      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x136>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a1f      	ldr	r2, [pc, #124]	@ (800601c <HAL_TIM_PWM_Start+0x17c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d018      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x136>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8006020 <HAL_TIM_PWM_Start+0x180>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d013      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x136>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8006024 <HAL_TIM_PWM_Start+0x184>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x136>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a16      	ldr	r2, [pc, #88]	@ (8006018 <HAL_TIM_PWM_Start+0x178>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d009      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x136>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a18      	ldr	r2, [pc, #96]	@ (8006028 <HAL_TIM_PWM_Start+0x188>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d004      	beq.n	8005fd6 <HAL_TIM_PWM_Start+0x136>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a16      	ldr	r2, [pc, #88]	@ (800602c <HAL_TIM_PWM_Start+0x18c>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d111      	bne.n	8005ffa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b06      	cmp	r3, #6
 8005fe6:	d010      	beq.n	800600a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff8:	e007      	b.n	800600a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0201 	orr.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3710      	adds	r7, #16
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	40010000 	.word	0x40010000
 8006018:	40010400 	.word	0x40010400
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40000c00 	.word	0x40000c00
 8006028:	40014000 	.word	0x40014000
 800602c:	40001800 	.word	0x40001800

08006030 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d101      	bne.n	8006044 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e097      	b.n	8006174 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d106      	bne.n	800605e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fc fdf3 	bl	8002c44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2202      	movs	r2, #2
 8006062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006074:	f023 0307 	bic.w	r3, r3, #7
 8006078:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	3304      	adds	r3, #4
 8006082:	4619      	mov	r1, r3
 8006084:	4610      	mov	r0, r2
 8006086:	f000 fae7 	bl	8006658 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6a1b      	ldr	r3, [r3, #32]
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b2:	f023 0303 	bic.w	r3, r3, #3
 80060b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	021b      	lsls	r3, r3, #8
 80060c2:	4313      	orrs	r3, r2
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80060d0:	f023 030c 	bic.w	r3, r3, #12
 80060d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80060dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	4313      	orrs	r3, r2
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	011a      	lsls	r2, r3, #4
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	031b      	lsls	r3, r3, #12
 8006100:	4313      	orrs	r3, r2
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006116:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	4313      	orrs	r3, r2
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	4313      	orrs	r3, r2
 8006128:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3718      	adds	r7, #24
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800618c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006194:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800619c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d110      	bne.n	80061ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d102      	bne.n	80061b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80061b2:	7b7b      	ldrb	r3, [r7, #13]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d001      	beq.n	80061bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e069      	b.n	8006290 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061cc:	e031      	b.n	8006232 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d110      	bne.n	80061f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061d4:	7bbb      	ldrb	r3, [r7, #14]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d102      	bne.n	80061e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80061da:	7b3b      	ldrb	r3, [r7, #12]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d001      	beq.n	80061e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e055      	b.n	8006290 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061f4:	e01d      	b.n	8006232 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d108      	bne.n	800620e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80061fc:	7bbb      	ldrb	r3, [r7, #14]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d105      	bne.n	800620e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006202:	7b7b      	ldrb	r3, [r7, #13]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d102      	bne.n	800620e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006208:	7b3b      	ldrb	r3, [r7, #12]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d001      	beq.n	8006212 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e03e      	b.n	8006290 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2202      	movs	r2, #2
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2202      	movs	r2, #2
 800621e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2202      	movs	r2, #2
 8006226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2202      	movs	r2, #2
 800622e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d003      	beq.n	8006240 <HAL_TIM_Encoder_Start+0xc4>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2b04      	cmp	r3, #4
 800623c:	d008      	beq.n	8006250 <HAL_TIM_Encoder_Start+0xd4>
 800623e:	e00f      	b.n	8006260 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2201      	movs	r2, #1
 8006246:	2100      	movs	r1, #0
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fc5b 	bl	8006b04 <TIM_CCxChannelCmd>
      break;
 800624e:	e016      	b.n	800627e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2201      	movs	r2, #1
 8006256:	2104      	movs	r1, #4
 8006258:	4618      	mov	r0, r3
 800625a:	f000 fc53 	bl	8006b04 <TIM_CCxChannelCmd>
      break;
 800625e:	e00e      	b.n	800627e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2201      	movs	r2, #1
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f000 fc4b 	bl	8006b04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2201      	movs	r2, #1
 8006274:	2104      	movs	r1, #4
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fc44 	bl	8006b04 <TIM_CCxChannelCmd>
      break;
 800627c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f042 0201 	orr.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d020      	beq.n	80062fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d01b      	beq.n	80062fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0202 	mvn.w	r2, #2
 80062cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2201      	movs	r2, #1
 80062d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f003 0303 	and.w	r3, r3, #3
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f99c 	bl	8006620 <HAL_TIM_IC_CaptureCallback>
 80062e8:	e005      	b.n	80062f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f98f 	bl	800660e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 f99e 	bl	8006632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	d020      	beq.n	8006348 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f003 0304 	and.w	r3, r3, #4
 800630c:	2b00      	cmp	r3, #0
 800630e:	d01b      	beq.n	8006348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0204 	mvn.w	r2, #4
 8006318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2202      	movs	r2, #2
 800631e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f976 	bl	8006620 <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f969 	bl	800660e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f978 	bl	8006632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d020      	beq.n	8006394 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01b      	beq.n	8006394 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f06f 0208 	mvn.w	r2, #8
 8006364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2204      	movs	r2, #4
 800636a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	69db      	ldr	r3, [r3, #28]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d003      	beq.n	8006382 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f950 	bl	8006620 <HAL_TIM_IC_CaptureCallback>
 8006380:	e005      	b.n	800638e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f943 	bl	800660e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f952 	bl	8006632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	f003 0310 	and.w	r3, r3, #16
 800639a:	2b00      	cmp	r3, #0
 800639c:	d020      	beq.n	80063e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01b      	beq.n	80063e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f06f 0210 	mvn.w	r2, #16
 80063b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2208      	movs	r2, #8
 80063b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f92a 	bl	8006620 <HAL_TIM_IC_CaptureCallback>
 80063cc:	e005      	b.n	80063da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f000 f91d 	bl	800660e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 f92c 	bl	8006632 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00c      	beq.n	8006404 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f06f 0201 	mvn.w	r2, #1
 80063fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 f8fc 	bl	80065fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00c      	beq.n	8006428 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fc66 	bl	8006cf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00c      	beq.n	800644c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f8fc 	bl	8006644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00c      	beq.n	8006470 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	2b00      	cmp	r3, #0
 800645e:	d007      	beq.n	8006470 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f06f 0220 	mvn.w	r2, #32
 8006468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fc39 	bl	8006ce2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006492:	2302      	movs	r3, #2
 8006494:	e0ae      	b.n	80065f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b0c      	cmp	r3, #12
 80064a2:	f200 809f 	bhi.w	80065e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064a6:	a201      	add	r2, pc, #4	@ (adr r2, 80064ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ac:	080064e1 	.word	0x080064e1
 80064b0:	080065e5 	.word	0x080065e5
 80064b4:	080065e5 	.word	0x080065e5
 80064b8:	080065e5 	.word	0x080065e5
 80064bc:	08006521 	.word	0x08006521
 80064c0:	080065e5 	.word	0x080065e5
 80064c4:	080065e5 	.word	0x080065e5
 80064c8:	080065e5 	.word	0x080065e5
 80064cc:	08006563 	.word	0x08006563
 80064d0:	080065e5 	.word	0x080065e5
 80064d4:	080065e5 	.word	0x080065e5
 80064d8:	080065e5 	.word	0x080065e5
 80064dc:	080065a3 	.word	0x080065a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68b9      	ldr	r1, [r7, #8]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 f960 	bl	80067ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	699a      	ldr	r2, [r3, #24]
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f042 0208 	orr.w	r2, r2, #8
 80064fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699a      	ldr	r2, [r3, #24]
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f022 0204 	bic.w	r2, r2, #4
 800650a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6999      	ldr	r1, [r3, #24]
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	619a      	str	r2, [r3, #24]
      break;
 800651e:	e064      	b.n	80065ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68b9      	ldr	r1, [r7, #8]
 8006526:	4618      	mov	r0, r3
 8006528:	f000 f9b0 	bl	800688c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699a      	ldr	r2, [r3, #24]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800653a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699a      	ldr	r2, [r3, #24]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800654a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6999      	ldr	r1, [r3, #24]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	021a      	lsls	r2, r3, #8
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	619a      	str	r2, [r3, #24]
      break;
 8006560:	e043      	b.n	80065ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68b9      	ldr	r1, [r7, #8]
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fa03 	bl	8006974 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0208 	orr.w	r2, r2, #8
 800657c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 0204 	bic.w	r2, r2, #4
 800658c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	69d9      	ldr	r1, [r3, #28]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	430a      	orrs	r2, r1
 800659e:	61da      	str	r2, [r3, #28]
      break;
 80065a0:	e023      	b.n	80065ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fa57 	bl	8006a5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	69da      	ldr	r2, [r3, #28]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69da      	ldr	r2, [r3, #28]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	69d9      	ldr	r1, [r3, #28]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	021a      	lsls	r2, r3, #8
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	61da      	str	r2, [r3, #28]
      break;
 80065e2:	e002      	b.n	80065ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	75fb      	strb	r3, [r7, #23]
      break;
 80065e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80065f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3718      	adds	r7, #24
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	bc80      	pop	{r7}
 800660c:	4770      	bx	lr

0800660e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	bc80      	pop	{r7}
 800661e:	4770      	bx	lr

08006620 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006628:	bf00      	nop
 800662a:	370c      	adds	r7, #12
 800662c:	46bd      	mov	sp, r7
 800662e:	bc80      	pop	{r7}
 8006630:	4770      	bx	lr

08006632 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	bc80      	pop	{r7}
 8006642:	4770      	bx	lr

08006644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	bc80      	pop	{r7}
 8006654:	4770      	bx	lr
	...

08006658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	4a45      	ldr	r2, [pc, #276]	@ (8006780 <TIM_Base_SetConfig+0x128>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d013      	beq.n	8006698 <TIM_Base_SetConfig+0x40>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006676:	d00f      	beq.n	8006698 <TIM_Base_SetConfig+0x40>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a42      	ldr	r2, [pc, #264]	@ (8006784 <TIM_Base_SetConfig+0x12c>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d00b      	beq.n	8006698 <TIM_Base_SetConfig+0x40>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	4a41      	ldr	r2, [pc, #260]	@ (8006788 <TIM_Base_SetConfig+0x130>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d007      	beq.n	8006698 <TIM_Base_SetConfig+0x40>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a40      	ldr	r2, [pc, #256]	@ (800678c <TIM_Base_SetConfig+0x134>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d003      	beq.n	8006698 <TIM_Base_SetConfig+0x40>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a3f      	ldr	r2, [pc, #252]	@ (8006790 <TIM_Base_SetConfig+0x138>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d108      	bne.n	80066aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a34      	ldr	r2, [pc, #208]	@ (8006780 <TIM_Base_SetConfig+0x128>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d02b      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b8:	d027      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a31      	ldr	r2, [pc, #196]	@ (8006784 <TIM_Base_SetConfig+0x12c>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d023      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a30      	ldr	r2, [pc, #192]	@ (8006788 <TIM_Base_SetConfig+0x130>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d01f      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a2f      	ldr	r2, [pc, #188]	@ (800678c <TIM_Base_SetConfig+0x134>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d01b      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a2e      	ldr	r2, [pc, #184]	@ (8006790 <TIM_Base_SetConfig+0x138>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d017      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a2d      	ldr	r2, [pc, #180]	@ (8006794 <TIM_Base_SetConfig+0x13c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d013      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a2c      	ldr	r2, [pc, #176]	@ (8006798 <TIM_Base_SetConfig+0x140>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d00f      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a2b      	ldr	r2, [pc, #172]	@ (800679c <TIM_Base_SetConfig+0x144>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d00b      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a2a      	ldr	r2, [pc, #168]	@ (80067a0 <TIM_Base_SetConfig+0x148>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d007      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a29      	ldr	r2, [pc, #164]	@ (80067a4 <TIM_Base_SetConfig+0x14c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d003      	beq.n	800670a <TIM_Base_SetConfig+0xb2>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a28      	ldr	r2, [pc, #160]	@ (80067a8 <TIM_Base_SetConfig+0x150>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d108      	bne.n	800671c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a0f      	ldr	r2, [pc, #60]	@ (8006780 <TIM_Base_SetConfig+0x128>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_Base_SetConfig+0xf8>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a11      	ldr	r2, [pc, #68]	@ (8006790 <TIM_Base_SetConfig+0x138>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d103      	bne.n	8006758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	691a      	ldr	r2, [r3, #16]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b01      	cmp	r3, #1
 8006768:	d105      	bne.n	8006776 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	f023 0201 	bic.w	r2, r3, #1
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	611a      	str	r2, [r3, #16]
  }
}
 8006776:	bf00      	nop
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr
 8006780:	40010000 	.word	0x40010000
 8006784:	40000400 	.word	0x40000400
 8006788:	40000800 	.word	0x40000800
 800678c:	40000c00 	.word	0x40000c00
 8006790:	40010400 	.word	0x40010400
 8006794:	40014000 	.word	0x40014000
 8006798:	40014400 	.word	0x40014400
 800679c:	40014800 	.word	0x40014800
 80067a0:	40001800 	.word	0x40001800
 80067a4:	40001c00 	.word	0x40001c00
 80067a8:	40002000 	.word	0x40002000

080067ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a1b      	ldr	r3, [r3, #32]
 80067c0:	f023 0201 	bic.w	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f023 0302 	bic.w	r3, r3, #2
 80067f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	697a      	ldr	r2, [r7, #20]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a20      	ldr	r2, [pc, #128]	@ (8006884 <TIM_OC1_SetConfig+0xd8>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d003      	beq.n	8006810 <TIM_OC1_SetConfig+0x64>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a1f      	ldr	r2, [pc, #124]	@ (8006888 <TIM_OC1_SetConfig+0xdc>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d10c      	bne.n	800682a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	f023 0308 	bic.w	r3, r3, #8
 8006816:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 0304 	bic.w	r3, r3, #4
 8006828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a15      	ldr	r2, [pc, #84]	@ (8006884 <TIM_OC1_SetConfig+0xd8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_OC1_SetConfig+0x8e>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a14      	ldr	r2, [pc, #80]	@ (8006888 <TIM_OC1_SetConfig+0xdc>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d111      	bne.n	800685e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	4313      	orrs	r3, r2
 8006852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	4313      	orrs	r3, r2
 800685c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	685a      	ldr	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	621a      	str	r2, [r3, #32]
}
 8006878:	bf00      	nop
 800687a:	371c      	adds	r7, #28
 800687c:	46bd      	mov	sp, r7
 800687e:	bc80      	pop	{r7}
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop
 8006884:	40010000 	.word	0x40010000
 8006888:	40010400 	.word	0x40010400

0800688c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800688c:	b480      	push	{r7}
 800688e:	b087      	sub	sp, #28
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	f023 0210 	bic.w	r2, r3, #16
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	021b      	lsls	r3, r3, #8
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	f023 0320 	bic.w	r3, r3, #32
 80068d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	697a      	ldr	r2, [r7, #20]
 80068e0:	4313      	orrs	r3, r2
 80068e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a21      	ldr	r2, [pc, #132]	@ (800696c <TIM_OC2_SetConfig+0xe0>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_OC2_SetConfig+0x68>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a20      	ldr	r2, [pc, #128]	@ (8006970 <TIM_OC2_SetConfig+0xe4>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d10d      	bne.n	8006910 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	011b      	lsls	r3, r3, #4
 8006902:	697a      	ldr	r2, [r7, #20]
 8006904:	4313      	orrs	r3, r2
 8006906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800690e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a16      	ldr	r2, [pc, #88]	@ (800696c <TIM_OC2_SetConfig+0xe0>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d003      	beq.n	8006920 <TIM_OC2_SetConfig+0x94>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a15      	ldr	r2, [pc, #84]	@ (8006970 <TIM_OC2_SetConfig+0xe4>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d113      	bne.n	8006948 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006926:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800692e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	4313      	orrs	r3, r2
 800693a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	4313      	orrs	r3, r2
 8006946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	621a      	str	r2, [r3, #32]
}
 8006962:	bf00      	nop
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	bc80      	pop	{r7}
 800696a:	4770      	bx	lr
 800696c:	40010000 	.word	0x40010000
 8006970:	40010400 	.word	0x40010400

08006974 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006974:	b480      	push	{r7}
 8006976:	b087      	sub	sp, #28
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	69db      	ldr	r3, [r3, #28]
 800699a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f023 0303 	bic.w	r3, r3, #3
 80069aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	68fa      	ldr	r2, [r7, #12]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80069bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	021b      	lsls	r3, r3, #8
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4a21      	ldr	r2, [pc, #132]	@ (8006a54 <TIM_OC3_SetConfig+0xe0>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d003      	beq.n	80069da <TIM_OC3_SetConfig+0x66>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4a20      	ldr	r2, [pc, #128]	@ (8006a58 <TIM_OC3_SetConfig+0xe4>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d10d      	bne.n	80069f6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80069e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	697a      	ldr	r2, [r7, #20]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a16      	ldr	r2, [pc, #88]	@ (8006a54 <TIM_OC3_SetConfig+0xe0>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d003      	beq.n	8006a06 <TIM_OC3_SetConfig+0x92>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a15      	ldr	r2, [pc, #84]	@ (8006a58 <TIM_OC3_SetConfig+0xe4>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d113      	bne.n	8006a2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	621a      	str	r2, [r3, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bc80      	pop	{r7}
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	40010000 	.word	0x40010000
 8006a58:	40010400 	.word	0x40010400

08006a5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	021b      	lsls	r3, r3, #8
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006aa6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	031b      	lsls	r3, r3, #12
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	4a11      	ldr	r2, [pc, #68]	@ (8006afc <TIM_OC4_SetConfig+0xa0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d003      	beq.n	8006ac4 <TIM_OC4_SetConfig+0x68>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	4a10      	ldr	r2, [pc, #64]	@ (8006b00 <TIM_OC4_SetConfig+0xa4>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d109      	bne.n	8006ad8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006aca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	695b      	ldr	r3, [r3, #20]
 8006ad0:	019b      	lsls	r3, r3, #6
 8006ad2:	697a      	ldr	r2, [r7, #20]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	693a      	ldr	r2, [r7, #16]
 8006af0:	621a      	str	r2, [r3, #32]
}
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr
 8006afc:	40010000 	.word	0x40010000
 8006b00:	40010400 	.word	0x40010400

08006b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	f003 031f 	and.w	r3, r3, #31
 8006b16:	2201      	movs	r2, #1
 8006b18:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6a1a      	ldr	r2, [r3, #32]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	43db      	mvns	r3, r3
 8006b26:	401a      	ands	r2, r3
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6a1a      	ldr	r2, [r3, #32]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	f003 031f 	and.w	r3, r3, #31
 8006b36:	6879      	ldr	r1, [r7, #4]
 8006b38:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	621a      	str	r2, [r3, #32]
}
 8006b42:	bf00      	nop
 8006b44:	371c      	adds	r7, #28
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr

08006b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e05a      	b.n	8006c1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a20      	ldr	r2, [pc, #128]	@ (8006c24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d022      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb0:	d01d      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8006c28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d018      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8006c2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d013      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a19      	ldr	r2, [pc, #100]	@ (8006c30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00e      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a17      	ldr	r2, [pc, #92]	@ (8006c34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d009      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a16      	ldr	r2, [pc, #88]	@ (8006c38 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d004      	beq.n	8006bee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a14      	ldr	r2, [pc, #80]	@ (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d10c      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3714      	adds	r7, #20
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bc80      	pop	{r7}
 8006c22:	4770      	bx	lr
 8006c24:	40010000 	.word	0x40010000
 8006c28:	40000400 	.word	0x40000400
 8006c2c:	40000800 	.word	0x40000800
 8006c30:	40000c00 	.word	0x40000c00
 8006c34:	40010400 	.word	0x40010400
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	40001800 	.word	0x40001800

08006c40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006c58:	2302      	movs	r3, #2
 8006c5a:	e03d      	b.n	8006cd8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	695b      	ldr	r3, [r3, #20]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bc80      	pop	{r7}
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cea:	bf00      	nop
 8006cec:	370c      	adds	r7, #12
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bc80      	pop	{r7}
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006cfc:	bf00      	nop
 8006cfe:	370c      	adds	r7, #12
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr

08006d06 <memset>:
 8006d06:	4603      	mov	r3, r0
 8006d08:	4402      	add	r2, r0
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d100      	bne.n	8006d10 <memset+0xa>
 8006d0e:	4770      	bx	lr
 8006d10:	f803 1b01 	strb.w	r1, [r3], #1
 8006d14:	e7f9      	b.n	8006d0a <memset+0x4>
	...

08006d18 <__libc_init_array>:
 8006d18:	b570      	push	{r4, r5, r6, lr}
 8006d1a:	2600      	movs	r6, #0
 8006d1c:	4d0c      	ldr	r5, [pc, #48]	@ (8006d50 <__libc_init_array+0x38>)
 8006d1e:	4c0d      	ldr	r4, [pc, #52]	@ (8006d54 <__libc_init_array+0x3c>)
 8006d20:	1b64      	subs	r4, r4, r5
 8006d22:	10a4      	asrs	r4, r4, #2
 8006d24:	42a6      	cmp	r6, r4
 8006d26:	d109      	bne.n	8006d3c <__libc_init_array+0x24>
 8006d28:	f000 f81a 	bl	8006d60 <_init>
 8006d2c:	2600      	movs	r6, #0
 8006d2e:	4d0a      	ldr	r5, [pc, #40]	@ (8006d58 <__libc_init_array+0x40>)
 8006d30:	4c0a      	ldr	r4, [pc, #40]	@ (8006d5c <__libc_init_array+0x44>)
 8006d32:	1b64      	subs	r4, r4, r5
 8006d34:	10a4      	asrs	r4, r4, #2
 8006d36:	42a6      	cmp	r6, r4
 8006d38:	d105      	bne.n	8006d46 <__libc_init_array+0x2e>
 8006d3a:	bd70      	pop	{r4, r5, r6, pc}
 8006d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d40:	4798      	blx	r3
 8006d42:	3601      	adds	r6, #1
 8006d44:	e7ee      	b.n	8006d24 <__libc_init_array+0xc>
 8006d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d4a:	4798      	blx	r3
 8006d4c:	3601      	adds	r6, #1
 8006d4e:	e7f2      	b.n	8006d36 <__libc_init_array+0x1e>
 8006d50:	08006da0 	.word	0x08006da0
 8006d54:	08006da0 	.word	0x08006da0
 8006d58:	08006da0 	.word	0x08006da0
 8006d5c:	08006da4 	.word	0x08006da4

08006d60 <_init>:
 8006d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d62:	bf00      	nop
 8006d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d66:	bc08      	pop	{r3}
 8006d68:	469e      	mov	lr, r3
 8006d6a:	4770      	bx	lr

08006d6c <_fini>:
 8006d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d6e:	bf00      	nop
 8006d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d72:	bc08      	pop	{r3}
 8006d74:	469e      	mov	lr, r3
 8006d76:	4770      	bx	lr
